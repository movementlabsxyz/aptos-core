
// ** Expanded prelude

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Basic theory for vectors using arrays. This version of vectors is not extensional.

datatype Vec<T> {
    Vec(v: [int]T, l: int)
}

function {:builtin "MapConst"} MapConstVec<T>(T): [int]T;
function DefaultVecElem<T>(): T;
function {:inline} DefaultVecMap<T>(): [int]T { MapConstVec(DefaultVecElem()) }

function {:inline} EmptyVec<T>(): Vec T {
    Vec(DefaultVecMap(), 0)
}

function {:inline} MakeVec1<T>(v: T): Vec T {
    Vec(DefaultVecMap()[0 := v], 1)
}

function {:inline} MakeVec2<T>(v1: T, v2: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2], 2)
}

function {:inline} MakeVec3<T>(v1: T, v2: T, v3: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3], 3)
}

function {:inline} MakeVec4<T>(v1: T, v2: T, v3: T, v4: T): Vec T {
    Vec(DefaultVecMap()[0 := v1][1 := v2][2 := v3][3 := v4], 4)
}

function {:inline} ExtendVec<T>(v: Vec T, elem: T): Vec T {
    (var l := v->l;
    Vec(v->v[l := elem], l + 1))
}

function {:inline} ReadVec<T>(v: Vec T, i: int): T {
    v->v[i]
}

function {:inline} LenVec<T>(v: Vec T): int {
    v->l
}

function {:inline} IsEmptyVec<T>(v: Vec T): bool {
    v->l == 0
}

function {:inline} RemoveVec<T>(v: Vec T): Vec T {
    (var l := v->l - 1;
    Vec(v->v[l := DefaultVecElem()], l))
}

function {:inline} RemoveAtVec<T>(v: Vec T, i: int): Vec T {
    (var l := v->l - 1;
    Vec(
        (lambda j: int ::
           if j >= 0 && j < l then
               if j < i then v->v[j] else v->v[j+1]
           else DefaultVecElem()),
        l))
}

function {:inline} ConcatVec<T>(v1: Vec T, v2: Vec T): Vec T {
    (var l1, m1, l2, m2 := v1->l, v1->v, v2->l, v2->v;
    Vec(
        (lambda i: int ::
          if i >= 0 && i < l1 + l2 then
            if i < l1 then m1[i] else m2[i - l1]
          else DefaultVecElem()),
        l1 + l2))
}

function {:inline} ReverseVec<T>(v: Vec T): Vec T {
    (var l := v->l;
    Vec(
        (lambda i: int :: if 0 <= i && i < l then v->v[l - i - 1] else DefaultVecElem()),
        l))
}

function {:inline} SliceVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v->v;
    Vec(
        (lambda k:int ::
          if 0 <= k && k < j - i then
            m[i + k]
          else
            DefaultVecElem()),
        (if j - i < 0 then 0 else j - i)))
}


function {:inline} UpdateVec<T>(v: Vec T, i: int, elem: T): Vec T {
    Vec(v->v[i := elem], v->l)
}

function {:inline} SwapVec<T>(v: Vec T, i: int, j: int): Vec T {
    (var m := v->v;
    Vec(m[i := m[j]][j := m[i]], v->l))
}

function {:inline} ContainsVec<T>(v: Vec T, e: T): bool {
    (var l := v->l;
    (exists i: int :: InRangeVec(v, i) && v->v[i] == e))
}

function IndexOfVec<T>(v: Vec T, e: T): int;
axiom {:ctor "Vec"} (forall<T> v: Vec T, e: T :: {IndexOfVec(v, e)}
    (var i := IndexOfVec(v,e);
     if (!ContainsVec(v, e)) then i == -1
     else InRangeVec(v, i) && ReadVec(v, i) == e &&
        (forall j: int :: j >= 0 && j < i ==> ReadVec(v, j) != e)));

// This function should stay non-inlined as it guards many quantifiers
// over vectors. It appears important to have this uninterpreted for
// quantifier triggering.
function InRangeVec<T>(v: Vec T, i: int): bool {
    i >= 0 && i < LenVec(v)
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Boogie model for multisets, based on Boogie arrays. This theory assumes extensional equality for element types.

datatype Multiset<T> {
    Multiset(v: [T]int, l: int)
}

function {:builtin "MapConst"} MapConstMultiset<T>(l: int): [T]int;

function {:inline} EmptyMultiset<T>(): Multiset T {
    Multiset(MapConstMultiset(0), 0)
}

function {:inline} LenMultiset<T>(s: Multiset T): int {
    s->l
}

function {:inline} ExtendMultiset<T>(s: Multiset T, v: T): Multiset T {
    (var len := s->l;
    (var cnt := s->v[v];
    Multiset(s->v[v := (cnt + 1)], len + 1)))
}

// This function returns (s1 - s2). This function assumes that s2 is a subset of s1.
function {:inline} SubtractMultiset<T>(s1: Multiset T, s2: Multiset T): Multiset T {
    (var len1 := s1->l;
    (var len2 := s2->l;
    Multiset((lambda v:T :: s1->v[v]-s2->v[v]), len1-len2)))
}

function {:inline} IsEmptyMultiset<T>(s: Multiset T): bool {
    (s->l == 0) &&
    (forall v: T :: s->v[v] == 0)
}

function {:inline} IsSubsetMultiset<T>(s1: Multiset T, s2: Multiset T): bool {
    (s1->l <= s2->l) &&
    (forall v: T :: s1->v[v] <= s2->v[v])
}

function {:inline} ContainsMultiset<T>(s: Multiset T, v: T): bool {
    s->v[v] > 0
}

// Copyright (c) The Diem Core Contributors
// Copyright (c) The Move Contributors
// SPDX-License-Identifier: Apache-2.0

// Theory for tables.

// v is the SMT array holding the key-value assignment. e is an array which
// independently determines whether a key is valid or not. l is the length.
//
// Note that even though the program cannot reflect over existence of a key,
// we want the specification to be able to do this, so it can express
// verification conditions like "key has been inserted".
datatype Table <K, V> {
    Table(v: [K]V, e: [K]bool, l: int)
}

// Functions for default SMT arrays. For the table values, we don't care and
// use an uninterpreted function.
function DefaultTableArray<K, V>(): [K]V;
function DefaultTableKeyExistsArray<K>(): [K]bool;
axiom DefaultTableKeyExistsArray() == (lambda i: int :: false);

function {:inline} EmptyTable<K, V>(): Table K V {
    Table(DefaultTableArray(), DefaultTableKeyExistsArray(), 0)
}

function {:inline} GetTable<K,V>(t: Table K V, k: K): V {
    // Notice we do not check whether key is in the table. The result is undetermined if it is not.
    t->v[k]
}

function {:inline} LenTable<K,V>(t: Table K V): int {
    t->l
}


function {:inline} ContainsTable<K,V>(t: Table K V, k: K): bool {
    t->e[k]
}

function {:inline} UpdateTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    Table(t->v[k := v], t->e, t->l)
}

function {:inline} AddTable<K,V>(t: Table K V, k: K, v: V): Table K V {
    // This function has an undetermined result if the key is already in the table
    // (all specification functions have this "partial definiteness" behavior). Thus we can
    // just increment the length.
    Table(t->v[k := v], t->e[k := true], t->l + 1)
}

function {:inline} RemoveTable<K,V>(t: Table K V, k: K): Table K V {
    // Similar as above, we only need to consider the case where the key is in the table.
    Table(t->v, t->e[k := false], t->l - 1)
}

axiom {:ctor "Table"} (forall<K,V> t: Table K V :: {LenTable(t)}
    (exists k: K :: {ContainsTable(t, k)} ContainsTable(t, k)) ==> LenTable(t) >= 1
);
// TODO: we might want to encoder a stronger property that the length of table
// must be more than N given a set of N items. Currently we don't see a need here
// and the above axiom seems to be sufficient.
// Copyright Â© Aptos Foundation
// SPDX-License-Identifier: Apache-2.0

// ==================================================================================
// Native object::exists_at

// ==================================================================================
// Intrinsic implementation of aggregator and aggregator factory

datatype $1_aggregator_Aggregator {
    $1_aggregator_Aggregator($handle: int, $key: int, $limit: int, $val: int)
}
function {:inline} $Update'$1_aggregator_Aggregator'_handle(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(x, s->$key, s->$limit, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_key(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, x, s->$limit, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_limit(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, s->$key, x, s->$val)
}
function {:inline} $Update'$1_aggregator_Aggregator'_val(s: $1_aggregator_Aggregator, x: int): $1_aggregator_Aggregator {
    $1_aggregator_Aggregator(s->$handle, s->$key, s->$limit, x)
}
function $IsValid'$1_aggregator_Aggregator'(s: $1_aggregator_Aggregator): bool {
    $IsValid'address'(s->$handle)
      && $IsValid'address'(s->$key)
      && $IsValid'u128'(s->$limit)
      && $IsValid'u128'(s->$val)
}
function {:inline} $IsEqual'$1_aggregator_Aggregator'(s1: $1_aggregator_Aggregator, s2: $1_aggregator_Aggregator): bool {
    s1 == s2
}
function {:inline} $1_aggregator_spec_get_limit(s: $1_aggregator_Aggregator): int {
    s->$limit
}
function {:inline} $1_aggregator_spec_get_handle(s: $1_aggregator_Aggregator): int {
    s->$handle
}
function {:inline} $1_aggregator_spec_get_key(s: $1_aggregator_Aggregator): int {
    s->$key
}
function {:inline} $1_aggregator_spec_get_val(s: $1_aggregator_Aggregator): int {
    s->$val
}

function $1_aggregator_spec_read(agg: $1_aggregator_Aggregator): int {
    $1_aggregator_spec_get_val(agg)
}

function $1_aggregator_spec_aggregator_set_val(agg: $1_aggregator_Aggregator, val: int): $1_aggregator_Aggregator {
    $Update'$1_aggregator_Aggregator'_val(agg, val)
}

function $1_aggregator_spec_aggregator_get_val(agg: $1_aggregator_Aggregator): int {
    $1_aggregator_spec_get_val(agg)
}

function $1_aggregator_factory_spec_new_aggregator(limit: int) : $1_aggregator_Aggregator;

axiom (forall limit: int :: {$1_aggregator_factory_spec_new_aggregator(limit)}
    (var agg := $1_aggregator_factory_spec_new_aggregator(limit);
     $1_aggregator_spec_get_limit(agg) == limit));

axiom (forall limit: int :: {$1_aggregator_factory_spec_new_aggregator(limit)}
     (var agg := $1_aggregator_factory_spec_new_aggregator(limit);
     $1_aggregator_spec_aggregator_get_val(agg) == 0));


// ============================================================================================
// Primitive Types

const $MAX_U8: int;
axiom $MAX_U8 == 255;
const $MAX_U16: int;
axiom $MAX_U16 == 65535;
const $MAX_U32: int;
axiom $MAX_U32 == 4294967295;
const $MAX_U64: int;
axiom $MAX_U64 == 18446744073709551615;
const $MAX_U128: int;
axiom $MAX_U128 == 340282366920938463463374607431768211455;
const $MAX_U256: int;
axiom $MAX_U256 == 115792089237316195423570985008687907853269984665640564039457584007913129639935;

// Templates for bitvector operations

function {:bvbuiltin "bvand"} $And'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvor"} $Or'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvxor"} $Xor'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvadd"} $Add'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvsub"} $Sub'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvmul"} $Mul'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvudiv"} $Div'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvurem"} $Mod'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvshl"} $Shl'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvlshr"} $Shr'Bv8'(bv8,bv8) returns(bv8);
function {:bvbuiltin "bvult"} $Lt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv8'(bv8,bv8) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv8'(bv8,bv8) returns(bool);

procedure {:inline 1} $AddBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Add'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $AddBv8_unchecked(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Add'Bv8'(src1, src2);
}

procedure {:inline 1} $SubBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv8'(src1, src2);
}

procedure {:inline 1} $MulBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Lt'Bv8'($Mul'Bv8'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv8'(src1, src2);
}

procedure {:inline 1} $DivBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv8'(src1, src2);
}

procedure {:inline 1} $ModBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if (src2 == 0bv8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv8'(src1, src2);
}

procedure {:inline 1} $AndBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $And'Bv8'(src1,src2);
}

procedure {:inline 1} $OrBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Or'Bv8'(src1,src2);
}

procedure {:inline 1} $XorBv8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    dst := $Xor'Bv8'(src1,src2);
}

procedure {:inline 1} $LtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Lt'Bv8'(src1,src2);
}

procedure {:inline 1} $LeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Le'Bv8'(src1,src2);
}

procedure {:inline 1} $GtBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Gt'Bv8'(src1,src2);
}

procedure {:inline 1} $GeBv8(src1: bv8, src2: bv8) returns (dst: bool)
{
    dst := $Ge'Bv8'(src1,src2);
}

function $IsValid'bv8'(v: bv8): bool {
  $Ge'Bv8'(v,0bv8) && $Le'Bv8'(v,255bv8)
}

function {:inline} $IsEqual'bv8'(x: bv8, y: bv8): bool {
    x == y
}

procedure {:inline 1} $int2bv8(src: int) returns (dst: bv8)
{
    if (src > 255) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.8(src);
}

procedure {:inline 1} $bv2int8(src: bv8) returns (dst: int)
{
    dst := $bv2int.8(src);
}

function {:builtin "(_ int2bv 8)"} $int2bv.8(i: int) returns (bv8);
function {:builtin "bv2nat"} $bv2int.8(i: bv8) returns (int);

function {:bvbuiltin "bvand"} $And'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvor"} $Or'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvxor"} $Xor'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvadd"} $Add'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvsub"} $Sub'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvmul"} $Mul'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvudiv"} $Div'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvurem"} $Mod'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvshl"} $Shl'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvlshr"} $Shr'Bv16'(bv16,bv16) returns(bv16);
function {:bvbuiltin "bvult"} $Lt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv16'(bv16,bv16) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv16'(bv16,bv16) returns(bool);

procedure {:inline 1} $AddBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Add'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $AddBv16_unchecked(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Add'Bv16'(src1, src2);
}

procedure {:inline 1} $SubBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv16'(src1, src2);
}

procedure {:inline 1} $MulBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Lt'Bv16'($Mul'Bv16'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv16'(src1, src2);
}

procedure {:inline 1} $DivBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv16'(src1, src2);
}

procedure {:inline 1} $ModBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if (src2 == 0bv16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv16'(src1, src2);
}

procedure {:inline 1} $AndBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $And'Bv16'(src1,src2);
}

procedure {:inline 1} $OrBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Or'Bv16'(src1,src2);
}

procedure {:inline 1} $XorBv16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    dst := $Xor'Bv16'(src1,src2);
}

procedure {:inline 1} $LtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Lt'Bv16'(src1,src2);
}

procedure {:inline 1} $LeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Le'Bv16'(src1,src2);
}

procedure {:inline 1} $GtBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Gt'Bv16'(src1,src2);
}

procedure {:inline 1} $GeBv16(src1: bv16, src2: bv16) returns (dst: bool)
{
    dst := $Ge'Bv16'(src1,src2);
}

function $IsValid'bv16'(v: bv16): bool {
  $Ge'Bv16'(v,0bv16) && $Le'Bv16'(v,65535bv16)
}

function {:inline} $IsEqual'bv16'(x: bv16, y: bv16): bool {
    x == y
}

procedure {:inline 1} $int2bv16(src: int) returns (dst: bv16)
{
    if (src > 65535) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.16(src);
}

procedure {:inline 1} $bv2int16(src: bv16) returns (dst: int)
{
    dst := $bv2int.16(src);
}

function {:builtin "(_ int2bv 16)"} $int2bv.16(i: int) returns (bv16);
function {:builtin "bv2nat"} $bv2int.16(i: bv16) returns (int);

function {:bvbuiltin "bvand"} $And'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvor"} $Or'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvxor"} $Xor'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvadd"} $Add'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvsub"} $Sub'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvmul"} $Mul'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvudiv"} $Div'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvurem"} $Mod'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvshl"} $Shl'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvlshr"} $Shr'Bv32'(bv32,bv32) returns(bv32);
function {:bvbuiltin "bvult"} $Lt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv32'(bv32,bv32) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv32'(bv32,bv32) returns(bool);

procedure {:inline 1} $AddBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Add'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $AddBv32_unchecked(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Add'Bv32'(src1, src2);
}

procedure {:inline 1} $SubBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv32'(src1, src2);
}

procedure {:inline 1} $MulBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Lt'Bv32'($Mul'Bv32'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv32'(src1, src2);
}

procedure {:inline 1} $DivBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv32'(src1, src2);
}

procedure {:inline 1} $ModBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if (src2 == 0bv32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv32'(src1, src2);
}

procedure {:inline 1} $AndBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $And'Bv32'(src1,src2);
}

procedure {:inline 1} $OrBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Or'Bv32'(src1,src2);
}

procedure {:inline 1} $XorBv32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    dst := $Xor'Bv32'(src1,src2);
}

procedure {:inline 1} $LtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Lt'Bv32'(src1,src2);
}

procedure {:inline 1} $LeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Le'Bv32'(src1,src2);
}

procedure {:inline 1} $GtBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Gt'Bv32'(src1,src2);
}

procedure {:inline 1} $GeBv32(src1: bv32, src2: bv32) returns (dst: bool)
{
    dst := $Ge'Bv32'(src1,src2);
}

function $IsValid'bv32'(v: bv32): bool {
  $Ge'Bv32'(v,0bv32) && $Le'Bv32'(v,2147483647bv32)
}

function {:inline} $IsEqual'bv32'(x: bv32, y: bv32): bool {
    x == y
}

procedure {:inline 1} $int2bv32(src: int) returns (dst: bv32)
{
    if (src > 2147483647) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.32(src);
}

procedure {:inline 1} $bv2int32(src: bv32) returns (dst: int)
{
    dst := $bv2int.32(src);
}

function {:builtin "(_ int2bv 32)"} $int2bv.32(i: int) returns (bv32);
function {:builtin "bv2nat"} $bv2int.32(i: bv32) returns (int);

function {:bvbuiltin "bvand"} $And'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvor"} $Or'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvxor"} $Xor'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvadd"} $Add'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvsub"} $Sub'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvmul"} $Mul'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvudiv"} $Div'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvurem"} $Mod'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvshl"} $Shl'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvlshr"} $Shr'Bv64'(bv64,bv64) returns(bv64);
function {:bvbuiltin "bvult"} $Lt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv64'(bv64,bv64) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv64'(bv64,bv64) returns(bool);

procedure {:inline 1} $AddBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Add'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $AddBv64_unchecked(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Add'Bv64'(src1, src2);
}

procedure {:inline 1} $SubBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv64'(src1, src2);
}

procedure {:inline 1} $MulBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Lt'Bv64'($Mul'Bv64'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv64'(src1, src2);
}

procedure {:inline 1} $DivBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv64'(src1, src2);
}

procedure {:inline 1} $ModBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if (src2 == 0bv64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv64'(src1, src2);
}

procedure {:inline 1} $AndBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $And'Bv64'(src1,src2);
}

procedure {:inline 1} $OrBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Or'Bv64'(src1,src2);
}

procedure {:inline 1} $XorBv64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    dst := $Xor'Bv64'(src1,src2);
}

procedure {:inline 1} $LtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Lt'Bv64'(src1,src2);
}

procedure {:inline 1} $LeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Le'Bv64'(src1,src2);
}

procedure {:inline 1} $GtBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Gt'Bv64'(src1,src2);
}

procedure {:inline 1} $GeBv64(src1: bv64, src2: bv64) returns (dst: bool)
{
    dst := $Ge'Bv64'(src1,src2);
}

function $IsValid'bv64'(v: bv64): bool {
  $Ge'Bv64'(v,0bv64) && $Le'Bv64'(v,18446744073709551615bv64)
}

function {:inline} $IsEqual'bv64'(x: bv64, y: bv64): bool {
    x == y
}

procedure {:inline 1} $int2bv64(src: int) returns (dst: bv64)
{
    if (src > 18446744073709551615) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.64(src);
}

procedure {:inline 1} $bv2int64(src: bv64) returns (dst: int)
{
    dst := $bv2int.64(src);
}

function {:builtin "(_ int2bv 64)"} $int2bv.64(i: int) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (int);

function {:bvbuiltin "bvand"} $And'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvor"} $Or'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvxor"} $Xor'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvadd"} $Add'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvsub"} $Sub'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvmul"} $Mul'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvudiv"} $Div'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvurem"} $Mod'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvshl"} $Shl'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvlshr"} $Shr'Bv128'(bv128,bv128) returns(bv128);
function {:bvbuiltin "bvult"} $Lt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv128'(bv128,bv128) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv128'(bv128,bv128) returns(bool);

procedure {:inline 1} $AddBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Add'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $AddBv128_unchecked(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Add'Bv128'(src1, src2);
}

procedure {:inline 1} $SubBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv128'(src1, src2);
}

procedure {:inline 1} $MulBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Lt'Bv128'($Mul'Bv128'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv128'(src1, src2);
}

procedure {:inline 1} $DivBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv128'(src1, src2);
}

procedure {:inline 1} $ModBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if (src2 == 0bv128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv128'(src1, src2);
}

procedure {:inline 1} $AndBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $And'Bv128'(src1,src2);
}

procedure {:inline 1} $OrBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Or'Bv128'(src1,src2);
}

procedure {:inline 1} $XorBv128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    dst := $Xor'Bv128'(src1,src2);
}

procedure {:inline 1} $LtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Lt'Bv128'(src1,src2);
}

procedure {:inline 1} $LeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Le'Bv128'(src1,src2);
}

procedure {:inline 1} $GtBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Gt'Bv128'(src1,src2);
}

procedure {:inline 1} $GeBv128(src1: bv128, src2: bv128) returns (dst: bool)
{
    dst := $Ge'Bv128'(src1,src2);
}

function $IsValid'bv128'(v: bv128): bool {
  $Ge'Bv128'(v,0bv128) && $Le'Bv128'(v,340282366920938463463374607431768211455bv128)
}

function {:inline} $IsEqual'bv128'(x: bv128, y: bv128): bool {
    x == y
}

procedure {:inline 1} $int2bv128(src: int) returns (dst: bv128)
{
    if (src > 340282366920938463463374607431768211455) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.128(src);
}

procedure {:inline 1} $bv2int128(src: bv128) returns (dst: int)
{
    dst := $bv2int.128(src);
}

function {:builtin "(_ int2bv 128)"} $int2bv.128(i: int) returns (bv128);
function {:builtin "bv2nat"} $bv2int.128(i: bv128) returns (int);

function {:bvbuiltin "bvand"} $And'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvor"} $Or'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvxor"} $Xor'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvadd"} $Add'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvsub"} $Sub'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvmul"} $Mul'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvudiv"} $Div'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvurem"} $Mod'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvshl"} $Shl'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvlshr"} $Shr'Bv256'(bv256,bv256) returns(bv256);
function {:bvbuiltin "bvult"} $Lt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvule"} $Le'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvugt"} $Gt'Bv256'(bv256,bv256) returns(bool);
function {:bvbuiltin "bvuge"} $Ge'Bv256'(bv256,bv256) returns(bool);

procedure {:inline 1} $AddBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Add'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $AddBv256_unchecked(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Add'Bv256'(src1, src2);
}

procedure {:inline 1} $SubBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'(src1, src2)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Sub'Bv256'(src1, src2);
}

procedure {:inline 1} $MulBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Lt'Bv256'($Mul'Bv256'(src1, src2), src1)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mul'Bv256'(src1, src2);
}

procedure {:inline 1} $DivBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Div'Bv256'(src1, src2);
}

procedure {:inline 1} $ModBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if (src2 == 0bv256) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mod'Bv256'(src1, src2);
}

procedure {:inline 1} $AndBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $And'Bv256'(src1,src2);
}

procedure {:inline 1} $OrBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Or'Bv256'(src1,src2);
}

procedure {:inline 1} $XorBv256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    dst := $Xor'Bv256'(src1,src2);
}

procedure {:inline 1} $LtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Lt'Bv256'(src1,src2);
}

procedure {:inline 1} $LeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Le'Bv256'(src1,src2);
}

procedure {:inline 1} $GtBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Gt'Bv256'(src1,src2);
}

procedure {:inline 1} $GeBv256(src1: bv256, src2: bv256) returns (dst: bool)
{
    dst := $Ge'Bv256'(src1,src2);
}

function $IsValid'bv256'(v: bv256): bool {
  $Ge'Bv256'(v,0bv256) && $Le'Bv256'(v,115792089237316195423570985008687907853269984665640564039457584007913129639935bv256)
}

function {:inline} $IsEqual'bv256'(x: bv256, y: bv256): bool {
    x == y
}

procedure {:inline 1} $int2bv256(src: int) returns (dst: bv256)
{
    if (src > 115792089237316195423570985008687907853269984665640564039457584007913129639935) {
        call $ExecFailureAbort();
        return;
    }
    dst := $int2bv.256(src);
}

procedure {:inline 1} $bv2int256(src: bv256) returns (dst: int)
{
    dst := $bv2int.256(src);
}

function {:builtin "(_ int2bv 256)"} $int2bv.256(i: int) returns (bv256);
function {:builtin "bv2nat"} $bv2int.256(i: bv256) returns (int);

datatype $Range {
    $Range(lb: int, ub: int)
}

function {:inline} $IsValid'bool'(v: bool): bool {
  true
}

function $IsValid'u8'(v: int): bool {
  v >= 0 && v <= $MAX_U8
}

function $IsValid'u16'(v: int): bool {
  v >= 0 && v <= $MAX_U16
}

function $IsValid'u32'(v: int): bool {
  v >= 0 && v <= $MAX_U32
}

function $IsValid'u64'(v: int): bool {
  v >= 0 && v <= $MAX_U64
}

function $IsValid'u128'(v: int): bool {
  v >= 0 && v <= $MAX_U128
}

function $IsValid'u256'(v: int): bool {
  v >= 0 && v <= $MAX_U256
}

function $IsValid'num'(v: int): bool {
  true
}

function $IsValid'address'(v: int): bool {
  // TODO: restrict max to representable addresses?
  v >= 0
}

function {:inline} $IsValidRange(r: $Range): bool {
   $IsValid'u64'(r->lb) &&  $IsValid'u64'(r->ub)
}

// Intentionally not inlined so it serves as a trigger in quantifiers.
function $InRange(r: $Range, i: int): bool {
   r->lb <= i && i < r->ub
}


function {:inline} $IsEqual'u8'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u16'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u32'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u64'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u128'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'u256'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'num'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'address'(x: int, y: int): bool {
    x == y
}

function {:inline} $IsEqual'bool'(x: bool, y: bool): bool {
    x == y
}

// ============================================================================================
// Memory

datatype $Location {
    // A global resource location within the statically known resource type's memory,
    // where `a` is an address.
    $Global(a: int),
    // A local location. `i` is the unique index of the local.
    $Local(i: int),
    // The location of a reference outside of the verification scope, for example, a `&mut` parameter
    // of the function being verified. References with these locations don't need to be written back
    // when mutation ends.
    $Param(i: int),
    // The location of an uninitialized mutation. Using this to make sure that the location
    // will not be equal to any valid mutation locations, i.e., $Local, $Global, or $Param.
    $Uninitialized()
}

// A mutable reference which also carries its current value. Since mutable references
// are single threaded in Move, we can keep them together and treat them as a value
// during mutation until the point they are stored back to their original location.
datatype $Mutation<T> {
    $Mutation(l: $Location, p: Vec int, v: T)
}

// Representation of memory for a given type.
datatype $Memory<T> {
    $Memory(domain: [int]bool, contents: [int]T)
}

function {:builtin "MapConst"} $ConstMemoryDomain(v: bool): [int]bool;
function {:builtin "MapConst"} $ConstMemoryContent<T>(v: T): [int]T;
axiom $ConstMemoryDomain(false) == (lambda i: int :: false);
axiom $ConstMemoryDomain(true) == (lambda i: int :: true);


// Dereferences a mutation.
function {:inline} $Dereference<T>(ref: $Mutation T): T {
    ref->v
}

// Update the value of a mutation.
function {:inline} $UpdateMutation<T>(m: $Mutation T, v: T): $Mutation T {
    $Mutation(m->l, m->p, v)
}

function {:inline} $ChildMutation<T1, T2>(m: $Mutation T1, offset: int, v: T2): $Mutation T2 {
    $Mutation(m->l, ExtendVec(m->p, offset), v)
}

// Return true if two mutations share the location and path
function {:inline} $IsSameMutation<T1, T2>(parent: $Mutation T1, child: $Mutation T2 ): bool {
    parent->l == child->l && parent->p == child->p
}

// Return true if the mutation is a parent of a child which was derived with the given edge offset. This
// is used to implement write-back choices.
function {:inline} $IsParentMutation<T1, T2>(parent: $Mutation T1, edge: int, child: $Mutation T2 ): bool {
    parent->l == child->l &&
    (var pp := parent->p;
    (var cp := child->p;
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
     cl == pl + 1 &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) ==  ReadVec(cp, i)) &&
     $EdgeMatches(ReadVec(cp, pl), edge)
    ))))
}

// Return true if the mutation is a parent of a child, for hyper edge.
function {:inline} $IsParentMutationHyper<T1, T2>(parent: $Mutation T1, hyper_edge: Vec int, child: $Mutation T2 ): bool {
    parent->l == child->l &&
    (var pp := parent->p;
    (var cp := child->p;
    (var pl := LenVec(pp);
    (var cl := LenVec(cp);
    (var el := LenVec(hyper_edge);
     cl == pl + el &&
     (forall i: int:: i >= 0 && i < pl ==> ReadVec(pp, i) == ReadVec(cp, i)) &&
     (forall i: int:: i >= 0 && i < el ==> $EdgeMatches(ReadVec(cp, pl + i), ReadVec(hyper_edge, i)))
    )))))
}

function {:inline} $EdgeMatches(edge: int, edge_pattern: int): bool {
    edge_pattern == -1 // wildcard
    || edge_pattern == edge
}



function {:inline} $SameLocation<T1, T2>(m1: $Mutation T1, m2: $Mutation T2): bool {
    m1->l == m2->l
}

function {:inline} $HasGlobalLocation<T>(m: $Mutation T): bool {
    (m->l) is $Global
}

function {:inline} $HasLocalLocation<T>(m: $Mutation T, idx: int): bool {
    m->l == $Local(idx)
}

function {:inline} $GlobalLocationAddress<T>(m: $Mutation T): int {
    (m->l)->a
}



// Tests whether resource exists.
function {:inline} $ResourceExists<T>(m: $Memory T, addr: int): bool {
    m->domain[addr]
}

// Obtains Value of given resource.
function {:inline} $ResourceValue<T>(m: $Memory T, addr: int): T {
    m->contents[addr]
}

// Update resource.
function {:inline} $ResourceUpdate<T>(m: $Memory T, a: int, v: T): $Memory T {
    $Memory(m->domain[a := true], m->contents[a := v])
}

// Remove resource.
function {:inline} $ResourceRemove<T>(m: $Memory T, a: int): $Memory T {
    $Memory(m->domain[a := false], m->contents)
}

// Copies resource from memory s to m.
function {:inline} $ResourceCopy<T>(m: $Memory T, s: $Memory T, a: int): $Memory T {
    $Memory(m->domain[a := s->domain[a]],
            m->contents[a := s->contents[a]])
}



// ============================================================================================
// Abort Handling

var $abort_flag: bool;
var $abort_code: int;

function {:inline} $process_abort_code(code: int): int {
    code
}

const $EXEC_FAILURE_CODE: int;
axiom $EXEC_FAILURE_CODE == -1;

// TODO(wrwg): currently we map aborts of native functions like those for vectors also to
//   execution failure. This may need to be aligned with what the runtime actually does.

procedure {:inline 1} $ExecFailureAbort() {
    $abort_flag := true;
    $abort_code := $EXEC_FAILURE_CODE;
}

procedure {:inline 1} $Abort(code: int) {
    $abort_flag := true;
    $abort_code := code;
}

function {:inline} $StdError(cat: int, reason: int): int {
    reason * 256 + cat
}

procedure {:inline 1} $InitVerification() {
    // Set abort_flag to false, and havoc abort_code
    $abort_flag := false;
    havoc $abort_code;
    // Initialize event store
    call $InitEventStore();
}

// ============================================================================================
// Instructions


procedure {:inline 1} $CastU8(src: int) returns (dst: int)
{
    if (src > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU16(src: int) returns (dst: int)
{
    if (src > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU32(src: int) returns (dst: int)
{
    if (src > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU64(src: int) returns (dst: int)
{
    if (src > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU128(src: int) returns (dst: int)
{
    if (src > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $CastU256(src: int) returns (dst: int)
{
    if (src > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src;
}

procedure {:inline 1} $AddU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU16_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU32_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU64_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU128_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 + src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 + src2;
}

procedure {:inline 1} $AddU256_unchecked(src1: int, src2: int) returns (dst: int)
{
    dst := src1 + src2;
}

procedure {:inline 1} $Sub(src1: int, src2: int) returns (dst: int)
{
    if (src1 < src2) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 - src2;
}

// uninterpreted function to return an undefined value.
function $undefined_int(): int;

// Recursive exponentiation function
// Undefined unless e >=0.  $pow(0,0) is also undefined.
function $pow(n: int, e: int): int {
    if n != 0 && e == 0 then 1
    else if e > 0 then n * $pow(n, e - 1)
    else $undefined_int()
}

function $shl(src1: int, p: int): int {
    src1 * $pow(2, p)
}

function $shlU8(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 256
}

function $shlU16(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 65536
}

function $shlU32(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 4294967296
}

function $shlU64(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 18446744073709551616
}

function $shlU128(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 340282366920938463463374607431768211456
}

function $shlU256(src1: int, p: int): int {
    (src1 * $pow(2, p)) mod 115792089237316195423570985008687907853269984665640564039457584007913129639936
}

function $shr(src1: int, p: int): int {
    src1 div $pow(2, p)
}

// We need to know the size of the destination in order to drop bits
// that have been shifted left more than that, so we have $ShlU8/16/32/64/128/256
procedure {:inline 1} $ShlU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU8(src1, src2);
}

// Template for cast and shift operations of bitvector types

procedure {:inline 1} $CastBv8to8(src: bv8) returns (dst: bv8)
{
    dst := src;
}


function $shlBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shl'Bv8'(src1, src2)
}

procedure {:inline 1} $ShlBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2);
}

function $shrBv8From8(src1: bv8, src2: bv8) returns (bv8)
{
    $Shr'Bv8'(src1, src2)
}

procedure {:inline 1} $ShrBv8From8(src1: bv8, src2: bv8) returns (dst: bv8)
{
    if ($Ge'Bv8'(src2, 8bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2);
}

procedure {:inline 1} $CastBv16to8(src: bv16) returns (dst: bv8)
{
    if ($Gt'Bv16'(src, 255bv16)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From16(src1: bv8, src2: bv16) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From16(src1: bv8, src2: bv16) returns (dst: bv8)
{
    if ($Ge'Bv16'(src2, 8bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv32to8(src: bv32) returns (dst: bv8)
{
    if ($Gt'Bv32'(src, 255bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From32(src1: bv8, src2: bv32) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From32(src1: bv8, src2: bv32) returns (dst: bv8)
{
    if ($Ge'Bv32'(src2, 8bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv64to8(src: bv64) returns (dst: bv8)
{
    if ($Gt'Bv64'(src, 255bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From64(src1: bv8, src2: bv64) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From64(src1: bv8, src2: bv64) returns (dst: bv8)
{
    if ($Ge'Bv64'(src2, 8bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv128to8(src: bv128) returns (dst: bv8)
{
    if ($Gt'Bv128'(src, 255bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From128(src1: bv8, src2: bv128) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From128(src1: bv8, src2: bv128) returns (dst: bv8)
{
    if ($Ge'Bv128'(src2, 8bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv256to8(src: bv256) returns (dst: bv8)
{
    if ($Gt'Bv256'(src, 255bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[8:0];
}


function $shlBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shl'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShlBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv8'(src1, src2[8:0]);
}

function $shrBv8From256(src1: bv8, src2: bv256) returns (bv8)
{
    $Shr'Bv8'(src1, src2[8:0])
}

procedure {:inline 1} $ShrBv8From256(src1: bv8, src2: bv256) returns (dst: bv8)
{
    if ($Ge'Bv256'(src2, 8bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv8'(src1, src2[8:0]);
}

procedure {:inline 1} $CastBv8to16(src: bv8) returns (dst: bv16)
{
    dst := 0bv8 ++ src;
}


function $shlBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shl'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShlBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, 0bv8 ++ src2);
}

function $shrBv16From8(src1: bv16, src2: bv8) returns (bv16)
{
    $Shr'Bv16'(src1, 0bv8 ++ src2)
}

procedure {:inline 1} $ShrBv16From8(src1: bv16, src2: bv8) returns (dst: bv16)
{
    if ($Ge'Bv8'(src2, 16bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, 0bv8 ++ src2);
}

procedure {:inline 1} $CastBv16to16(src: bv16) returns (dst: bv16)
{
    dst := src;
}


function $shlBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shl'Bv16'(src1, src2)
}

procedure {:inline 1} $ShlBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2);
}

function $shrBv16From16(src1: bv16, src2: bv16) returns (bv16)
{
    $Shr'Bv16'(src1, src2)
}

procedure {:inline 1} $ShrBv16From16(src1: bv16, src2: bv16) returns (dst: bv16)
{
    if ($Ge'Bv16'(src2, 16bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2);
}

procedure {:inline 1} $CastBv32to16(src: bv32) returns (dst: bv16)
{
    if ($Gt'Bv32'(src, 65535bv32)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From32(src1: bv16, src2: bv32) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From32(src1: bv16, src2: bv32) returns (dst: bv16)
{
    if ($Ge'Bv32'(src2, 16bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv64to16(src: bv64) returns (dst: bv16)
{
    if ($Gt'Bv64'(src, 65535bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From64(src1: bv16, src2: bv64) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From64(src1: bv16, src2: bv64) returns (dst: bv16)
{
    if ($Ge'Bv64'(src2, 16bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv128to16(src: bv128) returns (dst: bv16)
{
    if ($Gt'Bv128'(src, 65535bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From128(src1: bv16, src2: bv128) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From128(src1: bv16, src2: bv128) returns (dst: bv16)
{
    if ($Ge'Bv128'(src2, 16bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv256to16(src: bv256) returns (dst: bv16)
{
    if ($Gt'Bv256'(src, 65535bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[16:0];
}


function $shlBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shl'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShlBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv16'(src1, src2[16:0]);
}

function $shrBv16From256(src1: bv16, src2: bv256) returns (bv16)
{
    $Shr'Bv16'(src1, src2[16:0])
}

procedure {:inline 1} $ShrBv16From256(src1: bv16, src2: bv256) returns (dst: bv16)
{
    if ($Ge'Bv256'(src2, 16bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv16'(src1, src2[16:0]);
}

procedure {:inline 1} $CastBv8to32(src: bv8) returns (dst: bv32)
{
    dst := 0bv24 ++ src;
}


function $shlBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShlBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, 0bv24 ++ src2);
}

function $shrBv32From8(src1: bv32, src2: bv8) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv24 ++ src2)
}

procedure {:inline 1} $ShrBv32From8(src1: bv32, src2: bv8) returns (dst: bv32)
{
    if ($Ge'Bv8'(src2, 32bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, 0bv24 ++ src2);
}

procedure {:inline 1} $CastBv16to32(src: bv16) returns (dst: bv32)
{
    dst := 0bv16 ++ src;
}


function $shlBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shl'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShlBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, 0bv16 ++ src2);
}

function $shrBv32From16(src1: bv32, src2: bv16) returns (bv32)
{
    $Shr'Bv32'(src1, 0bv16 ++ src2)
}

procedure {:inline 1} $ShrBv32From16(src1: bv32, src2: bv16) returns (dst: bv32)
{
    if ($Ge'Bv16'(src2, 32bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, 0bv16 ++ src2);
}

procedure {:inline 1} $CastBv32to32(src: bv32) returns (dst: bv32)
{
    dst := src;
}


function $shlBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shl'Bv32'(src1, src2)
}

procedure {:inline 1} $ShlBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2);
}

function $shrBv32From32(src1: bv32, src2: bv32) returns (bv32)
{
    $Shr'Bv32'(src1, src2)
}

procedure {:inline 1} $ShrBv32From32(src1: bv32, src2: bv32) returns (dst: bv32)
{
    if ($Ge'Bv32'(src2, 32bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2);
}

procedure {:inline 1} $CastBv64to32(src: bv64) returns (dst: bv32)
{
    if ($Gt'Bv64'(src, 2147483647bv64)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From64(src1: bv32, src2: bv64) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From64(src1: bv32, src2: bv64) returns (dst: bv32)
{
    if ($Ge'Bv64'(src2, 32bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv128to32(src: bv128) returns (dst: bv32)
{
    if ($Gt'Bv128'(src, 2147483647bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From128(src1: bv32, src2: bv128) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From128(src1: bv32, src2: bv128) returns (dst: bv32)
{
    if ($Ge'Bv128'(src2, 32bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv256to32(src: bv256) returns (dst: bv32)
{
    if ($Gt'Bv256'(src, 2147483647bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[32:0];
}


function $shlBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shl'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShlBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv32'(src1, src2[32:0]);
}

function $shrBv32From256(src1: bv32, src2: bv256) returns (bv32)
{
    $Shr'Bv32'(src1, src2[32:0])
}

procedure {:inline 1} $ShrBv32From256(src1: bv32, src2: bv256) returns (dst: bv32)
{
    if ($Ge'Bv256'(src2, 32bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv32'(src1, src2[32:0]);
}

procedure {:inline 1} $CastBv8to64(src: bv8) returns (dst: bv64)
{
    dst := 0bv56 ++ src;
}


function $shlBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShlBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv56 ++ src2);
}

function $shrBv64From8(src1: bv64, src2: bv8) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv56 ++ src2)
}

procedure {:inline 1} $ShrBv64From8(src1: bv64, src2: bv8) returns (dst: bv64)
{
    if ($Ge'Bv8'(src2, 64bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv56 ++ src2);
}

procedure {:inline 1} $CastBv16to64(src: bv16) returns (dst: bv64)
{
    dst := 0bv48 ++ src;
}


function $shlBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShlBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv48 ++ src2);
}

function $shrBv64From16(src1: bv64, src2: bv16) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv48 ++ src2)
}

procedure {:inline 1} $ShrBv64From16(src1: bv64, src2: bv16) returns (dst: bv64)
{
    if ($Ge'Bv16'(src2, 64bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv48 ++ src2);
}

procedure {:inline 1} $CastBv32to64(src: bv32) returns (dst: bv64)
{
    dst := 0bv32 ++ src;
}


function $shlBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shl'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShlBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, 0bv32 ++ src2);
}

function $shrBv64From32(src1: bv64, src2: bv32) returns (bv64)
{
    $Shr'Bv64'(src1, 0bv32 ++ src2)
}

procedure {:inline 1} $ShrBv64From32(src1: bv64, src2: bv32) returns (dst: bv64)
{
    if ($Ge'Bv32'(src2, 64bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, 0bv32 ++ src2);
}

procedure {:inline 1} $CastBv64to64(src: bv64) returns (dst: bv64)
{
    dst := src;
}


function $shlBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shl'Bv64'(src1, src2)
}

procedure {:inline 1} $ShlBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2);
}

function $shrBv64From64(src1: bv64, src2: bv64) returns (bv64)
{
    $Shr'Bv64'(src1, src2)
}

procedure {:inline 1} $ShrBv64From64(src1: bv64, src2: bv64) returns (dst: bv64)
{
    if ($Ge'Bv64'(src2, 64bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2);
}

procedure {:inline 1} $CastBv128to64(src: bv128) returns (dst: bv64)
{
    if ($Gt'Bv128'(src, 18446744073709551615bv128)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $shlBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From128(src1: bv64, src2: bv128) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From128(src1: bv64, src2: bv128) returns (dst: bv64)
{
    if ($Ge'Bv128'(src2, 64bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv256to64(src: bv256) returns (dst: bv64)
{
    if ($Gt'Bv256'(src, 18446744073709551615bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[64:0];
}


function $shlBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shl'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShlBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv64'(src1, src2[64:0]);
}

function $shrBv64From256(src1: bv64, src2: bv256) returns (bv64)
{
    $Shr'Bv64'(src1, src2[64:0])
}

procedure {:inline 1} $ShrBv64From256(src1: bv64, src2: bv256) returns (dst: bv64)
{
    if ($Ge'Bv256'(src2, 64bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv64'(src1, src2[64:0]);
}

procedure {:inline 1} $CastBv8to128(src: bv8) returns (dst: bv128)
{
    dst := 0bv120 ++ src;
}


function $shlBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShlBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv120 ++ src2);
}

function $shrBv128From8(src1: bv128, src2: bv8) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv120 ++ src2)
}

procedure {:inline 1} $ShrBv128From8(src1: bv128, src2: bv8) returns (dst: bv128)
{
    if ($Ge'Bv8'(src2, 128bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv120 ++ src2);
}

procedure {:inline 1} $CastBv16to128(src: bv16) returns (dst: bv128)
{
    dst := 0bv112 ++ src;
}


function $shlBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShlBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv112 ++ src2);
}

function $shrBv128From16(src1: bv128, src2: bv16) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv112 ++ src2)
}

procedure {:inline 1} $ShrBv128From16(src1: bv128, src2: bv16) returns (dst: bv128)
{
    if ($Ge'Bv16'(src2, 128bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv112 ++ src2);
}

procedure {:inline 1} $CastBv32to128(src: bv32) returns (dst: bv128)
{
    dst := 0bv96 ++ src;
}


function $shlBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShlBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv96 ++ src2);
}

function $shrBv128From32(src1: bv128, src2: bv32) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv96 ++ src2)
}

procedure {:inline 1} $ShrBv128From32(src1: bv128, src2: bv32) returns (dst: bv128)
{
    if ($Ge'Bv32'(src2, 128bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv96 ++ src2);
}

procedure {:inline 1} $CastBv64to128(src: bv64) returns (dst: bv128)
{
    dst := 0bv64 ++ src;
}


function $shlBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shl'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShlBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, 0bv64 ++ src2);
}

function $shrBv128From64(src1: bv128, src2: bv64) returns (bv128)
{
    $Shr'Bv128'(src1, 0bv64 ++ src2)
}

procedure {:inline 1} $ShrBv128From64(src1: bv128, src2: bv64) returns (dst: bv128)
{
    if ($Ge'Bv64'(src2, 128bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, 0bv64 ++ src2);
}

procedure {:inline 1} $CastBv128to128(src: bv128) returns (dst: bv128)
{
    dst := src;
}


function $shlBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shl'Bv128'(src1, src2)
}

procedure {:inline 1} $ShlBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, src2);
}

function $shrBv128From128(src1: bv128, src2: bv128) returns (bv128)
{
    $Shr'Bv128'(src1, src2)
}

procedure {:inline 1} $ShrBv128From128(src1: bv128, src2: bv128) returns (dst: bv128)
{
    if ($Ge'Bv128'(src2, 128bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, src2);
}

procedure {:inline 1} $CastBv256to128(src: bv256) returns (dst: bv128)
{
    if ($Gt'Bv256'(src, 340282366920938463463374607431768211455bv256)) {
            call $ExecFailureAbort();
            return;
    }
    dst := src[128:0];
}


function $shlBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shl'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShlBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv128'(src1, src2[128:0]);
}

function $shrBv128From256(src1: bv128, src2: bv256) returns (bv128)
{
    $Shr'Bv128'(src1, src2[128:0])
}

procedure {:inline 1} $ShrBv128From256(src1: bv128, src2: bv256) returns (dst: bv128)
{
    if ($Ge'Bv256'(src2, 128bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv128'(src1, src2[128:0]);
}

procedure {:inline 1} $CastBv8to256(src: bv8) returns (dst: bv256)
{
    dst := 0bv248 ++ src;
}


function $shlBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShlBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    if ($Ge'Bv8'(src2, 256bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv248 ++ src2);
}

function $shrBv256From8(src1: bv256, src2: bv8) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv248 ++ src2)
}

procedure {:inline 1} $ShrBv256From8(src1: bv256, src2: bv8) returns (dst: bv256)
{
    if ($Ge'Bv8'(src2, 256bv8)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv248 ++ src2);
}

procedure {:inline 1} $CastBv16to256(src: bv16) returns (dst: bv256)
{
    dst := 0bv240 ++ src;
}


function $shlBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShlBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv240 ++ src2);
}

function $shrBv256From16(src1: bv256, src2: bv16) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv240 ++ src2)
}

procedure {:inline 1} $ShrBv256From16(src1: bv256, src2: bv16) returns (dst: bv256)
{
    if ($Ge'Bv16'(src2, 256bv16)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv240 ++ src2);
}

procedure {:inline 1} $CastBv32to256(src: bv32) returns (dst: bv256)
{
    dst := 0bv224 ++ src;
}


function $shlBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShlBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv224 ++ src2);
}

function $shrBv256From32(src1: bv256, src2: bv32) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv224 ++ src2)
}

procedure {:inline 1} $ShrBv256From32(src1: bv256, src2: bv32) returns (dst: bv256)
{
    if ($Ge'Bv32'(src2, 256bv32)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv224 ++ src2);
}

procedure {:inline 1} $CastBv64to256(src: bv64) returns (dst: bv256)
{
    dst := 0bv192 ++ src;
}


function $shlBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShlBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv192 ++ src2);
}

function $shrBv256From64(src1: bv256, src2: bv64) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv192 ++ src2)
}

procedure {:inline 1} $ShrBv256From64(src1: bv256, src2: bv64) returns (dst: bv256)
{
    if ($Ge'Bv64'(src2, 256bv64)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv192 ++ src2);
}

procedure {:inline 1} $CastBv128to256(src: bv128) returns (dst: bv256)
{
    dst := 0bv128 ++ src;
}


function $shlBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shl'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShlBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, 0bv128 ++ src2);
}

function $shrBv256From128(src1: bv256, src2: bv128) returns (bv256)
{
    $Shr'Bv256'(src1, 0bv128 ++ src2)
}

procedure {:inline 1} $ShrBv256From128(src1: bv256, src2: bv128) returns (dst: bv256)
{
    if ($Ge'Bv128'(src2, 256bv128)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, 0bv128 ++ src2);
}

procedure {:inline 1} $CastBv256to256(src: bv256) returns (dst: bv256)
{
    dst := src;
}


function $shlBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shl'Bv256'(src1, src2)
}

procedure {:inline 1} $ShlBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shl'Bv256'(src1, src2);
}

function $shrBv256From256(src1: bv256, src2: bv256) returns (bv256)
{
    $Shr'Bv256'(src1, src2)
}

procedure {:inline 1} $ShrBv256From256(src1: bv256, src2: bv256) returns (dst: bv256)
{
    if ($Ge'Bv256'(src2, 256bv256)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Shr'Bv256'(src1, src2);
}

procedure {:inline 1} $ShlU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU16(src1, src2);
}

procedure {:inline 1} $ShlU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU32(src1, src2);
}

procedure {:inline 1} $ShlU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
       call $ExecFailureAbort();
       return;
    }
    dst := $shlU64(src1, src2);
}

procedure {:inline 1} $ShlU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shlU128(src1, src2);
}

procedure {:inline 1} $ShlU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shlU256(src1, src2);
}

procedure {:inline 1} $Shr(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU8(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 8) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU16(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 16) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU32(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 32) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU64(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 64) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU128(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    if (src2 >= 128) {
        call $ExecFailureAbort();
        return;
    }
    dst := $shr(src1, src2);
}

procedure {:inline 1} $ShrU256(src1: int, src2: int) returns (dst: int)
{
    var res: int;
    // src2 is a u8
    assume src2 >= 0 && src2 < 256;
    dst := $shr(src1, src2);
}

procedure {:inline 1} $MulU8(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U8) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU16(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U16) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU32(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U32) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU64(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U64) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU128(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U128) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $MulU256(src1: int, src2: int) returns (dst: int)
{
    if (src1 * src2 > $MAX_U256) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 * src2;
}

procedure {:inline 1} $Div(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 div src2;
}

procedure {:inline 1} $Mod(src1: int, src2: int) returns (dst: int)
{
    if (src2 == 0) {
        call $ExecFailureAbort();
        return;
    }
    dst := src1 mod src2;
}

procedure {:inline 1} $ArithBinaryUnimplemented(src1: int, src2: int) returns (dst: int);

procedure {:inline 1} $Lt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 < src2;
}

procedure {:inline 1} $Gt(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 > src2;
}

procedure {:inline 1} $Le(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 <= src2;
}

procedure {:inline 1} $Ge(src1: int, src2: int) returns (dst: bool)
{
    dst := src1 >= src2;
}

procedure {:inline 1} $And(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 && src2;
}

procedure {:inline 1} $Or(src1: bool, src2: bool) returns (dst: bool)
{
    dst := src1 || src2;
}

procedure {:inline 1} $Not(src: bool) returns (dst: bool)
{
    dst := !src;
}

// Pack and Unpack are auto-generated for each type T


// ==================================================================================
// Native Vector

function {:inline} $SliceVecByRange<T>(v: Vec T, r: $Range): Vec T {
    SliceVec(v, r->lb, r->ub)
}

// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `#0`

// Not inlined. It appears faster this way.
function $IsEqual'vec'#0''(v1: Vec (#0), v2: Vec (#0)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'#0'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'#0''(v: Vec (#0), prefix: Vec (#0)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'#0'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'#0''(v: Vec (#0), suffix: Vec (#0)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'#0'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'#0''(v: Vec (#0)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'#0'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'#0'(v: Vec (#0), e: #0): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e))
}

function $IndexOfVec'#0'(v: Vec (#0), e: #0): int;
axiom (forall v: Vec (#0), e: #0:: {$IndexOfVec'#0'(v, e)}
    (var i := $IndexOfVec'#0'(v, e);
     if (!$ContainsVec'#0'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'#0'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'#0'(ReadVec(v, j), e))));


function {:inline} $RangeVec'#0'(v: Vec (#0)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'#0'() returns (v: Vec (#0)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'#0'(): Vec (#0) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'#0'(v: Vec (#0)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'#0'(m: $Mutation (Vec (#0)), val: #0) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'#0'(v: Vec (#0), val: #0): Vec (#0) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'#0'(m: $Mutation (Vec (#0))) returns (e: #0, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'#0'(m: $Mutation (Vec (#0))) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'#0'(m: $Mutation (Vec (#0)), other: Vec (#0)) returns (m': $Mutation (Vec (#0))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'#0'(m: $Mutation (Vec (#0)), new_len: int) returns (v: (Vec (#0)), m': $Mutation (Vec (#0))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'#0'(m: $Mutation (Vec (#0)), new_len: int) returns (v: (Vec (#0)), m': $Mutation (Vec (#0))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'#0'(m: $Mutation (Vec (#0)), left: int, right: int) returns (m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var mid_vec: Vec (#0);
    var right_vec: Vec (#0);
    var v: Vec (#0);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'#0'(m: $Mutation (Vec (#0)), rot: int) returns (n: int, m': $Mutation (Vec (#0))) {
    var v: Vec (#0);
    var len: int;
    var left_vec: Vec (#0);
    var right_vec: Vec (#0);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'#0'(m: $Mutation (Vec (#0)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var mid_vec: Vec (#0);
    var right_vec: Vec (#0);
    var mid_left_vec: Vec (#0);
    var mid_right_vec: Vec (#0);
    var v: Vec (#0);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'#0'(m: $Mutation (Vec (#0)), i: int, e: #0) returns (m': $Mutation (Vec (#0))) {
    var left_vec: Vec (#0);
    var right_vec: Vec (#0);
    var v: Vec (#0);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'#0'(v: Vec (#0)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'#0'(v: Vec (#0)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'#0'(v: Vec (#0), i: int) returns (dst: #0) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'#0'(m: $Mutation (Vec (#0)), index: int)
returns (dst: $Mutation (#0), m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'#0'(v: Vec (#0), i: int): #0 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'#0'(v: Vec (#0)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'#0'(m: $Mutation (Vec (#0)), i: int, j: int) returns (m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'#0'(v: Vec (#0), i: int, j: int): Vec (#0) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var v: Vec (#0);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'#0'(m: $Mutation (Vec (#0)), i: int) returns (e: #0, m': $Mutation (Vec (#0)))
{
    var len: int;
    var v: Vec (#0);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'#0'(v: Vec (#0), e: #0) returns (res: bool)  {
    res := $ContainsVec'#0'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'#0'(v: Vec (#0), e: #0) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'#0'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_aggregator_Aggregator`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_aggregator_Aggregator''(v1: Vec ($1_aggregator_Aggregator), v2: Vec ($1_aggregator_Aggregator)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_aggregator_Aggregator'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_aggregator_Aggregator''(v: Vec ($1_aggregator_Aggregator), prefix: Vec ($1_aggregator_Aggregator)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_aggregator_Aggregator'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_aggregator_Aggregator''(v: Vec ($1_aggregator_Aggregator), suffix: Vec ($1_aggregator_Aggregator)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_aggregator_Aggregator'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_aggregator_Aggregator''(v: Vec ($1_aggregator_Aggregator)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_aggregator_Aggregator'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_aggregator_Aggregator'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator): int;
axiom (forall v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator:: {$IndexOfVec'$1_aggregator_Aggregator'(v, e)}
    (var i := $IndexOfVec'$1_aggregator_Aggregator'(v, e);
     if (!$ContainsVec'$1_aggregator_Aggregator'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_aggregator_Aggregator'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_aggregator_Aggregator'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_aggregator_Aggregator'(): Vec ($1_aggregator_Aggregator) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_aggregator_Aggregator'() returns (v: Vec ($1_aggregator_Aggregator)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_aggregator_Aggregator'(): Vec ($1_aggregator_Aggregator) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), val: $1_aggregator_Aggregator) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), val: $1_aggregator_Aggregator): Vec ($1_aggregator_Aggregator) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator))) returns (e: $1_aggregator_Aggregator, m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var v: Vec ($1_aggregator_Aggregator);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), other: Vec ($1_aggregator_Aggregator)) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator))) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), other: Vec ($1_aggregator_Aggregator)) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), new_len: int) returns (v: (Vec ($1_aggregator_Aggregator)), m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), new_len: int) returns (v: (Vec ($1_aggregator_Aggregator)), m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), left: int, right: int) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var left_vec: Vec ($1_aggregator_Aggregator);
    var mid_vec: Vec ($1_aggregator_Aggregator);
    var right_vec: Vec ($1_aggregator_Aggregator);
    var v: Vec ($1_aggregator_Aggregator);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), rot: int) returns (n: int, m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var v: Vec ($1_aggregator_Aggregator);
    var len: int;
    var left_vec: Vec ($1_aggregator_Aggregator);
    var right_vec: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var left_vec: Vec ($1_aggregator_Aggregator);
    var mid_vec: Vec ($1_aggregator_Aggregator);
    var right_vec: Vec ($1_aggregator_Aggregator);
    var mid_left_vec: Vec ($1_aggregator_Aggregator);
    var mid_right_vec: Vec ($1_aggregator_Aggregator);
    var v: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), i: int, e: $1_aggregator_Aggregator) returns (m': $Mutation (Vec ($1_aggregator_Aggregator))) {
    var left_vec: Vec ($1_aggregator_Aggregator);
    var right_vec: Vec ($1_aggregator_Aggregator);
    var v: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), i: int) returns (dst: $1_aggregator_Aggregator) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), i: int): $1_aggregator_Aggregator {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), index: int)
returns (dst: $Mutation ($1_aggregator_Aggregator), m': $Mutation (Vec ($1_aggregator_Aggregator)))
{
    var v: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), i: int): $1_aggregator_Aggregator {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), i: int, j: int) returns (m': $Mutation (Vec ($1_aggregator_Aggregator)))
{
    var v: Vec ($1_aggregator_Aggregator);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), i: int, j: int): Vec ($1_aggregator_Aggregator) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), i: int) returns (e: $1_aggregator_Aggregator, m': $Mutation (Vec ($1_aggregator_Aggregator)))
{
    var v: Vec ($1_aggregator_Aggregator);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_aggregator_Aggregator'(m: $Mutation (Vec ($1_aggregator_Aggregator)), i: int) returns (e: $1_aggregator_Aggregator, m': $Mutation (Vec ($1_aggregator_Aggregator)))
{
    var len: int;
    var v: Vec ($1_aggregator_Aggregator);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator) returns (res: bool)  {
    res := $ContainsVec'$1_aggregator_Aggregator'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator), e: $1_aggregator_Aggregator) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_aggregator_Aggregator'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_aptos_coin_AptosCoin`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_aptos_coin_AptosCoin''(v1: Vec ($1_aptos_coin_AptosCoin), v2: Vec ($1_aptos_coin_AptosCoin)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_aptos_coin_AptosCoin'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_aptos_coin_AptosCoin''(v: Vec ($1_aptos_coin_AptosCoin), prefix: Vec ($1_aptos_coin_AptosCoin)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_aptos_coin_AptosCoin'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_aptos_coin_AptosCoin''(v: Vec ($1_aptos_coin_AptosCoin), suffix: Vec ($1_aptos_coin_AptosCoin)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_aptos_coin_AptosCoin'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_aptos_coin_AptosCoin''(v: Vec ($1_aptos_coin_AptosCoin)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_aptos_coin_AptosCoin'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_aptos_coin_AptosCoin'(v: Vec ($1_aptos_coin_AptosCoin), e: $1_aptos_coin_AptosCoin): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_aptos_coin_AptosCoin'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_aptos_coin_AptosCoin'(v: Vec ($1_aptos_coin_AptosCoin), e: $1_aptos_coin_AptosCoin): int;
axiom (forall v: Vec ($1_aptos_coin_AptosCoin), e: $1_aptos_coin_AptosCoin:: {$IndexOfVec'$1_aptos_coin_AptosCoin'(v, e)}
    (var i := $IndexOfVec'$1_aptos_coin_AptosCoin'(v, e);
     if (!$ContainsVec'$1_aptos_coin_AptosCoin'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_aptos_coin_AptosCoin'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_aptos_coin_AptosCoin'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_aptos_coin_AptosCoin'(v: Vec ($1_aptos_coin_AptosCoin)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_aptos_coin_AptosCoin'(): Vec ($1_aptos_coin_AptosCoin) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_aptos_coin_AptosCoin'() returns (v: Vec ($1_aptos_coin_AptosCoin)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_aptos_coin_AptosCoin'(): Vec ($1_aptos_coin_AptosCoin) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_aptos_coin_AptosCoin'(v: Vec ($1_aptos_coin_AptosCoin)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin)), val: $1_aptos_coin_AptosCoin) returns (m': $Mutation (Vec ($1_aptos_coin_AptosCoin))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_aptos_coin_AptosCoin'(v: Vec ($1_aptos_coin_AptosCoin), val: $1_aptos_coin_AptosCoin): Vec ($1_aptos_coin_AptosCoin) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin))) returns (e: $1_aptos_coin_AptosCoin, m': $Mutation (Vec ($1_aptos_coin_AptosCoin))) {
    var v: Vec ($1_aptos_coin_AptosCoin);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin)), other: Vec ($1_aptos_coin_AptosCoin)) returns (m': $Mutation (Vec ($1_aptos_coin_AptosCoin))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin))) returns (m': $Mutation (Vec ($1_aptos_coin_AptosCoin))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin)), other: Vec ($1_aptos_coin_AptosCoin)) returns (m': $Mutation (Vec ($1_aptos_coin_AptosCoin))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin)), new_len: int) returns (v: (Vec ($1_aptos_coin_AptosCoin)), m': $Mutation (Vec ($1_aptos_coin_AptosCoin))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin)), new_len: int) returns (v: (Vec ($1_aptos_coin_AptosCoin)), m': $Mutation (Vec ($1_aptos_coin_AptosCoin))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin)), left: int, right: int) returns (m': $Mutation (Vec ($1_aptos_coin_AptosCoin))) {
    var left_vec: Vec ($1_aptos_coin_AptosCoin);
    var mid_vec: Vec ($1_aptos_coin_AptosCoin);
    var right_vec: Vec ($1_aptos_coin_AptosCoin);
    var v: Vec ($1_aptos_coin_AptosCoin);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin)), rot: int) returns (n: int, m': $Mutation (Vec ($1_aptos_coin_AptosCoin))) {
    var v: Vec ($1_aptos_coin_AptosCoin);
    var len: int;
    var left_vec: Vec ($1_aptos_coin_AptosCoin);
    var right_vec: Vec ($1_aptos_coin_AptosCoin);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_aptos_coin_AptosCoin))) {
    var left_vec: Vec ($1_aptos_coin_AptosCoin);
    var mid_vec: Vec ($1_aptos_coin_AptosCoin);
    var right_vec: Vec ($1_aptos_coin_AptosCoin);
    var mid_left_vec: Vec ($1_aptos_coin_AptosCoin);
    var mid_right_vec: Vec ($1_aptos_coin_AptosCoin);
    var v: Vec ($1_aptos_coin_AptosCoin);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin)), i: int, e: $1_aptos_coin_AptosCoin) returns (m': $Mutation (Vec ($1_aptos_coin_AptosCoin))) {
    var left_vec: Vec ($1_aptos_coin_AptosCoin);
    var right_vec: Vec ($1_aptos_coin_AptosCoin);
    var v: Vec ($1_aptos_coin_AptosCoin);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_aptos_coin_AptosCoin'(v: Vec ($1_aptos_coin_AptosCoin)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_aptos_coin_AptosCoin'(v: Vec ($1_aptos_coin_AptosCoin)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_aptos_coin_AptosCoin'(v: Vec ($1_aptos_coin_AptosCoin), i: int) returns (dst: $1_aptos_coin_AptosCoin) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_aptos_coin_AptosCoin'(v: Vec ($1_aptos_coin_AptosCoin), i: int): $1_aptos_coin_AptosCoin {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin)), index: int)
returns (dst: $Mutation ($1_aptos_coin_AptosCoin), m': $Mutation (Vec ($1_aptos_coin_AptosCoin)))
{
    var v: Vec ($1_aptos_coin_AptosCoin);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_aptos_coin_AptosCoin'(v: Vec ($1_aptos_coin_AptosCoin), i: int): $1_aptos_coin_AptosCoin {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_aptos_coin_AptosCoin'(v: Vec ($1_aptos_coin_AptosCoin)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin)), i: int, j: int) returns (m': $Mutation (Vec ($1_aptos_coin_AptosCoin)))
{
    var v: Vec ($1_aptos_coin_AptosCoin);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_aptos_coin_AptosCoin'(v: Vec ($1_aptos_coin_AptosCoin), i: int, j: int): Vec ($1_aptos_coin_AptosCoin) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin)), i: int) returns (e: $1_aptos_coin_AptosCoin, m': $Mutation (Vec ($1_aptos_coin_AptosCoin)))
{
    var v: Vec ($1_aptos_coin_AptosCoin);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_aptos_coin_AptosCoin'(m: $Mutation (Vec ($1_aptos_coin_AptosCoin)), i: int) returns (e: $1_aptos_coin_AptosCoin, m': $Mutation (Vec ($1_aptos_coin_AptosCoin)))
{
    var len: int;
    var v: Vec ($1_aptos_coin_AptosCoin);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_aptos_coin_AptosCoin'(v: Vec ($1_aptos_coin_AptosCoin), e: $1_aptos_coin_AptosCoin) returns (res: bool)  {
    res := $ContainsVec'$1_aptos_coin_AptosCoin'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_aptos_coin_AptosCoin'(v: Vec ($1_aptos_coin_AptosCoin), e: $1_aptos_coin_AptosCoin) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_aptos_coin_AptosCoin'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_function_info_FunctionInfo`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_function_info_FunctionInfo''(v1: Vec ($1_function_info_FunctionInfo), v2: Vec ($1_function_info_FunctionInfo)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_function_info_FunctionInfo'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_function_info_FunctionInfo''(v: Vec ($1_function_info_FunctionInfo), prefix: Vec ($1_function_info_FunctionInfo)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_function_info_FunctionInfo'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_function_info_FunctionInfo''(v: Vec ($1_function_info_FunctionInfo), suffix: Vec ($1_function_info_FunctionInfo)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_function_info_FunctionInfo'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_function_info_FunctionInfo''(v: Vec ($1_function_info_FunctionInfo)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_function_info_FunctionInfo'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), e: $1_function_info_FunctionInfo): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_function_info_FunctionInfo'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), e: $1_function_info_FunctionInfo): int;
axiom (forall v: Vec ($1_function_info_FunctionInfo), e: $1_function_info_FunctionInfo:: {$IndexOfVec'$1_function_info_FunctionInfo'(v, e)}
    (var i := $IndexOfVec'$1_function_info_FunctionInfo'(v, e);
     if (!$ContainsVec'$1_function_info_FunctionInfo'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_function_info_FunctionInfo'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_function_info_FunctionInfo'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_function_info_FunctionInfo'(): Vec ($1_function_info_FunctionInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_function_info_FunctionInfo'() returns (v: Vec ($1_function_info_FunctionInfo)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_function_info_FunctionInfo'(): Vec ($1_function_info_FunctionInfo) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), val: $1_function_info_FunctionInfo) returns (m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), val: $1_function_info_FunctionInfo): Vec ($1_function_info_FunctionInfo) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo))) returns (e: $1_function_info_FunctionInfo, m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    var v: Vec ($1_function_info_FunctionInfo);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), other: Vec ($1_function_info_FunctionInfo)) returns (m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo))) returns (m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), other: Vec ($1_function_info_FunctionInfo)) returns (m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), new_len: int) returns (v: (Vec ($1_function_info_FunctionInfo)), m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), new_len: int) returns (v: (Vec ($1_function_info_FunctionInfo)), m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), left: int, right: int) returns (m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    var left_vec: Vec ($1_function_info_FunctionInfo);
    var mid_vec: Vec ($1_function_info_FunctionInfo);
    var right_vec: Vec ($1_function_info_FunctionInfo);
    var v: Vec ($1_function_info_FunctionInfo);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), rot: int) returns (n: int, m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    var v: Vec ($1_function_info_FunctionInfo);
    var len: int;
    var left_vec: Vec ($1_function_info_FunctionInfo);
    var right_vec: Vec ($1_function_info_FunctionInfo);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    var left_vec: Vec ($1_function_info_FunctionInfo);
    var mid_vec: Vec ($1_function_info_FunctionInfo);
    var right_vec: Vec ($1_function_info_FunctionInfo);
    var mid_left_vec: Vec ($1_function_info_FunctionInfo);
    var mid_right_vec: Vec ($1_function_info_FunctionInfo);
    var v: Vec ($1_function_info_FunctionInfo);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), i: int, e: $1_function_info_FunctionInfo) returns (m': $Mutation (Vec ($1_function_info_FunctionInfo))) {
    var left_vec: Vec ($1_function_info_FunctionInfo);
    var right_vec: Vec ($1_function_info_FunctionInfo);
    var v: Vec ($1_function_info_FunctionInfo);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), i: int) returns (dst: $1_function_info_FunctionInfo) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), i: int): $1_function_info_FunctionInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), index: int)
returns (dst: $Mutation ($1_function_info_FunctionInfo), m': $Mutation (Vec ($1_function_info_FunctionInfo)))
{
    var v: Vec ($1_function_info_FunctionInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), i: int): $1_function_info_FunctionInfo {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), i: int, j: int) returns (m': $Mutation (Vec ($1_function_info_FunctionInfo)))
{
    var v: Vec ($1_function_info_FunctionInfo);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), i: int, j: int): Vec ($1_function_info_FunctionInfo) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), i: int) returns (e: $1_function_info_FunctionInfo, m': $Mutation (Vec ($1_function_info_FunctionInfo)))
{
    var v: Vec ($1_function_info_FunctionInfo);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_function_info_FunctionInfo'(m: $Mutation (Vec ($1_function_info_FunctionInfo)), i: int) returns (e: $1_function_info_FunctionInfo, m': $Mutation (Vec ($1_function_info_FunctionInfo)))
{
    var len: int;
    var v: Vec ($1_function_info_FunctionInfo);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), e: $1_function_info_FunctionInfo) returns (res: bool)  {
    res := $ContainsVec'$1_function_info_FunctionInfo'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo), e: $1_function_info_FunctionInfo) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_function_info_FunctionInfo'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_fungible_asset_BurnRef`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_fungible_asset_BurnRef''(v1: Vec ($1_fungible_asset_BurnRef), v2: Vec ($1_fungible_asset_BurnRef)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_fungible_asset_BurnRef'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_fungible_asset_BurnRef''(v: Vec ($1_fungible_asset_BurnRef), prefix: Vec ($1_fungible_asset_BurnRef)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_fungible_asset_BurnRef'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_fungible_asset_BurnRef''(v: Vec ($1_fungible_asset_BurnRef), suffix: Vec ($1_fungible_asset_BurnRef)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_fungible_asset_BurnRef'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_fungible_asset_BurnRef''(v: Vec ($1_fungible_asset_BurnRef)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_fungible_asset_BurnRef'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef), e: $1_fungible_asset_BurnRef): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_fungible_asset_BurnRef'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef), e: $1_fungible_asset_BurnRef): int;
axiom (forall v: Vec ($1_fungible_asset_BurnRef), e: $1_fungible_asset_BurnRef:: {$IndexOfVec'$1_fungible_asset_BurnRef'(v, e)}
    (var i := $IndexOfVec'$1_fungible_asset_BurnRef'(v, e);
     if (!$ContainsVec'$1_fungible_asset_BurnRef'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_fungible_asset_BurnRef'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_fungible_asset_BurnRef'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_fungible_asset_BurnRef'(): Vec ($1_fungible_asset_BurnRef) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_fungible_asset_BurnRef'() returns (v: Vec ($1_fungible_asset_BurnRef)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_fungible_asset_BurnRef'(): Vec ($1_fungible_asset_BurnRef) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef)), val: $1_fungible_asset_BurnRef) returns (m': $Mutation (Vec ($1_fungible_asset_BurnRef))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef), val: $1_fungible_asset_BurnRef): Vec ($1_fungible_asset_BurnRef) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef))) returns (e: $1_fungible_asset_BurnRef, m': $Mutation (Vec ($1_fungible_asset_BurnRef))) {
    var v: Vec ($1_fungible_asset_BurnRef);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef)), other: Vec ($1_fungible_asset_BurnRef)) returns (m': $Mutation (Vec ($1_fungible_asset_BurnRef))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef))) returns (m': $Mutation (Vec ($1_fungible_asset_BurnRef))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef)), other: Vec ($1_fungible_asset_BurnRef)) returns (m': $Mutation (Vec ($1_fungible_asset_BurnRef))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef)), new_len: int) returns (v: (Vec ($1_fungible_asset_BurnRef)), m': $Mutation (Vec ($1_fungible_asset_BurnRef))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef)), new_len: int) returns (v: (Vec ($1_fungible_asset_BurnRef)), m': $Mutation (Vec ($1_fungible_asset_BurnRef))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef)), left: int, right: int) returns (m': $Mutation (Vec ($1_fungible_asset_BurnRef))) {
    var left_vec: Vec ($1_fungible_asset_BurnRef);
    var mid_vec: Vec ($1_fungible_asset_BurnRef);
    var right_vec: Vec ($1_fungible_asset_BurnRef);
    var v: Vec ($1_fungible_asset_BurnRef);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef)), rot: int) returns (n: int, m': $Mutation (Vec ($1_fungible_asset_BurnRef))) {
    var v: Vec ($1_fungible_asset_BurnRef);
    var len: int;
    var left_vec: Vec ($1_fungible_asset_BurnRef);
    var right_vec: Vec ($1_fungible_asset_BurnRef);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_fungible_asset_BurnRef))) {
    var left_vec: Vec ($1_fungible_asset_BurnRef);
    var mid_vec: Vec ($1_fungible_asset_BurnRef);
    var right_vec: Vec ($1_fungible_asset_BurnRef);
    var mid_left_vec: Vec ($1_fungible_asset_BurnRef);
    var mid_right_vec: Vec ($1_fungible_asset_BurnRef);
    var v: Vec ($1_fungible_asset_BurnRef);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef)), i: int, e: $1_fungible_asset_BurnRef) returns (m': $Mutation (Vec ($1_fungible_asset_BurnRef))) {
    var left_vec: Vec ($1_fungible_asset_BurnRef);
    var right_vec: Vec ($1_fungible_asset_BurnRef);
    var v: Vec ($1_fungible_asset_BurnRef);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef), i: int) returns (dst: $1_fungible_asset_BurnRef) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef), i: int): $1_fungible_asset_BurnRef {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef)), index: int)
returns (dst: $Mutation ($1_fungible_asset_BurnRef), m': $Mutation (Vec ($1_fungible_asset_BurnRef)))
{
    var v: Vec ($1_fungible_asset_BurnRef);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef), i: int): $1_fungible_asset_BurnRef {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef)), i: int, j: int) returns (m': $Mutation (Vec ($1_fungible_asset_BurnRef)))
{
    var v: Vec ($1_fungible_asset_BurnRef);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef), i: int, j: int): Vec ($1_fungible_asset_BurnRef) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef)), i: int) returns (e: $1_fungible_asset_BurnRef, m': $Mutation (Vec ($1_fungible_asset_BurnRef)))
{
    var v: Vec ($1_fungible_asset_BurnRef);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_fungible_asset_BurnRef'(m: $Mutation (Vec ($1_fungible_asset_BurnRef)), i: int) returns (e: $1_fungible_asset_BurnRef, m': $Mutation (Vec ($1_fungible_asset_BurnRef)))
{
    var len: int;
    var v: Vec ($1_fungible_asset_BurnRef);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef), e: $1_fungible_asset_BurnRef) returns (res: bool)  {
    res := $ContainsVec'$1_fungible_asset_BurnRef'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef), e: $1_fungible_asset_BurnRef) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_fungible_asset_BurnRef'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_fungible_asset_FungibleStore`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_fungible_asset_FungibleStore''(v1: Vec ($1_fungible_asset_FungibleStore), v2: Vec ($1_fungible_asset_FungibleStore)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_fungible_asset_FungibleStore'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_fungible_asset_FungibleStore''(v: Vec ($1_fungible_asset_FungibleStore), prefix: Vec ($1_fungible_asset_FungibleStore)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_fungible_asset_FungibleStore'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_fungible_asset_FungibleStore''(v: Vec ($1_fungible_asset_FungibleStore), suffix: Vec ($1_fungible_asset_FungibleStore)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_fungible_asset_FungibleStore'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_fungible_asset_FungibleStore''(v: Vec ($1_fungible_asset_FungibleStore)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_fungible_asset_FungibleStore'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), e: $1_fungible_asset_FungibleStore): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_fungible_asset_FungibleStore'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), e: $1_fungible_asset_FungibleStore): int;
axiom (forall v: Vec ($1_fungible_asset_FungibleStore), e: $1_fungible_asset_FungibleStore:: {$IndexOfVec'$1_fungible_asset_FungibleStore'(v, e)}
    (var i := $IndexOfVec'$1_fungible_asset_FungibleStore'(v, e);
     if (!$ContainsVec'$1_fungible_asset_FungibleStore'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_fungible_asset_FungibleStore'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_fungible_asset_FungibleStore'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_fungible_asset_FungibleStore'(): Vec ($1_fungible_asset_FungibleStore) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_fungible_asset_FungibleStore'() returns (v: Vec ($1_fungible_asset_FungibleStore)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_fungible_asset_FungibleStore'(): Vec ($1_fungible_asset_FungibleStore) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), val: $1_fungible_asset_FungibleStore) returns (m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), val: $1_fungible_asset_FungibleStore): Vec ($1_fungible_asset_FungibleStore) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore))) returns (e: $1_fungible_asset_FungibleStore, m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    var v: Vec ($1_fungible_asset_FungibleStore);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), other: Vec ($1_fungible_asset_FungibleStore)) returns (m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore))) returns (m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), other: Vec ($1_fungible_asset_FungibleStore)) returns (m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), new_len: int) returns (v: (Vec ($1_fungible_asset_FungibleStore)), m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), new_len: int) returns (v: (Vec ($1_fungible_asset_FungibleStore)), m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), left: int, right: int) returns (m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    var left_vec: Vec ($1_fungible_asset_FungibleStore);
    var mid_vec: Vec ($1_fungible_asset_FungibleStore);
    var right_vec: Vec ($1_fungible_asset_FungibleStore);
    var v: Vec ($1_fungible_asset_FungibleStore);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), rot: int) returns (n: int, m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    var v: Vec ($1_fungible_asset_FungibleStore);
    var len: int;
    var left_vec: Vec ($1_fungible_asset_FungibleStore);
    var right_vec: Vec ($1_fungible_asset_FungibleStore);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    var left_vec: Vec ($1_fungible_asset_FungibleStore);
    var mid_vec: Vec ($1_fungible_asset_FungibleStore);
    var right_vec: Vec ($1_fungible_asset_FungibleStore);
    var mid_left_vec: Vec ($1_fungible_asset_FungibleStore);
    var mid_right_vec: Vec ($1_fungible_asset_FungibleStore);
    var v: Vec ($1_fungible_asset_FungibleStore);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), i: int, e: $1_fungible_asset_FungibleStore) returns (m': $Mutation (Vec ($1_fungible_asset_FungibleStore))) {
    var left_vec: Vec ($1_fungible_asset_FungibleStore);
    var right_vec: Vec ($1_fungible_asset_FungibleStore);
    var v: Vec ($1_fungible_asset_FungibleStore);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), i: int) returns (dst: $1_fungible_asset_FungibleStore) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), i: int): $1_fungible_asset_FungibleStore {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), index: int)
returns (dst: $Mutation ($1_fungible_asset_FungibleStore), m': $Mutation (Vec ($1_fungible_asset_FungibleStore)))
{
    var v: Vec ($1_fungible_asset_FungibleStore);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), i: int): $1_fungible_asset_FungibleStore {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), i: int, j: int) returns (m': $Mutation (Vec ($1_fungible_asset_FungibleStore)))
{
    var v: Vec ($1_fungible_asset_FungibleStore);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), i: int, j: int): Vec ($1_fungible_asset_FungibleStore) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), i: int) returns (e: $1_fungible_asset_FungibleStore, m': $Mutation (Vec ($1_fungible_asset_FungibleStore)))
{
    var v: Vec ($1_fungible_asset_FungibleStore);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_fungible_asset_FungibleStore'(m: $Mutation (Vec ($1_fungible_asset_FungibleStore)), i: int) returns (e: $1_fungible_asset_FungibleStore, m': $Mutation (Vec ($1_fungible_asset_FungibleStore)))
{
    var len: int;
    var v: Vec ($1_fungible_asset_FungibleStore);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), e: $1_fungible_asset_FungibleStore) returns (res: bool)  {
    res := $ContainsVec'$1_fungible_asset_FungibleStore'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_fungible_asset_FungibleStore'(v: Vec ($1_fungible_asset_FungibleStore), e: $1_fungible_asset_FungibleStore) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_fungible_asset_FungibleStore'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_fungible_asset_MintRef`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_fungible_asset_MintRef''(v1: Vec ($1_fungible_asset_MintRef), v2: Vec ($1_fungible_asset_MintRef)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_fungible_asset_MintRef'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_fungible_asset_MintRef''(v: Vec ($1_fungible_asset_MintRef), prefix: Vec ($1_fungible_asset_MintRef)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_fungible_asset_MintRef'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_fungible_asset_MintRef''(v: Vec ($1_fungible_asset_MintRef), suffix: Vec ($1_fungible_asset_MintRef)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_fungible_asset_MintRef'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_fungible_asset_MintRef''(v: Vec ($1_fungible_asset_MintRef)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_fungible_asset_MintRef'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_fungible_asset_MintRef'(v: Vec ($1_fungible_asset_MintRef), e: $1_fungible_asset_MintRef): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_fungible_asset_MintRef'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_fungible_asset_MintRef'(v: Vec ($1_fungible_asset_MintRef), e: $1_fungible_asset_MintRef): int;
axiom (forall v: Vec ($1_fungible_asset_MintRef), e: $1_fungible_asset_MintRef:: {$IndexOfVec'$1_fungible_asset_MintRef'(v, e)}
    (var i := $IndexOfVec'$1_fungible_asset_MintRef'(v, e);
     if (!$ContainsVec'$1_fungible_asset_MintRef'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_fungible_asset_MintRef'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_fungible_asset_MintRef'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_fungible_asset_MintRef'(v: Vec ($1_fungible_asset_MintRef)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_fungible_asset_MintRef'(): Vec ($1_fungible_asset_MintRef) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_fungible_asset_MintRef'() returns (v: Vec ($1_fungible_asset_MintRef)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_fungible_asset_MintRef'(): Vec ($1_fungible_asset_MintRef) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_fungible_asset_MintRef'(v: Vec ($1_fungible_asset_MintRef)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef)), val: $1_fungible_asset_MintRef) returns (m': $Mutation (Vec ($1_fungible_asset_MintRef))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_fungible_asset_MintRef'(v: Vec ($1_fungible_asset_MintRef), val: $1_fungible_asset_MintRef): Vec ($1_fungible_asset_MintRef) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef))) returns (e: $1_fungible_asset_MintRef, m': $Mutation (Vec ($1_fungible_asset_MintRef))) {
    var v: Vec ($1_fungible_asset_MintRef);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef)), other: Vec ($1_fungible_asset_MintRef)) returns (m': $Mutation (Vec ($1_fungible_asset_MintRef))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef))) returns (m': $Mutation (Vec ($1_fungible_asset_MintRef))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef)), other: Vec ($1_fungible_asset_MintRef)) returns (m': $Mutation (Vec ($1_fungible_asset_MintRef))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef)), new_len: int) returns (v: (Vec ($1_fungible_asset_MintRef)), m': $Mutation (Vec ($1_fungible_asset_MintRef))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef)), new_len: int) returns (v: (Vec ($1_fungible_asset_MintRef)), m': $Mutation (Vec ($1_fungible_asset_MintRef))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef)), left: int, right: int) returns (m': $Mutation (Vec ($1_fungible_asset_MintRef))) {
    var left_vec: Vec ($1_fungible_asset_MintRef);
    var mid_vec: Vec ($1_fungible_asset_MintRef);
    var right_vec: Vec ($1_fungible_asset_MintRef);
    var v: Vec ($1_fungible_asset_MintRef);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef)), rot: int) returns (n: int, m': $Mutation (Vec ($1_fungible_asset_MintRef))) {
    var v: Vec ($1_fungible_asset_MintRef);
    var len: int;
    var left_vec: Vec ($1_fungible_asset_MintRef);
    var right_vec: Vec ($1_fungible_asset_MintRef);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_fungible_asset_MintRef))) {
    var left_vec: Vec ($1_fungible_asset_MintRef);
    var mid_vec: Vec ($1_fungible_asset_MintRef);
    var right_vec: Vec ($1_fungible_asset_MintRef);
    var mid_left_vec: Vec ($1_fungible_asset_MintRef);
    var mid_right_vec: Vec ($1_fungible_asset_MintRef);
    var v: Vec ($1_fungible_asset_MintRef);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef)), i: int, e: $1_fungible_asset_MintRef) returns (m': $Mutation (Vec ($1_fungible_asset_MintRef))) {
    var left_vec: Vec ($1_fungible_asset_MintRef);
    var right_vec: Vec ($1_fungible_asset_MintRef);
    var v: Vec ($1_fungible_asset_MintRef);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_fungible_asset_MintRef'(v: Vec ($1_fungible_asset_MintRef)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_fungible_asset_MintRef'(v: Vec ($1_fungible_asset_MintRef)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_fungible_asset_MintRef'(v: Vec ($1_fungible_asset_MintRef), i: int) returns (dst: $1_fungible_asset_MintRef) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_fungible_asset_MintRef'(v: Vec ($1_fungible_asset_MintRef), i: int): $1_fungible_asset_MintRef {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef)), index: int)
returns (dst: $Mutation ($1_fungible_asset_MintRef), m': $Mutation (Vec ($1_fungible_asset_MintRef)))
{
    var v: Vec ($1_fungible_asset_MintRef);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_fungible_asset_MintRef'(v: Vec ($1_fungible_asset_MintRef), i: int): $1_fungible_asset_MintRef {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_fungible_asset_MintRef'(v: Vec ($1_fungible_asset_MintRef)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef)), i: int, j: int) returns (m': $Mutation (Vec ($1_fungible_asset_MintRef)))
{
    var v: Vec ($1_fungible_asset_MintRef);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_fungible_asset_MintRef'(v: Vec ($1_fungible_asset_MintRef), i: int, j: int): Vec ($1_fungible_asset_MintRef) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef)), i: int) returns (e: $1_fungible_asset_MintRef, m': $Mutation (Vec ($1_fungible_asset_MintRef)))
{
    var v: Vec ($1_fungible_asset_MintRef);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_fungible_asset_MintRef'(m: $Mutation (Vec ($1_fungible_asset_MintRef)), i: int) returns (e: $1_fungible_asset_MintRef, m': $Mutation (Vec ($1_fungible_asset_MintRef)))
{
    var len: int;
    var v: Vec ($1_fungible_asset_MintRef);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_fungible_asset_MintRef'(v: Vec ($1_fungible_asset_MintRef), e: $1_fungible_asset_MintRef) returns (res: bool)  {
    res := $ContainsVec'$1_fungible_asset_MintRef'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_fungible_asset_MintRef'(v: Vec ($1_fungible_asset_MintRef), e: $1_fungible_asset_MintRef) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_fungible_asset_MintRef'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_fungible_asset_TransferRef`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_fungible_asset_TransferRef''(v1: Vec ($1_fungible_asset_TransferRef), v2: Vec ($1_fungible_asset_TransferRef)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_fungible_asset_TransferRef'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_fungible_asset_TransferRef''(v: Vec ($1_fungible_asset_TransferRef), prefix: Vec ($1_fungible_asset_TransferRef)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_fungible_asset_TransferRef'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_fungible_asset_TransferRef''(v: Vec ($1_fungible_asset_TransferRef), suffix: Vec ($1_fungible_asset_TransferRef)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_fungible_asset_TransferRef'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_fungible_asset_TransferRef''(v: Vec ($1_fungible_asset_TransferRef)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_fungible_asset_TransferRef'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_fungible_asset_TransferRef'(v: Vec ($1_fungible_asset_TransferRef), e: $1_fungible_asset_TransferRef): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_fungible_asset_TransferRef'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_fungible_asset_TransferRef'(v: Vec ($1_fungible_asset_TransferRef), e: $1_fungible_asset_TransferRef): int;
axiom (forall v: Vec ($1_fungible_asset_TransferRef), e: $1_fungible_asset_TransferRef:: {$IndexOfVec'$1_fungible_asset_TransferRef'(v, e)}
    (var i := $IndexOfVec'$1_fungible_asset_TransferRef'(v, e);
     if (!$ContainsVec'$1_fungible_asset_TransferRef'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_fungible_asset_TransferRef'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_fungible_asset_TransferRef'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_fungible_asset_TransferRef'(v: Vec ($1_fungible_asset_TransferRef)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_fungible_asset_TransferRef'(): Vec ($1_fungible_asset_TransferRef) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_fungible_asset_TransferRef'() returns (v: Vec ($1_fungible_asset_TransferRef)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_fungible_asset_TransferRef'(): Vec ($1_fungible_asset_TransferRef) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_fungible_asset_TransferRef'(v: Vec ($1_fungible_asset_TransferRef)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef)), val: $1_fungible_asset_TransferRef) returns (m': $Mutation (Vec ($1_fungible_asset_TransferRef))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_fungible_asset_TransferRef'(v: Vec ($1_fungible_asset_TransferRef), val: $1_fungible_asset_TransferRef): Vec ($1_fungible_asset_TransferRef) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef))) returns (e: $1_fungible_asset_TransferRef, m': $Mutation (Vec ($1_fungible_asset_TransferRef))) {
    var v: Vec ($1_fungible_asset_TransferRef);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef)), other: Vec ($1_fungible_asset_TransferRef)) returns (m': $Mutation (Vec ($1_fungible_asset_TransferRef))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef))) returns (m': $Mutation (Vec ($1_fungible_asset_TransferRef))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef)), other: Vec ($1_fungible_asset_TransferRef)) returns (m': $Mutation (Vec ($1_fungible_asset_TransferRef))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef)), new_len: int) returns (v: (Vec ($1_fungible_asset_TransferRef)), m': $Mutation (Vec ($1_fungible_asset_TransferRef))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef)), new_len: int) returns (v: (Vec ($1_fungible_asset_TransferRef)), m': $Mutation (Vec ($1_fungible_asset_TransferRef))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef)), left: int, right: int) returns (m': $Mutation (Vec ($1_fungible_asset_TransferRef))) {
    var left_vec: Vec ($1_fungible_asset_TransferRef);
    var mid_vec: Vec ($1_fungible_asset_TransferRef);
    var right_vec: Vec ($1_fungible_asset_TransferRef);
    var v: Vec ($1_fungible_asset_TransferRef);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef)), rot: int) returns (n: int, m': $Mutation (Vec ($1_fungible_asset_TransferRef))) {
    var v: Vec ($1_fungible_asset_TransferRef);
    var len: int;
    var left_vec: Vec ($1_fungible_asset_TransferRef);
    var right_vec: Vec ($1_fungible_asset_TransferRef);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_fungible_asset_TransferRef))) {
    var left_vec: Vec ($1_fungible_asset_TransferRef);
    var mid_vec: Vec ($1_fungible_asset_TransferRef);
    var right_vec: Vec ($1_fungible_asset_TransferRef);
    var mid_left_vec: Vec ($1_fungible_asset_TransferRef);
    var mid_right_vec: Vec ($1_fungible_asset_TransferRef);
    var v: Vec ($1_fungible_asset_TransferRef);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef)), i: int, e: $1_fungible_asset_TransferRef) returns (m': $Mutation (Vec ($1_fungible_asset_TransferRef))) {
    var left_vec: Vec ($1_fungible_asset_TransferRef);
    var right_vec: Vec ($1_fungible_asset_TransferRef);
    var v: Vec ($1_fungible_asset_TransferRef);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_fungible_asset_TransferRef'(v: Vec ($1_fungible_asset_TransferRef)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_fungible_asset_TransferRef'(v: Vec ($1_fungible_asset_TransferRef)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_fungible_asset_TransferRef'(v: Vec ($1_fungible_asset_TransferRef), i: int) returns (dst: $1_fungible_asset_TransferRef) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_fungible_asset_TransferRef'(v: Vec ($1_fungible_asset_TransferRef), i: int): $1_fungible_asset_TransferRef {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef)), index: int)
returns (dst: $Mutation ($1_fungible_asset_TransferRef), m': $Mutation (Vec ($1_fungible_asset_TransferRef)))
{
    var v: Vec ($1_fungible_asset_TransferRef);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_fungible_asset_TransferRef'(v: Vec ($1_fungible_asset_TransferRef), i: int): $1_fungible_asset_TransferRef {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_fungible_asset_TransferRef'(v: Vec ($1_fungible_asset_TransferRef)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef)), i: int, j: int) returns (m': $Mutation (Vec ($1_fungible_asset_TransferRef)))
{
    var v: Vec ($1_fungible_asset_TransferRef);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_fungible_asset_TransferRef'(v: Vec ($1_fungible_asset_TransferRef), i: int, j: int): Vec ($1_fungible_asset_TransferRef) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef)), i: int) returns (e: $1_fungible_asset_TransferRef, m': $Mutation (Vec ($1_fungible_asset_TransferRef)))
{
    var v: Vec ($1_fungible_asset_TransferRef);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_fungible_asset_TransferRef'(m: $Mutation (Vec ($1_fungible_asset_TransferRef)), i: int) returns (e: $1_fungible_asset_TransferRef, m': $Mutation (Vec ($1_fungible_asset_TransferRef)))
{
    var len: int;
    var v: Vec ($1_fungible_asset_TransferRef);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_fungible_asset_TransferRef'(v: Vec ($1_fungible_asset_TransferRef), e: $1_fungible_asset_TransferRef) returns (res: bool)  {
    res := $ContainsVec'$1_fungible_asset_TransferRef'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_fungible_asset_TransferRef'(v: Vec ($1_fungible_asset_TransferRef), e: $1_fungible_asset_TransferRef) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_fungible_asset_TransferRef'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_object_Object'$1_fungible_asset_Metadata'`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_object_Object'$1_fungible_asset_Metadata'''(v1: Vec ($1_object_Object'$1_fungible_asset_Metadata'), v2: Vec ($1_object_Object'$1_fungible_asset_Metadata')): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_object_Object'$1_fungible_asset_Metadata'''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata'), prefix: Vec ($1_object_Object'$1_fungible_asset_Metadata')): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_object_Object'$1_fungible_asset_Metadata'''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata'), suffix: Vec ($1_object_Object'$1_fungible_asset_Metadata')): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_object_Object'$1_fungible_asset_Metadata'''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata')): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata'), e: $1_object_Object'$1_fungible_asset_Metadata'): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''(ReadVec(v, i), e))
}

function $IndexOfVec'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata'), e: $1_object_Object'$1_fungible_asset_Metadata'): int;
axiom (forall v: Vec ($1_object_Object'$1_fungible_asset_Metadata'), e: $1_object_Object'$1_fungible_asset_Metadata':: {$IndexOfVec'$1_object_Object'$1_fungible_asset_Metadata''(v, e)}
    (var i := $IndexOfVec'$1_object_Object'$1_fungible_asset_Metadata''(v, e);
     if (!$ContainsVec'$1_object_Object'$1_fungible_asset_Metadata''(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_object_Object'$1_fungible_asset_Metadata''(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata')): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_object_Object'$1_fungible_asset_Metadata''(): Vec ($1_object_Object'$1_fungible_asset_Metadata') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_object_Object'$1_fungible_asset_Metadata''() returns (v: Vec ($1_object_Object'$1_fungible_asset_Metadata')) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_object_Object'$1_fungible_asset_Metadata''(): Vec ($1_object_Object'$1_fungible_asset_Metadata') {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata')) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')), val: $1_object_Object'$1_fungible_asset_Metadata') returns (m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata'))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata'), val: $1_object_Object'$1_fungible_asset_Metadata'): Vec ($1_object_Object'$1_fungible_asset_Metadata') {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata'))) returns (e: $1_object_Object'$1_fungible_asset_Metadata', m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata'))) {
    var v: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')), other: Vec ($1_object_Object'$1_fungible_asset_Metadata')) returns (m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata'))) returns (m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata'))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')), other: Vec ($1_object_Object'$1_fungible_asset_Metadata')) returns (m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata'))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')), new_len: int) returns (v: (Vec ($1_object_Object'$1_fungible_asset_Metadata')), m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata'))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')), new_len: int) returns (v: (Vec ($1_object_Object'$1_fungible_asset_Metadata')), m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata'))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')), left: int, right: int) returns (m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata'))) {
    var left_vec: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    var mid_vec: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    var right_vec: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    var v: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')), rot: int) returns (n: int, m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata'))) {
    var v: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    var len: int;
    var left_vec: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    var right_vec: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata'))) {
    var left_vec: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    var mid_vec: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    var right_vec: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    var mid_left_vec: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    var mid_right_vec: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    var v: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')), i: int, e: $1_object_Object'$1_fungible_asset_Metadata') returns (m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata'))) {
    var left_vec: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    var right_vec: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    var v: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata')) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata')): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata'), i: int) returns (dst: $1_object_Object'$1_fungible_asset_Metadata') {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata'), i: int): $1_object_Object'$1_fungible_asset_Metadata' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')), index: int)
returns (dst: $Mutation ($1_object_Object'$1_fungible_asset_Metadata'), m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')))
{
    var v: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata'), i: int): $1_object_Object'$1_fungible_asset_Metadata' {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata')) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')), i: int, j: int) returns (m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')))
{
    var v: Vec ($1_object_Object'$1_fungible_asset_Metadata');
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata'), i: int, j: int): Vec ($1_object_Object'$1_fungible_asset_Metadata') {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')), i: int) returns (e: $1_object_Object'$1_fungible_asset_Metadata', m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')))
{
    var v: Vec ($1_object_Object'$1_fungible_asset_Metadata');

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')), i: int) returns (e: $1_object_Object'$1_fungible_asset_Metadata', m': $Mutation (Vec ($1_object_Object'$1_fungible_asset_Metadata')))
{
    var len: int;
    var v: Vec ($1_object_Object'$1_fungible_asset_Metadata');

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata'), e: $1_object_Object'$1_fungible_asset_Metadata') returns (res: bool)  {
    res := $ContainsVec'$1_object_Object'$1_fungible_asset_Metadata''(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata'), e: $1_object_Object'$1_fungible_asset_Metadata') returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_object_Object'$1_fungible_asset_Metadata''(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_optional_aggregator_Integer`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_optional_aggregator_Integer''(v1: Vec ($1_optional_aggregator_Integer), v2: Vec ($1_optional_aggregator_Integer)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_optional_aggregator_Integer''(v: Vec ($1_optional_aggregator_Integer), prefix: Vec ($1_optional_aggregator_Integer)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_optional_aggregator_Integer''(v: Vec ($1_optional_aggregator_Integer), suffix: Vec ($1_optional_aggregator_Integer)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_optional_aggregator_Integer''(v: Vec ($1_optional_aggregator_Integer)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_optional_aggregator_Integer'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer): int;
axiom (forall v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer:: {$IndexOfVec'$1_optional_aggregator_Integer'(v, e)}
    (var i := $IndexOfVec'$1_optional_aggregator_Integer'(v, e);
     if (!$ContainsVec'$1_optional_aggregator_Integer'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_optional_aggregator_Integer'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_optional_aggregator_Integer'(): Vec ($1_optional_aggregator_Integer) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_optional_aggregator_Integer'() returns (v: Vec ($1_optional_aggregator_Integer)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_optional_aggregator_Integer'(): Vec ($1_optional_aggregator_Integer) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), val: $1_optional_aggregator_Integer) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), val: $1_optional_aggregator_Integer): Vec ($1_optional_aggregator_Integer) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer))) returns (e: $1_optional_aggregator_Integer, m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var v: Vec ($1_optional_aggregator_Integer);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), other: Vec ($1_optional_aggregator_Integer)) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer))) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), other: Vec ($1_optional_aggregator_Integer)) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), new_len: int) returns (v: (Vec ($1_optional_aggregator_Integer)), m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), new_len: int) returns (v: (Vec ($1_optional_aggregator_Integer)), m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), left: int, right: int) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var left_vec: Vec ($1_optional_aggregator_Integer);
    var mid_vec: Vec ($1_optional_aggregator_Integer);
    var right_vec: Vec ($1_optional_aggregator_Integer);
    var v: Vec ($1_optional_aggregator_Integer);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), rot: int) returns (n: int, m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var v: Vec ($1_optional_aggregator_Integer);
    var len: int;
    var left_vec: Vec ($1_optional_aggregator_Integer);
    var right_vec: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var left_vec: Vec ($1_optional_aggregator_Integer);
    var mid_vec: Vec ($1_optional_aggregator_Integer);
    var right_vec: Vec ($1_optional_aggregator_Integer);
    var mid_left_vec: Vec ($1_optional_aggregator_Integer);
    var mid_right_vec: Vec ($1_optional_aggregator_Integer);
    var v: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), i: int, e: $1_optional_aggregator_Integer) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer))) {
    var left_vec: Vec ($1_optional_aggregator_Integer);
    var right_vec: Vec ($1_optional_aggregator_Integer);
    var v: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), i: int) returns (dst: $1_optional_aggregator_Integer) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), i: int): $1_optional_aggregator_Integer {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), index: int)
returns (dst: $Mutation ($1_optional_aggregator_Integer), m': $Mutation (Vec ($1_optional_aggregator_Integer)))
{
    var v: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), i: int): $1_optional_aggregator_Integer {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), i: int, j: int) returns (m': $Mutation (Vec ($1_optional_aggregator_Integer)))
{
    var v: Vec ($1_optional_aggregator_Integer);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), i: int, j: int): Vec ($1_optional_aggregator_Integer) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), i: int) returns (e: $1_optional_aggregator_Integer, m': $Mutation (Vec ($1_optional_aggregator_Integer)))
{
    var v: Vec ($1_optional_aggregator_Integer);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_optional_aggregator_Integer'(m: $Mutation (Vec ($1_optional_aggregator_Integer)), i: int) returns (e: $1_optional_aggregator_Integer, m': $Mutation (Vec ($1_optional_aggregator_Integer)))
{
    var len: int;
    var v: Vec ($1_optional_aggregator_Integer);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer) returns (res: bool)  {
    res := $ContainsVec'$1_optional_aggregator_Integer'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer), e: $1_optional_aggregator_Integer) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_optional_aggregator_Integer'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `$1_optional_aggregator_OptionalAggregator`

// Not inlined. It appears faster this way.
function $IsEqual'vec'$1_optional_aggregator_OptionalAggregator''(v1: Vec ($1_optional_aggregator_OptionalAggregator), v2: Vec ($1_optional_aggregator_OptionalAggregator)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'$1_optional_aggregator_OptionalAggregator''(v: Vec ($1_optional_aggregator_OptionalAggregator), prefix: Vec ($1_optional_aggregator_OptionalAggregator)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'$1_optional_aggregator_OptionalAggregator''(v: Vec ($1_optional_aggregator_OptionalAggregator), suffix: Vec ($1_optional_aggregator_OptionalAggregator)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'$1_optional_aggregator_OptionalAggregator''(v: Vec ($1_optional_aggregator_OptionalAggregator)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, i), e))
}

function $IndexOfVec'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator): int;
axiom (forall v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator:: {$IndexOfVec'$1_optional_aggregator_OptionalAggregator'(v, e)}
    (var i := $IndexOfVec'$1_optional_aggregator_OptionalAggregator'(v, e);
     if (!$ContainsVec'$1_optional_aggregator_OptionalAggregator'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'$1_optional_aggregator_OptionalAggregator'(ReadVec(v, j), e))));


function {:inline} $RangeVec'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'$1_optional_aggregator_OptionalAggregator'(): Vec ($1_optional_aggregator_OptionalAggregator) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'$1_optional_aggregator_OptionalAggregator'() returns (v: Vec ($1_optional_aggregator_OptionalAggregator)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'$1_optional_aggregator_OptionalAggregator'(): Vec ($1_optional_aggregator_OptionalAggregator) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), val: $1_optional_aggregator_OptionalAggregator) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), val: $1_optional_aggregator_OptionalAggregator): Vec ($1_optional_aggregator_OptionalAggregator) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) returns (e: $1_optional_aggregator_OptionalAggregator, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), other: Vec ($1_optional_aggregator_OptionalAggregator)) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), other: Vec ($1_optional_aggregator_OptionalAggregator)) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), new_len: int) returns (v: (Vec ($1_optional_aggregator_OptionalAggregator)), m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), new_len: int) returns (v: (Vec ($1_optional_aggregator_OptionalAggregator)), m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), left: int, right: int) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var mid_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), rot: int) returns (n: int, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    var len: int;
    var left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var mid_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var mid_left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var mid_right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), i: int, e: $1_optional_aggregator_OptionalAggregator) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator))) {
    var left_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var right_vec: Vec ($1_optional_aggregator_OptionalAggregator);
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), i: int) returns (dst: $1_optional_aggregator_OptionalAggregator) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), i: int): $1_optional_aggregator_OptionalAggregator {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), index: int)
returns (dst: $Mutation ($1_optional_aggregator_OptionalAggregator), m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)))
{
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), i: int): $1_optional_aggregator_OptionalAggregator {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), i: int, j: int) returns (m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)))
{
    var v: Vec ($1_optional_aggregator_OptionalAggregator);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), i: int, j: int): Vec ($1_optional_aggregator_OptionalAggregator) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), i: int) returns (e: $1_optional_aggregator_OptionalAggregator, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)))
{
    var v: Vec ($1_optional_aggregator_OptionalAggregator);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'$1_optional_aggregator_OptionalAggregator'(m: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)), i: int) returns (e: $1_optional_aggregator_OptionalAggregator, m': $Mutation (Vec ($1_optional_aggregator_OptionalAggregator)))
{
    var len: int;
    var v: Vec ($1_optional_aggregator_OptionalAggregator);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator) returns (res: bool)  {
    res := $ContainsVec'$1_optional_aggregator_OptionalAggregator'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator), e: $1_optional_aggregator_OptionalAggregator) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'$1_optional_aggregator_OptionalAggregator'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u128`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u128''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u128'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u128''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u128'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u128''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u128'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u128''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u128'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u128'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u128'(ReadVec(v, i), e))
}

function $IndexOfVec'u128'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u128'(v, e)}
    (var i := $IndexOfVec'u128'(v, e);
     if (!$ContainsVec'u128'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u128'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u128'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u128'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u128'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u128'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u128'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u128'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u128'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u128'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u128'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u128'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u128'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u128'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u128'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u128'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u128'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u128'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u128'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u128'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u128'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u128'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u128'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u128'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u128'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u128'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u128'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u128'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u128'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u128'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u128'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u128'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u128'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u128'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u128'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `u8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'u8''(v1: Vec (int), v2: Vec (int)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'u8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'u8''(v: Vec (int), prefix: Vec (int)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'u8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'u8''(v: Vec (int), suffix: Vec (int)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'u8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'u8''(v: Vec (int)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'u8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'u8'(v: Vec (int), e: int): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e))
}

function $IndexOfVec'u8'(v: Vec (int), e: int): int;
axiom (forall v: Vec (int), e: int:: {$IndexOfVec'u8'(v, e)}
    (var i := $IndexOfVec'u8'(v, e);
     if (!$ContainsVec'u8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'u8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'u8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'u8'(v: Vec (int)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'u8'() returns (v: Vec (int)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'u8'(): Vec (int) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'u8'(v: Vec (int)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'u8'(m: $Mutation (Vec (int)), val: int) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'u8'(v: Vec (int), val: int): Vec (int) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'u8'(m: $Mutation (Vec (int))) returns (e: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'u8'(m: $Mutation (Vec (int))) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'u8'(m: $Mutation (Vec (int)), other: Vec (int)) returns (m': $Mutation (Vec (int))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'u8'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'u8'(m: $Mutation (Vec (int)), new_len: int) returns (v: (Vec (int)), m': $Mutation (Vec (int))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'u8'(m: $Mutation (Vec (int)), left: int, right: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'u8'(m: $Mutation (Vec (int)), rot: int) returns (n: int, m': $Mutation (Vec (int))) {
    var v: Vec (int);
    var len: int;
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'u8'(m: $Mutation (Vec (int)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var mid_vec: Vec (int);
    var right_vec: Vec (int);
    var mid_left_vec: Vec (int);
    var mid_right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'u8'(m: $Mutation (Vec (int)), i: int, e: int) returns (m': $Mutation (Vec (int))) {
    var left_vec: Vec (int);
    var right_vec: Vec (int);
    var v: Vec (int);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'u8'(v: Vec (int)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'u8'(v: Vec (int)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'u8'(v: Vec (int), i: int) returns (dst: int) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'u8'(m: $Mutation (Vec (int)), index: int)
returns (dst: $Mutation (int), m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'u8'(v: Vec (int), i: int): int {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'u8'(v: Vec (int)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'u8'(m: $Mutation (Vec (int)), i: int, j: int) returns (m': $Mutation (Vec (int)))
{
    var v: Vec (int);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'u8'(v: Vec (int), i: int, j: int): Vec (int) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var v: Vec (int);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'u8'(m: $Mutation (Vec (int)), i: int) returns (e: int, m': $Mutation (Vec (int)))
{
    var len: int;
    var v: Vec (int);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'u8'(v: Vec (int), e: int) returns (res: bool)  {
    res := $ContainsVec'u8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'u8'(v: Vec (int), e: int) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'u8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv128`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv128''(v1: Vec (bv128), v2: Vec (bv128)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv128'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv128''(v: Vec (bv128), prefix: Vec (bv128)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv128'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv128''(v: Vec (bv128), suffix: Vec (bv128)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv128'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv128''(v: Vec (bv128)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv128'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv128'(v: Vec (bv128), e: bv128): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv128'(ReadVec(v, i), e))
}

function $IndexOfVec'bv128'(v: Vec (bv128), e: bv128): int;
axiom (forall v: Vec (bv128), e: bv128:: {$IndexOfVec'bv128'(v, e)}
    (var i := $IndexOfVec'bv128'(v, e);
     if (!$ContainsVec'bv128'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv128'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv128'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv128'(v: Vec (bv128)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv128'(): Vec (bv128) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv128'() returns (v: Vec (bv128)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv128'(): Vec (bv128) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv128'(v: Vec (bv128)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv128'(m: $Mutation (Vec (bv128)), val: bv128) returns (m': $Mutation (Vec (bv128))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv128'(v: Vec (bv128), val: bv128): Vec (bv128) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv128'(m: $Mutation (Vec (bv128))) returns (e: bv128, m': $Mutation (Vec (bv128))) {
    var v: Vec (bv128);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv128'(m: $Mutation (Vec (bv128)), other: Vec (bv128)) returns (m': $Mutation (Vec (bv128))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv128'(m: $Mutation (Vec (bv128))) returns (m': $Mutation (Vec (bv128))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv128'(m: $Mutation (Vec (bv128)), other: Vec (bv128)) returns (m': $Mutation (Vec (bv128))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv128'(m: $Mutation (Vec (bv128)), new_len: int) returns (v: (Vec (bv128)), m': $Mutation (Vec (bv128))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv128'(m: $Mutation (Vec (bv128)), new_len: int) returns (v: (Vec (bv128)), m': $Mutation (Vec (bv128))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv128'(m: $Mutation (Vec (bv128)), left: int, right: int) returns (m': $Mutation (Vec (bv128))) {
    var left_vec: Vec (bv128);
    var mid_vec: Vec (bv128);
    var right_vec: Vec (bv128);
    var v: Vec (bv128);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv128'(m: $Mutation (Vec (bv128)), rot: int) returns (n: int, m': $Mutation (Vec (bv128))) {
    var v: Vec (bv128);
    var len: int;
    var left_vec: Vec (bv128);
    var right_vec: Vec (bv128);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv128'(m: $Mutation (Vec (bv128)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv128))) {
    var left_vec: Vec (bv128);
    var mid_vec: Vec (bv128);
    var right_vec: Vec (bv128);
    var mid_left_vec: Vec (bv128);
    var mid_right_vec: Vec (bv128);
    var v: Vec (bv128);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv128'(m: $Mutation (Vec (bv128)), i: int, e: bv128) returns (m': $Mutation (Vec (bv128))) {
    var left_vec: Vec (bv128);
    var right_vec: Vec (bv128);
    var v: Vec (bv128);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv128'(v: Vec (bv128)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv128'(v: Vec (bv128)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv128'(v: Vec (bv128), i: int) returns (dst: bv128) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv128'(v: Vec (bv128), i: int): bv128 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv128'(m: $Mutation (Vec (bv128)), index: int)
returns (dst: $Mutation (bv128), m': $Mutation (Vec (bv128)))
{
    var v: Vec (bv128);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv128'(v: Vec (bv128), i: int): bv128 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv128'(v: Vec (bv128)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv128'(m: $Mutation (Vec (bv128)), i: int, j: int) returns (m': $Mutation (Vec (bv128)))
{
    var v: Vec (bv128);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv128'(v: Vec (bv128), i: int, j: int): Vec (bv128) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv128'(m: $Mutation (Vec (bv128)), i: int) returns (e: bv128, m': $Mutation (Vec (bv128)))
{
    var v: Vec (bv128);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv128'(m: $Mutation (Vec (bv128)), i: int) returns (e: bv128, m': $Mutation (Vec (bv128)))
{
    var len: int;
    var v: Vec (bv128);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv128'(v: Vec (bv128), e: bv128) returns (res: bool)  {
    res := $ContainsVec'bv128'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv128'(v: Vec (bv128), e: bv128) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv128'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ----------------------------------------------------------------------------------
// Native Vector implementation for element type `bv8`

// Not inlined. It appears faster this way.
function $IsEqual'vec'bv8''(v1: Vec (bv8), v2: Vec (bv8)): bool {
    LenVec(v1) == LenVec(v2) &&
    (forall i: int:: InRangeVec(v1, i) ==> $IsEqual'bv8'(ReadVec(v1, i), ReadVec(v2, i)))
}

// Not inlined.
function $IsPrefix'vec'bv8''(v: Vec (bv8), prefix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(prefix) &&
    (forall i: int:: InRangeVec(prefix, i) ==> $IsEqual'bv8'(ReadVec(v, i), ReadVec(prefix, i)))
}

// Not inlined.
function $IsSuffix'vec'bv8''(v: Vec (bv8), suffix: Vec (bv8)): bool {
    LenVec(v) >= LenVec(suffix) &&
    (forall i: int:: InRangeVec(suffix, i) ==> $IsEqual'bv8'(ReadVec(v, LenVec(v) - LenVec(suffix) + i), ReadVec(suffix, i)))
}

// Not inlined.
function $IsValid'vec'bv8''(v: Vec (bv8)): bool {
    $IsValid'u64'(LenVec(v)) &&
    (forall i: int:: InRangeVec(v, i) ==> $IsValid'bv8'(ReadVec(v, i)))
}


function {:inline} $ContainsVec'bv8'(v: Vec (bv8), e: bv8): bool {
    (exists i: int :: $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e))
}

function $IndexOfVec'bv8'(v: Vec (bv8), e: bv8): int;
axiom (forall v: Vec (bv8), e: bv8:: {$IndexOfVec'bv8'(v, e)}
    (var i := $IndexOfVec'bv8'(v, e);
     if (!$ContainsVec'bv8'(v, e)) then i == -1
     else $IsValid'u64'(i) && InRangeVec(v, i) && $IsEqual'bv8'(ReadVec(v, i), e) &&
        (forall j: int :: $IsValid'u64'(j) && j >= 0 && j < i ==> !$IsEqual'bv8'(ReadVec(v, j), e))));


function {:inline} $RangeVec'bv8'(v: Vec (bv8)): $Range {
    $Range(0, LenVec(v))
}


function {:inline} $EmptyVec'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_empty'bv8'() returns (v: Vec (bv8)) {
    v := EmptyVec();
}

function {:inline} $1_vector_$empty'bv8'(): Vec (bv8) {
    EmptyVec()
}

procedure {:inline 1} $1_vector_is_empty'bv8'(v: Vec (bv8)) returns (b: bool) {
    b := IsEmptyVec(v);
}

procedure {:inline 1} $1_vector_push_back'bv8'(m: $Mutation (Vec (bv8)), val: bv8) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ExtendVec($Dereference(m), val));
}

function {:inline} $1_vector_$push_back'bv8'(v: Vec (bv8), val: bv8): Vec (bv8) {
    ExtendVec(v, val)
}

procedure {:inline 1} $1_vector_pop_back'bv8'(m: $Mutation (Vec (bv8))) returns (e: bv8, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    v := $Dereference(m);
    len := LenVec(v);
    if (len == 0) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, len-1);
    m' := $UpdateMutation(m, RemoveVec(v));
}

procedure {:inline 1} $1_vector_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), other));
}

procedure {:inline 1} $1_vector_reverse'bv8'(m: $Mutation (Vec (bv8))) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ReverseVec($Dereference(m)));
}

procedure {:inline 1} $1_vector_reverse_append'bv8'(m: $Mutation (Vec (bv8)), other: Vec (bv8)) returns (m': $Mutation (Vec (bv8))) {
    m' := $UpdateMutation(m, ConcatVec($Dereference(m), ReverseVec(other)));
}

procedure {:inline 1} $1_vector_trim_reverse'bv8'(m: $Mutation (Vec (bv8)), new_len: int) returns (v: (Vec (bv8)), m': $Mutation (Vec (bv8))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    v := ReverseVec(v);
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_trim'bv8'(m: $Mutation (Vec (bv8)), new_len: int) returns (v: (Vec (bv8)), m': $Mutation (Vec (bv8))) {
    var len: int;
    v := $Dereference(m);
    if (LenVec(v) < new_len) {
        call $ExecFailureAbort();
        return;
    }
    v := SliceVec(v, new_len, LenVec(v));
    m' := $UpdateMutation(m, SliceVec($Dereference(m), 0, new_len));
}

procedure {:inline 1} $1_vector_reverse_slice'bv8'(m: $Mutation (Vec (bv8)), left: int, right: int) returns (m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var mid_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var v: Vec (bv8);
    if (left > right) {
        call $ExecFailureAbort();
        return;
    }
    if (left == right) {
        m' := m;
        return;
    }
    v := $Dereference(m);
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_vec := ReverseVec(SliceVec(v, left, right));
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
}

procedure {:inline 1} $1_vector_rotate'bv8'(m: $Mutation (Vec (bv8)), rot: int) returns (n: int, m': $Mutation (Vec (bv8))) {
    var v: Vec (bv8);
    var len: int;
    var left_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    v := $Dereference(m);
    if (!(rot >= 0 && rot <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    left_vec := SliceVec(v, 0, rot);
    right_vec := SliceVec(v, rot, LenVec(v));
    m' := $UpdateMutation(m, ConcatVec(right_vec, left_vec));
    n := LenVec(v) - rot;
}

procedure {:inline 1} $1_vector_rotate_slice'bv8'(m: $Mutation (Vec (bv8)), left: int, rot: int, right: int) returns (n: int, m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var mid_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var mid_left_vec: Vec (bv8);
    var mid_right_vec: Vec (bv8);
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!(left <= rot && rot <= right)) {
        call $ExecFailureAbort();
        return;
    }
    if (!(right >= 0 && right <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    v := $Dereference(m);
    left_vec := SliceVec(v, 0, left);
    right_vec := SliceVec(v, right, LenVec(v));
    mid_left_vec := SliceVec(v, left, rot);
    mid_right_vec := SliceVec(v, rot, right);
    mid_vec := ConcatVec(mid_right_vec, mid_left_vec);
    m' := $UpdateMutation(m, ConcatVec(left_vec, ConcatVec(mid_vec, right_vec)));
    n := left + (right - rot);
}

procedure {:inline 1} $1_vector_insert'bv8'(m: $Mutation (Vec (bv8)), i: int, e: bv8) returns (m': $Mutation (Vec (bv8))) {
    var left_vec: Vec (bv8);
    var right_vec: Vec (bv8);
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!(i >= 0 && i <= LenVec(v))) {
        call $ExecFailureAbort();
        return;
    }
    if (i == LenVec(v)) {
        m' := $UpdateMutation(m, ExtendVec(v, e));
    } else {
        left_vec := ExtendVec(SliceVec(v, 0, i), e);
        right_vec := SliceVec(v, i, LenVec(v));
        m' := $UpdateMutation(m, ConcatVec(left_vec, right_vec));
    }
}

procedure {:inline 1} $1_vector_length'bv8'(v: Vec (bv8)) returns (l: int) {
    l := LenVec(v);
}

function {:inline} $1_vector_$length'bv8'(v: Vec (bv8)): int {
    LenVec(v)
}

procedure {:inline 1} $1_vector_borrow'bv8'(v: Vec (bv8), i: int) returns (dst: bv8) {
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    dst := ReadVec(v, i);
}

function {:inline} $1_vector_$borrow'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_borrow_mut'bv8'(m: $Mutation (Vec (bv8)), index: int)
returns (dst: $Mutation (bv8), m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, index)) {
        call $ExecFailureAbort();
        return;
    }
    dst := $Mutation(m->l, ExtendVec(m->p, index), ReadVec(v, index));
    m' := m;
}

function {:inline} $1_vector_$borrow_mut'bv8'(v: Vec (bv8), i: int): bv8 {
    ReadVec(v, i)
}

procedure {:inline 1} $1_vector_destroy_empty'bv8'(v: Vec (bv8)) {
    if (!IsEmptyVec(v)) {
      call $ExecFailureAbort();
    }
}

procedure {:inline 1} $1_vector_swap'bv8'(m: $Mutation (Vec (bv8)), i: int, j: int) returns (m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);
    v := $Dereference(m);
    if (!InRangeVec(v, i) || !InRangeVec(v, j)) {
        call $ExecFailureAbort();
        return;
    }
    m' := $UpdateMutation(m, SwapVec(v, i, j));
}

function {:inline} $1_vector_$swap'bv8'(v: Vec (bv8), i: int, j: int): Vec (bv8) {
    SwapVec(v, i, j)
}

procedure {:inline 1} $1_vector_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var v: Vec (bv8);

    v := $Dereference(m);

    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveAtVec(v, i));
}

procedure {:inline 1} $1_vector_swap_remove'bv8'(m: $Mutation (Vec (bv8)), i: int) returns (e: bv8, m': $Mutation (Vec (bv8)))
{
    var len: int;
    var v: Vec (bv8);

    v := $Dereference(m);
    len := LenVec(v);
    if (!InRangeVec(v, i)) {
        call $ExecFailureAbort();
        return;
    }
    e := ReadVec(v, i);
    m' := $UpdateMutation(m, RemoveVec(SwapVec(v, i, len-1)));
}

procedure {:inline 1} $1_vector_contains'bv8'(v: Vec (bv8), e: bv8) returns (res: bool)  {
    res := $ContainsVec'bv8'(v, e);
}

procedure {:inline 1}
$1_vector_index_of'bv8'(v: Vec (bv8), e: bv8) returns (res1: bool, res2: int) {
    res2 := $IndexOfVec'bv8'(v, e);
    if (res2 >= 0) {
        res1 := true;
    } else {
        res1 := false;
        res2 := 0;
    }
}


// ==================================================================================
// Native Table

// ----------------------------------------------------------------------------------
// Native Table key encoding for type `$1_type_info_TypeInfo`

function $EncodeKey'$1_type_info_TypeInfo'(k: $1_type_info_TypeInfo): int;
axiom (
  forall k1, k2: $1_type_info_TypeInfo :: {$EncodeKey'$1_type_info_TypeInfo'(k1), $EncodeKey'$1_type_info_TypeInfo'(k2)}
    $IsEqual'$1_type_info_TypeInfo'(k1, k2) <==> $EncodeKey'$1_type_info_TypeInfo'(k1) == $EncodeKey'$1_type_info_TypeInfo'(k2)
);


// ----------------------------------------------------------------------------------
// Native Table key encoding for type `vec'u8'`

function $EncodeKey'vec'u8''(k: Vec (int)): int;
axiom (
  forall k1, k2: Vec (int) :: {$EncodeKey'vec'u8''(k1), $EncodeKey'vec'u8''(k2)}
    $IsEqual'vec'u8''(k1, k2) <==> $EncodeKey'vec'u8''(k1) == $EncodeKey'vec'u8''(k2)
);


// ----------------------------------------------------------------------------------
// Native Table implementation for type `($1_type_info_TypeInfo,$1_object_Object'$1_fungible_asset_Metadata')`

function $IsEqual'$1_table_Table'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata'''(t1: Table int ($1_object_Object'$1_fungible_asset_Metadata'), t2: Table int ($1_object_Object'$1_fungible_asset_Metadata')): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_table_Table'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata'''(t: Table int ($1_object_Object'$1_fungible_asset_Metadata')): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(GetTable(t, i)))
}
procedure {:inline 2} $1_table_new'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''() returns (v: Table int ($1_object_Object'$1_fungible_asset_Metadata')) {
    v := EmptyTable();
}
procedure {:inline 2} $1_table_destroy'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''(t: Table int ($1_object_Object'$1_fungible_asset_Metadata')) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_table_contains'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''(t: (Table int ($1_object_Object'$1_fungible_asset_Metadata')), k: $1_type_info_TypeInfo) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'$1_type_info_TypeInfo'(k));
}
procedure {:inline 2} $1_table_add'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Table int ($1_object_Object'$1_fungible_asset_Metadata')), k: $1_type_info_TypeInfo, v: $1_object_Object'$1_fungible_asset_Metadata') returns (m': $Mutation(Table int ($1_object_Object'$1_fungible_asset_Metadata'))) {
    var enc_k: int;
    var t: Table int ($1_object_Object'$1_fungible_asset_Metadata');
    enc_k := $EncodeKey'$1_type_info_TypeInfo'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_table_upsert'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Table int ($1_object_Object'$1_fungible_asset_Metadata')), k: $1_type_info_TypeInfo, v: $1_object_Object'$1_fungible_asset_Metadata') returns (m': $Mutation(Table int ($1_object_Object'$1_fungible_asset_Metadata'))) {
    var enc_k: int;
    var t: Table int ($1_object_Object'$1_fungible_asset_Metadata');
    enc_k := $EncodeKey'$1_type_info_TypeInfo'(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, UpdateTable(t, enc_k, v));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_table_remove'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Table int ($1_object_Object'$1_fungible_asset_Metadata')), k: $1_type_info_TypeInfo)
returns (v: $1_object_Object'$1_fungible_asset_Metadata', m': $Mutation(Table int ($1_object_Object'$1_fungible_asset_Metadata'))) {
    var enc_k: int;
    var t: Table int ($1_object_Object'$1_fungible_asset_Metadata');
    enc_k := $EncodeKey'$1_type_info_TypeInfo'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_table_borrow'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''(t: Table int ($1_object_Object'$1_fungible_asset_Metadata'), k: $1_type_info_TypeInfo) returns (v: $1_object_Object'$1_fungible_asset_Metadata') {
    var enc_k: int;
    enc_k := $EncodeKey'$1_type_info_TypeInfo'(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'$1_type_info_TypeInfo'(k));
    }
}
procedure {:inline 2} $1_table_borrow_mut'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Table int ($1_object_Object'$1_fungible_asset_Metadata')), k: $1_type_info_TypeInfo)
returns (dst: $Mutation ($1_object_Object'$1_fungible_asset_Metadata'), m': $Mutation (Table int ($1_object_Object'$1_fungible_asset_Metadata'))) {
    var enc_k: int;
    var t: Table int ($1_object_Object'$1_fungible_asset_Metadata');
    enc_k := $EncodeKey'$1_type_info_TypeInfo'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
procedure {:inline 2} $1_table_borrow_mut_with_default'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''(m: $Mutation (Table int ($1_object_Object'$1_fungible_asset_Metadata')), k: $1_type_info_TypeInfo, default: $1_object_Object'$1_fungible_asset_Metadata')
returns (dst: $Mutation ($1_object_Object'$1_fungible_asset_Metadata'), m': $Mutation (Table int ($1_object_Object'$1_fungible_asset_Metadata'))) {
    var enc_k: int;
    var t: Table int ($1_object_Object'$1_fungible_asset_Metadata');
    var t': Table int ($1_object_Object'$1_fungible_asset_Metadata');
    enc_k := $EncodeKey'$1_type_info_TypeInfo'(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, AddTable(t, enc_k, default));
        t' := $Dereference(m');
        dst := $Mutation(m'->l, ExtendVec(m'->p, enc_k), GetTable(t', enc_k));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_table_spec_contains'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''(t: (Table int ($1_object_Object'$1_fungible_asset_Metadata')), k: $1_type_info_TypeInfo): bool {
    ContainsTable(t, $EncodeKey'$1_type_info_TypeInfo'(k))
}
function {:inline} $1_table_spec_set'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''(t: Table int ($1_object_Object'$1_fungible_asset_Metadata'), k: $1_type_info_TypeInfo, v: $1_object_Object'$1_fungible_asset_Metadata'): Table int ($1_object_Object'$1_fungible_asset_Metadata') {
    (var enc_k := $EncodeKey'$1_type_info_TypeInfo'(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_table_spec_remove'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''(t: Table int ($1_object_Object'$1_fungible_asset_Metadata'), k: $1_type_info_TypeInfo): Table int ($1_object_Object'$1_fungible_asset_Metadata') {
    RemoveTable(t, $EncodeKey'$1_type_info_TypeInfo'(k))
}
function {:inline} $1_table_spec_get'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''(t: Table int ($1_object_Object'$1_fungible_asset_Metadata'), k: $1_type_info_TypeInfo): $1_object_Object'$1_fungible_asset_Metadata' {
    GetTable(t, $EncodeKey'$1_type_info_TypeInfo'(k))
}



// ----------------------------------------------------------------------------------
// Native Table implementation for type `(vec'u8',$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')`

function $IsEqual'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(t1: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'), t2: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(GetTable(t, i)))
}
procedure {:inline 2} $1_smart_table_new'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''() returns (v: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')) {
    v := EmptyTable();
}
procedure {:inline 2} $1_smart_table_destroy_empty'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_smart_table_length'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(t: (Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_smart_table_contains'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(t: (Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')), k: Vec (int)) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'vec'u8''(k));
}
procedure {:inline 2} $1_smart_table_add'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')), k: Vec (int), v: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress') returns (m': $Mutation(Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_smart_table_upsert'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')), k: Vec (int), v: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress') returns (m': $Mutation(Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, UpdateTable(t, enc_k, v));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_smart_table_remove'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')), k: Vec (int))
returns (v: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress', m': $Mutation(Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_smart_table_borrow'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'), k: Vec (int)) returns (v: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress') {
    var enc_k: int;
    enc_k := $EncodeKey'vec'u8''(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'vec'u8''(k));
    }
}
procedure {:inline 2} $1_smart_table_borrow_mut'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')), k: Vec (int))
returns (dst: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'), m': $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
procedure {:inline 2} $1_smart_table_borrow_mut_with_default'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')), k: Vec (int), default: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')
returns (dst: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'), m': $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var t': Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, AddTable(t, enc_k, default));
        t' := $Dereference(m');
        dst := $Mutation(m'->l, ExtendVec(m'->p, enc_k), GetTable(t', enc_k));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_smart_table_spec_len'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(t: (Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'))): int {
    LenTable(t)
}
function {:inline} $1_smart_table_spec_contains'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(t: (Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')), k: Vec (int)): bool {
    ContainsTable(t, $EncodeKey'vec'u8''(k))
}
function {:inline} $1_smart_table_spec_set'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'), k: Vec (int), v: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'): Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress') {
    (var enc_k := $EncodeKey'vec'u8''(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_smart_table_spec_remove'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'), k: Vec (int)): Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress') {
    RemoveTable(t, $EncodeKey'vec'u8''(k))
}
function {:inline} $1_smart_table_spec_get'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'), k: Vec (int)): $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress' {
    GetTable(t, $EncodeKey'vec'u8''(k))
}



// ----------------------------------------------------------------------------------
// Native Table implementation for type `(vec'u8',$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')`

function $IsEqual'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(t1: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'), t2: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(GetTable(t, i)))
}
procedure {:inline 2} $1_smart_table_new'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''() returns (v: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')) {
    v := EmptyTable();
}
procedure {:inline 2} $1_smart_table_destroy_empty'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_smart_table_length'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(t: (Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_smart_table_contains'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(t: (Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')), k: Vec (int)) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'vec'u8''(k));
}
procedure {:inline 2} $1_smart_table_add'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')), k: Vec (int), v: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address') returns (m': $Mutation(Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_smart_table_upsert'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')), k: Vec (int), v: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address') returns (m': $Mutation(Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, UpdateTable(t, enc_k, v));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_smart_table_remove'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')), k: Vec (int))
returns (v: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address', m': $Mutation(Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_smart_table_borrow'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'), k: Vec (int)) returns (v: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address') {
    var enc_k: int;
    enc_k := $EncodeKey'vec'u8''(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'vec'u8''(k));
    }
}
procedure {:inline 2} $1_smart_table_borrow_mut'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')), k: Vec (int))
returns (dst: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'), m': $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
procedure {:inline 2} $1_smart_table_borrow_mut_with_default'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')), k: Vec (int), default: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')
returns (dst: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'), m': $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var t': Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, AddTable(t, enc_k, default));
        t' := $Dereference(m');
        dst := $Mutation(m'->l, ExtendVec(m'->p, enc_k), GetTable(t', enc_k));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_smart_table_spec_len'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(t: (Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'))): int {
    LenTable(t)
}
function {:inline} $1_smart_table_spec_contains'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(t: (Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')), k: Vec (int)): bool {
    ContainsTable(t, $EncodeKey'vec'u8''(k))
}
function {:inline} $1_smart_table_spec_set'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'), k: Vec (int), v: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'): Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address') {
    (var enc_k := $EncodeKey'vec'u8''(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_smart_table_spec_remove'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'), k: Vec (int)): Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address') {
    RemoveTable(t, $EncodeKey'vec'u8''(k))
}
function {:inline} $1_smart_table_spec_get'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'), k: Vec (int)): $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address' {
    GetTable(t, $EncodeKey'vec'u8''(k))
}



// ----------------------------------------------------------------------------------
// Native Table implementation for type `(vec'u8',$1_atomic_bridge_store_BridgeTransferDetails'#0_#1')`

function $IsEqual'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(t1: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'), t2: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')): bool {
    LenTable(t1) == LenTable(t2) &&
    (forall k: int :: ContainsTable(t1, k) <==> ContainsTable(t2, k)) &&
    (forall k: int :: ContainsTable(t1, k) ==> GetTable(t1, k) == GetTable(t2, k)) &&
    (forall k: int :: ContainsTable(t2, k) ==> GetTable(t1, k) == GetTable(t2, k))
}

// Not inlined.
function $IsValid'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')): bool {
    $IsValid'u64'(LenTable(t)) &&
    (forall i: int:: ContainsTable(t, i) ==> $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(GetTable(t, i)))
}
procedure {:inline 2} $1_smart_table_new'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''() returns (v: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')) {
    v := EmptyTable();
}
procedure {:inline 2} $1_smart_table_destroy_empty'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')) {
    if (LenTable(t) != 0) {
        call $Abort($StdError(1/*INVALID_STATE*/, 102/*ENOT_EMPTY*/));
    }
}
procedure {:inline 2} $1_smart_table_length'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(t: (Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))) returns (l: int) {
    l := LenTable(t);
}
procedure {:inline 2} $1_smart_table_contains'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(t: (Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')), k: Vec (int)) returns (r: bool) {
    r := ContainsTable(t, $EncodeKey'vec'u8''(k));
}
procedure {:inline 2} $1_smart_table_add'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')), k: Vec (int), v: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1') returns (m': $Mutation(Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 100/*EALREADY_EXISTS*/));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_smart_table_upsert'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')), k: Vec (int), v: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1') returns (m': $Mutation(Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, UpdateTable(t, enc_k, v));
    } else {
        m' := $UpdateMutation(m, AddTable(t, enc_k, v));
    }
}
procedure {:inline 2} $1_smart_table_remove'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')), k: Vec (int))
returns (v: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1', m': $Mutation(Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, enc_k);
        m' := $UpdateMutation(m, RemoveTable(t, enc_k));
    }
}
procedure {:inline 2} $1_smart_table_borrow'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'), k: Vec (int)) returns (v: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1') {
    var enc_k: int;
    enc_k := $EncodeKey'vec'u8''(k);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        v := GetTable(t, $EncodeKey'vec'u8''(k));
    }
}
procedure {:inline 2} $1_smart_table_borrow_mut'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')), k: Vec (int))
returns (dst: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'), m': $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        call $Abort($StdError(7/*INVALID_ARGUMENTS*/, 101/*ENOT_FOUND*/));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
procedure {:inline 2} $1_smart_table_borrow_mut_with_default'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(m: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')), k: Vec (int), default: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1')
returns (dst: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'), m': $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))) {
    var enc_k: int;
    var t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var t': Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    enc_k := $EncodeKey'vec'u8''(k);
    t := $Dereference(m);
    if (!ContainsTable(t, enc_k)) {
        m' := $UpdateMutation(m, AddTable(t, enc_k, default));
        t' := $Dereference(m');
        dst := $Mutation(m'->l, ExtendVec(m'->p, enc_k), GetTable(t', enc_k));
    } else {
        dst := $Mutation(m->l, ExtendVec(m->p, enc_k), GetTable(t, enc_k));
        m' := m;
    }
}
function {:inline} $1_smart_table_spec_len'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(t: (Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))): int {
    LenTable(t)
}
function {:inline} $1_smart_table_spec_contains'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(t: (Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')), k: Vec (int)): bool {
    ContainsTable(t, $EncodeKey'vec'u8''(k))
}
function {:inline} $1_smart_table_spec_set'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'), k: Vec (int), v: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1'): Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1') {
    (var enc_k := $EncodeKey'vec'u8''(k);
    if (ContainsTable(t, enc_k)) then
        UpdateTable(t, enc_k, v)
    else
        AddTable(t, enc_k, v))
}
function {:inline} $1_smart_table_spec_remove'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'), k: Vec (int)): Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1') {
    RemoveTable(t, $EncodeKey'vec'u8''(k))
}
function {:inline} $1_smart_table_spec_get'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(t: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'), k: Vec (int)): $1_atomic_bridge_store_BridgeTransferDetails'#0_#1' {
    GetTable(t, $EncodeKey'vec'u8''(k))
}



// ==================================================================================
// Native Hash

// Hash is modeled as an otherwise uninterpreted injection.
// In truth, it is not an injection since the domain has greater cardinality
// (arbitrary length vectors) than the co-domain (vectors of length 32).  But it is
// common to assume in code there are no hash collisions in practice.  Fortunately,
// Boogie is not smart enough to recognized that there is an inconsistency.
// FIXME: If we were using a reliable extensional theory of arrays, and if we could use ==
// instead of $IsEqual, we might be able to avoid so many quantified formulas by
// using a sha2_inverse function in the ensures conditions of Hash_sha2_256 to
// assert that sha2/3 are injections without using global quantified axioms.


function $1_hash_sha2(val: Vec int): Vec int;

// This says that Hash_sha2 is bijective.
axiom (forall v1,v2: Vec int :: {$1_hash_sha2(v1), $1_hash_sha2(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha2(v1), $1_hash_sha2(v2)));

procedure $1_hash_sha2_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha2(val);     // returns Hash_sha2 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha2_256(val: Vec int): Vec int {
    $1_hash_sha2(val)
}

// similarly for Hash_sha3
function $1_hash_sha3(val: Vec int): Vec int;

axiom (forall v1,v2: Vec int :: {$1_hash_sha3(v1), $1_hash_sha3(v2)}
       $IsEqual'vec'u8''(v1, v2) <==> $IsEqual'vec'u8''($1_hash_sha3(v1), $1_hash_sha3(v2)));

procedure $1_hash_sha3_256(val: Vec int) returns (res: Vec int);
ensures res == $1_hash_sha3(val);     // returns Hash_sha3 Value
ensures $IsValid'vec'u8''(res);    // result is a legal vector of U8s.
ensures LenVec(res) == 32;               // result is 32 bytes.

// Spec version of Move native function.
function {:inline} $1_hash_$sha3_256(val: Vec int): Vec int {
    $1_hash_sha3(val)
}

// ==================================================================================
// Native string

// TODO: correct implementation of strings

procedure {:inline 1} $1_string_internal_check_utf8(x: Vec int) returns (r: bool) {
}

procedure {:inline 1} $1_string_internal_sub_string(x: Vec int, i: int, j: int) returns (r: Vec int) {
}

procedure {:inline 1} $1_string_internal_index_of(x: Vec int, y: Vec int) returns (r: int) {
}

procedure {:inline 1} $1_string_internal_is_char_boundary(x: Vec int, i: int) returns (r: bool) {
}




// ==================================================================================
// Native diem_account

procedure {:inline 1} $1_DiemAccount_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

procedure {:inline 1} $1_DiemAccount_destroy_signer(
  signer: $signer
) {
  return;
}

// ==================================================================================
// Native account

procedure {:inline 1} $1_Account_create_signer(
  addr: int
) returns (signer: $signer) {
    // A signer is currently identical to an address.
    signer := $signer(addr);
}

// ==================================================================================
// Native Signer

datatype $signer {
    $signer($addr: int)
}
function {:inline} $IsValid'signer'(s: $signer): bool {
    $IsValid'address'(s->$addr)
}
function {:inline} $IsEqual'signer'(s1: $signer, s2: $signer): bool {
    s1 == s2
}

procedure {:inline 1} $1_signer_borrow_address(signer: $signer) returns (res: int) {
    res := signer->$addr;
}

function {:inline} $1_signer_$borrow_address(signer: $signer): int
{
    signer->$addr
}

function $1_signer_is_txn_signer(s: $signer): bool;

function $1_signer_is_txn_signer_addr(a: int): bool;


// ==================================================================================
// Native signature

// Signature related functionality is handled via uninterpreted functions. This is sound
// currently because we verify every code path based on signature verification with
// an arbitrary interpretation.

function $1_Signature_$ed25519_validate_pubkey(public_key: Vec int): bool;
function $1_Signature_$ed25519_verify(signature: Vec int, public_key: Vec int, message: Vec int): bool;

// Needed because we do not have extensional equality:
axiom (forall k1, k2: Vec int ::
    {$1_Signature_$ed25519_validate_pubkey(k1), $1_Signature_$ed25519_validate_pubkey(k2)}
    $IsEqual'vec'u8''(k1, k2) ==> $1_Signature_$ed25519_validate_pubkey(k1) == $1_Signature_$ed25519_validate_pubkey(k2));
axiom (forall s1, s2, k1, k2, m1, m2: Vec int ::
    {$1_Signature_$ed25519_verify(s1, k1, m1), $1_Signature_$ed25519_verify(s2, k2, m2)}
    $IsEqual'vec'u8''(s1, s2) && $IsEqual'vec'u8''(k1, k2) && $IsEqual'vec'u8''(m1, m2)
    ==> $1_Signature_$ed25519_verify(s1, k1, m1) == $1_Signature_$ed25519_verify(s2, k2, m2));


procedure {:inline 1} $1_Signature_ed25519_validate_pubkey(public_key: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_validate_pubkey(public_key);
}

procedure {:inline 1} $1_Signature_ed25519_verify(
        signature: Vec int, public_key: Vec int, message: Vec int) returns (res: bool) {
    res := $1_Signature_$ed25519_verify(signature, public_key, message);
}


// ==================================================================================
// Native bcs::serialize

// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `#0`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'#0'(v: #0): Vec int;

axiom (forall v1, v2: #0 :: {$1_bcs_serialize'#0'(v1), $1_bcs_serialize'#0'(v2)}
   $IsEqual'#0'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'#0'(v1), $1_bcs_serialize'#0'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: #0 :: {$1_bcs_serialize'#0'(v)}
     ( var r := $1_bcs_serialize'#0'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'#0'(v: #0) returns (res: Vec int);
ensures res == $1_bcs_serialize'#0'(v);

function {:inline} $1_bcs_$to_bytes'#0'(v: #0): Vec int {
    $1_bcs_serialize'#0'(v)
}




// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `#1`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'#1'(v: #1): Vec int;

axiom (forall v1, v2: #1 :: {$1_bcs_serialize'#1'(v1), $1_bcs_serialize'#1'(v2)}
   $IsEqual'#1'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'#1'(v1), $1_bcs_serialize'#1'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: #1 :: {$1_bcs_serialize'#1'(v)}
     ( var r := $1_bcs_serialize'#1'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'#1'(v: #1) returns (res: Vec int);
ensures res == $1_bcs_serialize'#1'(v);

function {:inline} $1_bcs_$to_bytes'#1'(v: #1): Vec int {
    $1_bcs_serialize'#1'(v)
}




// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `$1_ethereum_EthereumAddress`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'$1_ethereum_EthereumAddress'(v: $1_ethereum_EthereumAddress): Vec int;

axiom (forall v1, v2: $1_ethereum_EthereumAddress :: {$1_bcs_serialize'$1_ethereum_EthereumAddress'(v1), $1_bcs_serialize'$1_ethereum_EthereumAddress'(v2)}
   $IsEqual'$1_ethereum_EthereumAddress'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'$1_ethereum_EthereumAddress'(v1), $1_bcs_serialize'$1_ethereum_EthereumAddress'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: $1_ethereum_EthereumAddress :: {$1_bcs_serialize'$1_ethereum_EthereumAddress'(v)}
     ( var r := $1_bcs_serialize'$1_ethereum_EthereumAddress'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'$1_ethereum_EthereumAddress'(v: $1_ethereum_EthereumAddress) returns (res: Vec int);
ensures res == $1_bcs_serialize'$1_ethereum_EthereumAddress'(v);

function {:inline} $1_bcs_$to_bytes'$1_ethereum_EthereumAddress'(v: $1_ethereum_EthereumAddress): Vec int {
    $1_bcs_serialize'$1_ethereum_EthereumAddress'(v)
}




// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `address`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'address'(v: int): Vec int;

axiom (forall v1, v2: int :: {$1_bcs_serialize'address'(v1), $1_bcs_serialize'address'(v2)}
   $IsEqual'address'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'address'(v1), $1_bcs_serialize'address'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: int :: {$1_bcs_serialize'address'(v)}
     ( var r := $1_bcs_serialize'address'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'address'(v: int) returns (res: Vec int);
ensures res == $1_bcs_serialize'address'(v);

function {:inline} $1_bcs_$to_bytes'address'(v: int): Vec int {
    $1_bcs_serialize'address'(v)
}

// Serialized addresses should have the same length.
const $serialized_address_len: int;
// Serialized addresses should have the same length
axiom (forall v: int :: {$1_bcs_serialize'address'(v)}
     ( var r := $1_bcs_serialize'address'(v); LenVec(r) == $serialized_address_len));



// ----------------------------------------------------------------------------------
// Native BCS implementation for element type `u64`

// Serialize is modeled as an uninterpreted function, with an additional
// axiom to say it's an injection.

function $1_bcs_serialize'u64'(v: int): Vec int;

axiom (forall v1, v2: int :: {$1_bcs_serialize'u64'(v1), $1_bcs_serialize'u64'(v2)}
   $IsEqual'u64'(v1, v2) <==> $IsEqual'vec'u8''($1_bcs_serialize'u64'(v1), $1_bcs_serialize'u64'(v2)));

// This says that serialize returns a non-empty vec<u8>

axiom (forall v: int :: {$1_bcs_serialize'u64'(v)}
     ( var r := $1_bcs_serialize'u64'(v); $IsValid'vec'u8''(r) && LenVec(r) > 0 ));


procedure $1_bcs_to_bytes'u64'(v: int) returns (res: Vec int);
ensures res == $1_bcs_serialize'u64'(v);

function {:inline} $1_bcs_$to_bytes'u64'(v: int): Vec int {
    $1_bcs_serialize'u64'(v)
}





// ==================================================================================
// Native Event module



procedure {:inline 1} $InitEventStore() {
}

// ============================================================================================
// Type Reflection on Type Parameters

datatype $TypeParamInfo {
    $TypeParamBool(),
    $TypeParamU8(),
    $TypeParamU16(),
    $TypeParamU32(),
    $TypeParamU64(),
    $TypeParamU128(),
    $TypeParamU256(),
    $TypeParamAddress(),
    $TypeParamSigner(),
    $TypeParamVector(e: $TypeParamInfo),
    $TypeParamStruct(a: int, m: Vec int, s: Vec int)
}



//==================================
// Begin Translation

function $TypeName(t: $TypeParamInfo): Vec int;
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamBool ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 98][1 := 111][2 := 111][3 := 108], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 98][1 := 111][2 := 111][3 := 108], 4)) ==> t is $TypeParamBool);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU8 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 56], 2)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 56], 2)) ==> t is $TypeParamU8);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU16 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 54], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 54], 3)) ==> t is $TypeParamU16);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU32 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 51][2 := 50], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 51][2 := 50], 3)) ==> t is $TypeParamU32);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU64 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 54][2 := 52], 3)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 54][2 := 52], 3)) ==> t is $TypeParamU64);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU128 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 50][3 := 56], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 49][2 := 50][3 := 56], 4)) ==> t is $TypeParamU128);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamU256 ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 50][2 := 53][3 := 54], 4)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 117][1 := 50][2 := 53][3 := 54], 4)) ==> t is $TypeParamU256);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamAddress ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 97][1 := 100][2 := 100][3 := 114][4 := 101][5 := 115][6 := 115], 7)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 97][1 := 100][2 := 100][3 := 114][4 := 101][5 := 115][6 := 115], 7)) ==> t is $TypeParamAddress);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamSigner ==> $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 115][1 := 105][2 := 103][3 := 110][4 := 101][5 := 114], 6)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsEqual'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 115][1 := 105][2 := 103][3 := 110][4 := 101][5 := 114], 6)) ==> t is $TypeParamSigner);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamVector ==> $IsEqual'vec'u8''($TypeName(t), ConcatVec(ConcatVec(Vec(DefaultVecMap()[0 := 118][1 := 101][2 := 99][3 := 116][4 := 111][5 := 114][6 := 60], 7), $TypeName(t->e)), Vec(DefaultVecMap()[0 := 62], 1))));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} ($IsPrefix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 118][1 := 101][2 := 99][3 := 116][4 := 111][5 := 114][6 := 60], 7)) && $IsSuffix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 62], 1))) ==> t is $TypeParamVector);
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} t is $TypeParamStruct ==> $IsEqual'vec'u8''($TypeName(t), ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(Vec(DefaultVecMap()[0 := 48][1 := 120], 2), MakeVec1(t->a)), Vec(DefaultVecMap()[0 := 58][1 := 58], 2)), t->m), Vec(DefaultVecMap()[0 := 58][1 := 58], 2)), t->s)));
axiom (forall t: $TypeParamInfo :: {$TypeName(t)} $IsPrefix'vec'u8''($TypeName(t), Vec(DefaultVecMap()[0 := 48][1 := 120], 2)) ==> t is $TypeParamVector);


// Given Types for Type Parameters

type #0;
function {:inline} $IsEqual'#0'(x1: #0, x2: #0): bool { x1 == x2 }
function {:inline} $IsValid'#0'(x: #0): bool { true }
var #0_info: $TypeParamInfo;
var #0_$memory: $Memory #0;
type #1;
function {:inline} $IsEqual'#1'(x1: #1, x2: #1): bool { x1 == x2 }
function {:inline} $IsValid'#1'(x: #1): bool { true }
var #1_info: $TypeParamInfo;
var #1_$memory: $Memory #1;

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <bool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'bool'(b1), $1_from_bcs_deserializable'bool'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u8>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u8'(b1), $1_from_bcs_deserializable'u8'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u64>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u64'(b1), $1_from_bcs_deserializable'u64'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u128>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u128'(b1), $1_from_bcs_deserializable'u128'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <u256>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'u256'(b1), $1_from_bcs_deserializable'u256'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <address>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'address'(b1), $1_from_bcs_deserializable'address'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <signer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'signer'(b1), $1_from_bcs_deserializable'signer'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<u8>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'u8''(b1), $1_from_bcs_deserializable'vec'u8''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'u128''(b1), $1_from_bcs_deserializable'vec'u128''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<aggregator::Aggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_aggregator_Aggregator''(b1), $1_from_bcs_deserializable'vec'$1_aggregator_Aggregator''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<object::Object<fungible_asset::Metadata>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_object_Object'$1_fungible_asset_Metadata'''(b1), $1_from_bcs_deserializable'vec'$1_object_Object'$1_fungible_asset_Metadata'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<optional_aggregator::Integer>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_optional_aggregator_Integer''(b1), $1_from_bcs_deserializable'vec'$1_optional_aggregator_Integer''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<optional_aggregator::OptionalAggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_optional_aggregator_OptionalAggregator''(b1), $1_from_bcs_deserializable'vec'$1_optional_aggregator_OptionalAggregator''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<function_info::FunctionInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_function_info_FunctionInfo''(b1), $1_from_bcs_deserializable'vec'$1_function_info_FunctionInfo''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<fungible_asset::TransferRef>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_fungible_asset_TransferRef''(b1), $1_from_bcs_deserializable'vec'$1_fungible_asset_TransferRef''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<fungible_asset::BurnRef>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_fungible_asset_BurnRef''(b1), $1_from_bcs_deserializable'vec'$1_fungible_asset_BurnRef''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<fungible_asset::FungibleStore>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_fungible_asset_FungibleStore''(b1), $1_from_bcs_deserializable'vec'$1_fungible_asset_FungibleStore''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<fungible_asset::MintRef>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_fungible_asset_MintRef''(b1), $1_from_bcs_deserializable'vec'$1_fungible_asset_MintRef''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'vec'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <vector<#0>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'vec'#0''(b1), $1_from_bcs_deserializable'vec'#0''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'u128''(b1), $1_from_bcs_deserializable'$1_option_Option'u128''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<aggregator::Aggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_aggregator_Aggregator''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_aggregator_Aggregator''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<object::Object<fungible_asset::Metadata>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<optional_aggregator::Integer>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_Integer''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_Integer''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<optional_aggregator::OptionalAggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<function_info::FunctionInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_function_info_FunctionInfo''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_function_info_FunctionInfo''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<fungible_asset::TransferRef>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_fungible_asset_TransferRef''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_fungible_asset_TransferRef''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<fungible_asset::BurnRef>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_fungible_asset_BurnRef''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_fungible_asset_BurnRef''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <option::Option<fungible_asset::MintRef>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_option_Option'$1_fungible_asset_MintRef''(b1), $1_from_bcs_deserializable'$1_option_Option'$1_fungible_asset_MintRef''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <string::String>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_string_String'(b1), $1_from_bcs_deserializable'$1_string_String'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <features::Features>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_features_Features'(b1), $1_from_bcs_deserializable'$1_features_Features'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <type_info::TypeInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_type_info_TypeInfo'(b1), $1_from_bcs_deserializable'$1_type_info_TypeInfo'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <table::Table<type_info::TypeInfo, object::Object<fungible_asset::Metadata>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_table_Table'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata'''(b1), $1_from_bcs_deserializable'$1_table_Table'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <guid::GUID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_guid_GUID'(b1), $1_from_bcs_deserializable'$1_guid_GUID'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <guid::ID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_guid_ID'(b1), $1_from_bcs_deserializable'$1_guid_ID'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<object::TransferEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_object_TransferEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_object_TransferEvent''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<coin::DepositEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_DepositEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_DepositEvent''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<coin::WithdrawEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_WithdrawEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_WithdrawEvent''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <event::EventHandle<reconfiguration::NewEpochEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b1), $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <aggregator::Aggregator>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_aggregator_Aggregator'(b1), $1_from_bcs_deserializable'$1_aggregator_Aggregator'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <aggregator_v2::Aggregator<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u64''(b1), $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u64''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <aggregator_v2::Aggregator<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u128''(b1), $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u128''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <object::ConstructorRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_ConstructorRef'(b1), $1_from_bcs_deserializable'$1_object_ConstructorRef'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <object::DeriveRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_DeriveRef'(b1), $1_from_bcs_deserializable'$1_object_DeriveRef'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <object::Object<fungible_asset::FungibleStore>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_FungibleStore''(b1), $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_FungibleStore''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <object::Object<fungible_asset::Metadata>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(b1), $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <object::ObjectCore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_ObjectCore'(b1), $1_from_bcs_deserializable'$1_object_ObjectCore'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <object::TransferRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_TransferRef'(b1), $1_from_bcs_deserializable'$1_object_TransferRef'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <object::Untransferable>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_object_Untransferable'(b1), $1_from_bcs_deserializable'$1_object_Untransferable'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <optional_aggregator::Integer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_optional_aggregator_Integer'(b1), $1_from_bcs_deserializable'$1_optional_aggregator_Integer'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <optional_aggregator::OptionalAggregator>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_optional_aggregator_OptionalAggregator'(b1), $1_from_bcs_deserializable'$1_optional_aggregator_OptionalAggregator'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <function_info::FunctionInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_function_info_FunctionInfo'(b1), $1_from_bcs_deserializable'$1_function_info_FunctionInfo'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <fungible_asset::TransferRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_TransferRef'(b1), $1_from_bcs_deserializable'$1_fungible_asset_TransferRef'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <fungible_asset::Untransferable>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Untransferable'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Untransferable'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <fungible_asset::BurnRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(b1), $1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <fungible_asset::ConcurrentFungibleBalance>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_ConcurrentFungibleBalance'(b1), $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentFungibleBalance'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <fungible_asset::ConcurrentSupply>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_ConcurrentSupply'(b1), $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentSupply'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <fungible_asset::Deposit>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Deposit'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Deposit'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <fungible_asset::DispatchFunctionStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_DispatchFunctionStore'(b1), $1_from_bcs_deserializable'$1_fungible_asset_DispatchFunctionStore'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <fungible_asset::FungibleAsset>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_FungibleAsset'(b1), $1_from_bcs_deserializable'$1_fungible_asset_FungibleAsset'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <fungible_asset::FungibleStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_FungibleStore'(b1), $1_from_bcs_deserializable'$1_fungible_asset_FungibleStore'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <fungible_asset::Metadata>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Metadata'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Metadata'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <fungible_asset::MintRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_MintRef'(b1), $1_from_bcs_deserializable'$1_fungible_asset_MintRef'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <fungible_asset::Supply>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Supply'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Supply'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <fungible_asset::Withdraw>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_fungible_asset_Withdraw'(b1), $1_from_bcs_deserializable'$1_fungible_asset_Withdraw'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <dispatchable_fungible_asset::TransferRefStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_dispatchable_fungible_asset_TransferRefStore'(b1), $1_from_bcs_deserializable'$1_dispatchable_fungible_asset_TransferRefStore'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <primary_fungible_store::DeriveRefPod>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_primary_fungible_store_DeriveRefPod'(b1), $1_from_bcs_deserializable'$1_primary_fungible_store_DeriveRefPod'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::DepositEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_DepositEvent'(b1), $1_from_bcs_deserializable'$1_coin_DepositEvent'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::BurnCapability<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::Coin<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_Coin'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_Coin'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::CoinConversionMap>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_CoinConversionMap'(b1), $1_from_bcs_deserializable'$1_coin_CoinConversionMap'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::CoinDeposit>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_CoinDeposit'(b1), $1_from_bcs_deserializable'$1_coin_CoinDeposit'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::CoinInfo<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::CoinStore<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::MigrationFlag>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_MigrationFlag'(b1), $1_from_bcs_deserializable'$1_coin_MigrationFlag'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::MintCapability<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::PairCreation>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_PairCreation'(b1), $1_from_bcs_deserializable'$1_coin_PairCreation'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::PairedCoinType>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_PairedCoinType'(b1), $1_from_bcs_deserializable'$1_coin_PairedCoinType'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::PairedFungibleAssetRefs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_PairedFungibleAssetRefs'(b1), $1_from_bcs_deserializable'$1_coin_PairedFungibleAssetRefs'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::Ghost$supply<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserializable'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <aptos_coin::AptosCoin>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_aptos_coin_AptosCoin'(b1), $1_from_bcs_deserializable'$1_aptos_coin_AptosCoin'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <chain_status::GenesisEndMarker>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(b1), $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <timestamp::CurrentTimeMicroseconds>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(b1), $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(b1), $1_from_bcs_deserializable'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(b1), $1_from_bcs_deserializable'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(b1), $1_from_bcs_deserializable'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <reconfiguration::Configuration>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_reconfiguration_Configuration'(b1), $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <ethereum::EthereumAddress>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_ethereum_EthereumAddress'(b1), $1_from_bcs_deserializable'$1_ethereum_EthereumAddress'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_store::AddressPair<address, ethereum::EthereumAddress>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''(b1), $1_from_bcs_deserializable'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_store::AddressPair<ethereum::EthereumAddress, address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''(b1), $1_from_bcs_deserializable'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_store::AddressPair<#0, #1>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_store_AddressPair'#0_#1''(b1), $1_from_bcs_deserializable'$1_atomic_bridge_store_AddressPair'#0_#1''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(b1), $1_from_bcs_deserializable'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(b1), $1_from_bcs_deserializable'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_store::BridgeTransferDetails<#0, #1>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(b1), $1_from_bcs_deserializable'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_store::Nonce>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_store_Nonce'(b1), $1_from_bcs_deserializable'$1_atomic_bridge_store_Nonce'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(b1), $1_from_bcs_deserializable'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(b1), $1_from_bcs_deserializable'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(b1), $1_from_bcs_deserializable'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_configuration::BridgeConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_configuration_BridgeConfig'(b1), $1_from_bcs_deserializable'$1_atomic_bridge_configuration_BridgeConfig'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_configuration::BridgeConfigOperatorUpdated>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_configuration_BridgeConfigOperatorUpdated'(b1), $1_from_bcs_deserializable'$1_atomic_bridge_configuration_BridgeConfigOperatorUpdated'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_configuration::CounterpartyTimeLockUpdated>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_configuration_CounterpartyTimeLockUpdated'(b1), $1_from_bcs_deserializable'$1_atomic_bridge_configuration_CounterpartyTimeLockUpdated'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_configuration::InitiatorTimeLockUpdated>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_configuration_InitiatorTimeLockUpdated'(b1), $1_from_bcs_deserializable'$1_atomic_bridge_configuration_InitiatorTimeLockUpdated'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge::AptosCoinMintCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_AptosCoinMintCapability'(b1), $1_from_bcs_deserializable'$1_atomic_bridge_AptosCoinMintCapability'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge::AptosFABurnCapabilities>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_AptosFABurnCapabilities'(b1), $1_from_bcs_deserializable'$1_atomic_bridge_AptosFABurnCapabilities'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge::AptosCoinBurnCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_AptosCoinBurnCapability'(b1), $1_from_bcs_deserializable'$1_atomic_bridge_AptosCoinBurnCapability'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_counterparty::BridgeTransferCancelledEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_counterparty_BridgeTransferCancelledEvent'(b1), $1_from_bcs_deserializable'$1_atomic_bridge_counterparty_BridgeTransferCancelledEvent'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_counterparty::BridgeTransferCompletedEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_counterparty_BridgeTransferCompletedEvent'(b1), $1_from_bcs_deserializable'$1_atomic_bridge_counterparty_BridgeTransferCompletedEvent'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_counterparty::BridgeTransferLockedEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'(b1), $1_from_bcs_deserializable'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_initiator::BridgeTransferCompletedEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_initiator_BridgeTransferCompletedEvent'(b1), $1_from_bcs_deserializable'$1_atomic_bridge_initiator_BridgeTransferCompletedEvent'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_initiator::BridgeTransferInitiatedEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'(b1), $1_from_bcs_deserializable'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <atomic_bridge_initiator::BridgeTransferRefundedEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'$1_atomic_bridge_initiator_BridgeTransferRefundedEvent'(b1), $1_from_bcs_deserializable'$1_atomic_bridge_initiator_BridgeTransferRefundedEvent'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <#0>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'#0'(b1), $1_from_bcs_deserializable'#0'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:18:9+124, instance <#1>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserializable'#1'(b1), $1_from_bcs_deserializable'#1'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <bool>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'bool'($1_from_bcs_deserialize'bool'(b1), $1_from_bcs_deserialize'bool'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u8>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u8'($1_from_bcs_deserialize'u8'(b1), $1_from_bcs_deserialize'u8'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u64>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u64'($1_from_bcs_deserialize'u64'(b1), $1_from_bcs_deserialize'u64'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u128>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u128'($1_from_bcs_deserialize'u128'(b1), $1_from_bcs_deserialize'u128'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <u256>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'u256'($1_from_bcs_deserialize'u256'(b1), $1_from_bcs_deserialize'u256'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <address>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'address'($1_from_bcs_deserialize'address'(b1), $1_from_bcs_deserialize'address'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <signer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'signer'($1_from_bcs_deserialize'signer'(b1), $1_from_bcs_deserialize'signer'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<u8>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'u8''($1_from_bcs_deserialize'vec'u8''(b1), $1_from_bcs_deserialize'vec'u8''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'u128''($1_from_bcs_deserialize'vec'u128''(b1), $1_from_bcs_deserialize'vec'u128''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<aggregator::Aggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_aggregator_Aggregator''($1_from_bcs_deserialize'vec'$1_aggregator_Aggregator''(b1), $1_from_bcs_deserialize'vec'$1_aggregator_Aggregator''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<object::Object<fungible_asset::Metadata>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_object_Object'$1_fungible_asset_Metadata'''($1_from_bcs_deserialize'vec'$1_object_Object'$1_fungible_asset_Metadata'''(b1), $1_from_bcs_deserialize'vec'$1_object_Object'$1_fungible_asset_Metadata'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<optional_aggregator::Integer>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_optional_aggregator_Integer''($1_from_bcs_deserialize'vec'$1_optional_aggregator_Integer''(b1), $1_from_bcs_deserialize'vec'$1_optional_aggregator_Integer''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<optional_aggregator::OptionalAggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_optional_aggregator_OptionalAggregator''($1_from_bcs_deserialize'vec'$1_optional_aggregator_OptionalAggregator''(b1), $1_from_bcs_deserialize'vec'$1_optional_aggregator_OptionalAggregator''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<function_info::FunctionInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_function_info_FunctionInfo''($1_from_bcs_deserialize'vec'$1_function_info_FunctionInfo''(b1), $1_from_bcs_deserialize'vec'$1_function_info_FunctionInfo''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<fungible_asset::TransferRef>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_fungible_asset_TransferRef''($1_from_bcs_deserialize'vec'$1_fungible_asset_TransferRef''(b1), $1_from_bcs_deserialize'vec'$1_fungible_asset_TransferRef''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<fungible_asset::BurnRef>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_fungible_asset_BurnRef''($1_from_bcs_deserialize'vec'$1_fungible_asset_BurnRef''(b1), $1_from_bcs_deserialize'vec'$1_fungible_asset_BurnRef''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<fungible_asset::FungibleStore>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_fungible_asset_FungibleStore''($1_from_bcs_deserialize'vec'$1_fungible_asset_FungibleStore''(b1), $1_from_bcs_deserialize'vec'$1_fungible_asset_FungibleStore''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<fungible_asset::MintRef>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_fungible_asset_MintRef''($1_from_bcs_deserialize'vec'$1_fungible_asset_MintRef''(b1), $1_from_bcs_deserialize'vec'$1_fungible_asset_MintRef''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'vec'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'vec'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <vector<#0>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'vec'#0''($1_from_bcs_deserialize'vec'#0''(b1), $1_from_bcs_deserialize'vec'#0''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'u128''($1_from_bcs_deserialize'$1_option_Option'u128''(b1), $1_from_bcs_deserialize'$1_option_Option'u128''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<aggregator::Aggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_aggregator_Aggregator''($1_from_bcs_deserialize'$1_option_Option'$1_aggregator_Aggregator''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_aggregator_Aggregator''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<object::Object<fungible_asset::Metadata>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''($1_from_bcs_deserialize'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<optional_aggregator::Integer>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_optional_aggregator_Integer''($1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_Integer''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_Integer''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<optional_aggregator::OptionalAggregator>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_optional_aggregator_OptionalAggregator''($1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<function_info::FunctionInfo>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_function_info_FunctionInfo''($1_from_bcs_deserialize'$1_option_Option'$1_function_info_FunctionInfo''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_function_info_FunctionInfo''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<fungible_asset::TransferRef>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_fungible_asset_TransferRef''($1_from_bcs_deserialize'$1_option_Option'$1_fungible_asset_TransferRef''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_fungible_asset_TransferRef''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<fungible_asset::BurnRef>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_fungible_asset_BurnRef''($1_from_bcs_deserialize'$1_option_Option'$1_fungible_asset_BurnRef''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_fungible_asset_BurnRef''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <option::Option<fungible_asset::MintRef>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_option_Option'$1_fungible_asset_MintRef''($1_from_bcs_deserialize'$1_option_Option'$1_fungible_asset_MintRef''(b1), $1_from_bcs_deserialize'$1_option_Option'$1_fungible_asset_MintRef''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <string::String>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_string_String'($1_from_bcs_deserialize'$1_string_String'(b1), $1_from_bcs_deserialize'$1_string_String'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <features::Features>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_features_Features'($1_from_bcs_deserialize'$1_features_Features'(b1), $1_from_bcs_deserialize'$1_features_Features'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <type_info::TypeInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_type_info_TypeInfo'($1_from_bcs_deserialize'$1_type_info_TypeInfo'(b1), $1_from_bcs_deserialize'$1_type_info_TypeInfo'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <table::Table<type_info::TypeInfo, object::Object<fungible_asset::Metadata>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_table_Table'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata'''($1_from_bcs_deserialize'$1_table_Table'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata'''(b1), $1_from_bcs_deserialize'$1_table_Table'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <guid::GUID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_guid_GUID'($1_from_bcs_deserialize'$1_guid_GUID'(b1), $1_from_bcs_deserialize'$1_guid_GUID'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <guid::ID>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_guid_ID'($1_from_bcs_deserialize'$1_guid_ID'(b1), $1_from_bcs_deserialize'$1_guid_ID'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<object::TransferEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_object_TransferEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_object_TransferEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_object_TransferEvent''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<coin::DepositEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_coin_DepositEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_DepositEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_DepositEvent''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<coin::WithdrawEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_coin_WithdrawEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_WithdrawEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_WithdrawEvent''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <event::EventHandle<reconfiguration::NewEpochEvent>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''($1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b1), $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <aggregator::Aggregator>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_aggregator_Aggregator'($1_from_bcs_deserialize'$1_aggregator_Aggregator'(b1), $1_from_bcs_deserialize'$1_aggregator_Aggregator'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <aggregator_v2::Aggregator<u64>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_aggregator_v2_Aggregator'u64''($1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u64''(b1), $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u64''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <aggregator_v2::Aggregator<u128>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_aggregator_v2_Aggregator'u128''($1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u128''(b1), $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u128''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <object::ConstructorRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_ConstructorRef'($1_from_bcs_deserialize'$1_object_ConstructorRef'(b1), $1_from_bcs_deserialize'$1_object_ConstructorRef'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <object::DeriveRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_DeriveRef'($1_from_bcs_deserialize'$1_object_DeriveRef'(b1), $1_from_bcs_deserialize'$1_object_DeriveRef'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <object::Object<fungible_asset::FungibleStore>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_Object'$1_fungible_asset_FungibleStore''($1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_FungibleStore''(b1), $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_FungibleStore''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <object::Object<fungible_asset::Metadata>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(b1), $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <object::ObjectCore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_ObjectCore'($1_from_bcs_deserialize'$1_object_ObjectCore'(b1), $1_from_bcs_deserialize'$1_object_ObjectCore'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <object::TransferRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_TransferRef'($1_from_bcs_deserialize'$1_object_TransferRef'(b1), $1_from_bcs_deserialize'$1_object_TransferRef'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <object::Untransferable>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_object_Untransferable'($1_from_bcs_deserialize'$1_object_Untransferable'(b1), $1_from_bcs_deserialize'$1_object_Untransferable'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <optional_aggregator::Integer>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_optional_aggregator_Integer'($1_from_bcs_deserialize'$1_optional_aggregator_Integer'(b1), $1_from_bcs_deserialize'$1_optional_aggregator_Integer'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <optional_aggregator::OptionalAggregator>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_optional_aggregator_OptionalAggregator'($1_from_bcs_deserialize'$1_optional_aggregator_OptionalAggregator'(b1), $1_from_bcs_deserialize'$1_optional_aggregator_OptionalAggregator'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <function_info::FunctionInfo>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_function_info_FunctionInfo'($1_from_bcs_deserialize'$1_function_info_FunctionInfo'(b1), $1_from_bcs_deserialize'$1_function_info_FunctionInfo'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <fungible_asset::TransferRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_TransferRef'($1_from_bcs_deserialize'$1_fungible_asset_TransferRef'(b1), $1_from_bcs_deserialize'$1_fungible_asset_TransferRef'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <fungible_asset::Untransferable>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Untransferable'($1_from_bcs_deserialize'$1_fungible_asset_Untransferable'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Untransferable'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <fungible_asset::BurnRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_BurnRef'($1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(b1), $1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <fungible_asset::ConcurrentFungibleBalance>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_ConcurrentFungibleBalance'($1_from_bcs_deserialize'$1_fungible_asset_ConcurrentFungibleBalance'(b1), $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentFungibleBalance'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <fungible_asset::ConcurrentSupply>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_ConcurrentSupply'($1_from_bcs_deserialize'$1_fungible_asset_ConcurrentSupply'(b1), $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentSupply'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <fungible_asset::Deposit>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Deposit'($1_from_bcs_deserialize'$1_fungible_asset_Deposit'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Deposit'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <fungible_asset::DispatchFunctionStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_DispatchFunctionStore'($1_from_bcs_deserialize'$1_fungible_asset_DispatchFunctionStore'(b1), $1_from_bcs_deserialize'$1_fungible_asset_DispatchFunctionStore'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <fungible_asset::FungibleAsset>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_FungibleAsset'($1_from_bcs_deserialize'$1_fungible_asset_FungibleAsset'(b1), $1_from_bcs_deserialize'$1_fungible_asset_FungibleAsset'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <fungible_asset::FungibleStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_FungibleStore'($1_from_bcs_deserialize'$1_fungible_asset_FungibleStore'(b1), $1_from_bcs_deserialize'$1_fungible_asset_FungibleStore'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <fungible_asset::Metadata>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Metadata'($1_from_bcs_deserialize'$1_fungible_asset_Metadata'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Metadata'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <fungible_asset::MintRef>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_MintRef'($1_from_bcs_deserialize'$1_fungible_asset_MintRef'(b1), $1_from_bcs_deserialize'$1_fungible_asset_MintRef'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <fungible_asset::Supply>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Supply'($1_from_bcs_deserialize'$1_fungible_asset_Supply'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Supply'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <fungible_asset::Withdraw>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_fungible_asset_Withdraw'($1_from_bcs_deserialize'$1_fungible_asset_Withdraw'(b1), $1_from_bcs_deserialize'$1_fungible_asset_Withdraw'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <dispatchable_fungible_asset::TransferRefStore>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_dispatchable_fungible_asset_TransferRefStore'($1_from_bcs_deserialize'$1_dispatchable_fungible_asset_TransferRefStore'(b1), $1_from_bcs_deserialize'$1_dispatchable_fungible_asset_TransferRefStore'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <primary_fungible_store::DeriveRefPod>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_primary_fungible_store_DeriveRefPod'($1_from_bcs_deserialize'$1_primary_fungible_store_DeriveRefPod'(b1), $1_from_bcs_deserialize'$1_primary_fungible_store_DeriveRefPod'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::DepositEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_DepositEvent'($1_from_bcs_deserialize'$1_coin_DepositEvent'(b1), $1_from_bcs_deserialize'$1_coin_DepositEvent'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::BurnCapability<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::Coin<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_Coin'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_Coin'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_Coin'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::CoinConversionMap>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_CoinConversionMap'($1_from_bcs_deserialize'$1_coin_CoinConversionMap'(b1), $1_from_bcs_deserialize'$1_coin_CoinConversionMap'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::CoinDeposit>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_CoinDeposit'($1_from_bcs_deserialize'$1_coin_CoinDeposit'(b1), $1_from_bcs_deserialize'$1_coin_CoinDeposit'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::CoinInfo<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::CoinStore<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::MigrationFlag>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_MigrationFlag'($1_from_bcs_deserialize'$1_coin_MigrationFlag'(b1), $1_from_bcs_deserialize'$1_coin_MigrationFlag'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::MintCapability<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::PairCreation>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_PairCreation'($1_from_bcs_deserialize'$1_coin_PairCreation'(b1), $1_from_bcs_deserialize'$1_coin_PairCreation'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::PairedCoinType>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_PairedCoinType'($1_from_bcs_deserialize'$1_coin_PairedCoinType'(b1), $1_from_bcs_deserialize'$1_coin_PairedCoinType'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::PairedFungibleAssetRefs>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_PairedFungibleAssetRefs'($1_from_bcs_deserialize'$1_coin_PairedFungibleAssetRefs'(b1), $1_from_bcs_deserialize'$1_coin_PairedFungibleAssetRefs'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::Ghost$supply<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($1_from_bcs_deserialize'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(b1), $1_from_bcs_deserialize'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <aptos_coin::AptosCoin>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_aptos_coin_AptosCoin'($1_from_bcs_deserialize'$1_aptos_coin_AptosCoin'(b1), $1_from_bcs_deserialize'$1_aptos_coin_AptosCoin'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <chain_status::GenesisEndMarker>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_chain_status_GenesisEndMarker'($1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(b1), $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <timestamp::CurrentTimeMicroseconds>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_timestamp_CurrentTimeMicroseconds'($1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(b1), $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''($1_from_bcs_deserialize'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(b1), $1_from_bcs_deserialize'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''($1_from_bcs_deserialize'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(b1), $1_from_bcs_deserialize'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''($1_from_bcs_deserialize'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(b1), $1_from_bcs_deserialize'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <reconfiguration::Configuration>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_reconfiguration_Configuration'($1_from_bcs_deserialize'$1_reconfiguration_Configuration'(b1), $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <ethereum::EthereumAddress>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_ethereum_EthereumAddress'($1_from_bcs_deserialize'$1_ethereum_EthereumAddress'(b1), $1_from_bcs_deserialize'$1_ethereum_EthereumAddress'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_store::AddressPair<address, ethereum::EthereumAddress>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''($1_from_bcs_deserialize'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''(b1), $1_from_bcs_deserialize'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_store::AddressPair<ethereum::EthereumAddress, address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''($1_from_bcs_deserialize'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''(b1), $1_from_bcs_deserialize'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_store::AddressPair<#0, #1>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_store_AddressPair'#0_#1''($1_from_bcs_deserialize'$1_atomic_bridge_store_AddressPair'#0_#1''(b1), $1_from_bcs_deserialize'$1_atomic_bridge_store_AddressPair'#0_#1''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''($1_from_bcs_deserialize'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(b1), $1_from_bcs_deserialize'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''($1_from_bcs_deserialize'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(b1), $1_from_bcs_deserialize'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_store::BridgeTransferDetails<#0, #1>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($1_from_bcs_deserialize'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(b1), $1_from_bcs_deserialize'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_store::Nonce>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_store_Nonce'($1_from_bcs_deserialize'$1_atomic_bridge_store_Nonce'(b1), $1_from_bcs_deserialize'$1_atomic_bridge_store_Nonce'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''($1_from_bcs_deserialize'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(b1), $1_from_bcs_deserialize'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''($1_from_bcs_deserialize'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(b1), $1_from_bcs_deserialize'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''($1_from_bcs_deserialize'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(b1), $1_from_bcs_deserialize'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_configuration::BridgeConfig>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_configuration_BridgeConfig'($1_from_bcs_deserialize'$1_atomic_bridge_configuration_BridgeConfig'(b1), $1_from_bcs_deserialize'$1_atomic_bridge_configuration_BridgeConfig'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_configuration::BridgeConfigOperatorUpdated>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_configuration_BridgeConfigOperatorUpdated'($1_from_bcs_deserialize'$1_atomic_bridge_configuration_BridgeConfigOperatorUpdated'(b1), $1_from_bcs_deserialize'$1_atomic_bridge_configuration_BridgeConfigOperatorUpdated'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_configuration::CounterpartyTimeLockUpdated>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_configuration_CounterpartyTimeLockUpdated'($1_from_bcs_deserialize'$1_atomic_bridge_configuration_CounterpartyTimeLockUpdated'(b1), $1_from_bcs_deserialize'$1_atomic_bridge_configuration_CounterpartyTimeLockUpdated'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_configuration::InitiatorTimeLockUpdated>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_configuration_InitiatorTimeLockUpdated'($1_from_bcs_deserialize'$1_atomic_bridge_configuration_InitiatorTimeLockUpdated'(b1), $1_from_bcs_deserialize'$1_atomic_bridge_configuration_InitiatorTimeLockUpdated'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge::AptosCoinMintCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_AptosCoinMintCapability'($1_from_bcs_deserialize'$1_atomic_bridge_AptosCoinMintCapability'(b1), $1_from_bcs_deserialize'$1_atomic_bridge_AptosCoinMintCapability'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge::AptosFABurnCapabilities>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_AptosFABurnCapabilities'($1_from_bcs_deserialize'$1_atomic_bridge_AptosFABurnCapabilities'(b1), $1_from_bcs_deserialize'$1_atomic_bridge_AptosFABurnCapabilities'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge::AptosCoinBurnCapability>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_AptosCoinBurnCapability'($1_from_bcs_deserialize'$1_atomic_bridge_AptosCoinBurnCapability'(b1), $1_from_bcs_deserialize'$1_atomic_bridge_AptosCoinBurnCapability'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_counterparty::BridgeTransferCancelledEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_counterparty_BridgeTransferCancelledEvent'($1_from_bcs_deserialize'$1_atomic_bridge_counterparty_BridgeTransferCancelledEvent'(b1), $1_from_bcs_deserialize'$1_atomic_bridge_counterparty_BridgeTransferCancelledEvent'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_counterparty::BridgeTransferCompletedEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_counterparty_BridgeTransferCompletedEvent'($1_from_bcs_deserialize'$1_atomic_bridge_counterparty_BridgeTransferCompletedEvent'(b1), $1_from_bcs_deserialize'$1_atomic_bridge_counterparty_BridgeTransferCompletedEvent'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_counterparty::BridgeTransferLockedEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'($1_from_bcs_deserialize'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'(b1), $1_from_bcs_deserialize'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_initiator::BridgeTransferCompletedEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_initiator_BridgeTransferCompletedEvent'($1_from_bcs_deserialize'$1_atomic_bridge_initiator_BridgeTransferCompletedEvent'(b1), $1_from_bcs_deserialize'$1_atomic_bridge_initiator_BridgeTransferCompletedEvent'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_initiator::BridgeTransferInitiatedEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'($1_from_bcs_deserialize'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'(b1), $1_from_bcs_deserialize'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <atomic_bridge_initiator::BridgeTransferRefundedEvent>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'$1_atomic_bridge_initiator_BridgeTransferRefundedEvent'($1_from_bcs_deserialize'$1_atomic_bridge_initiator_BridgeTransferRefundedEvent'(b1), $1_from_bcs_deserialize'$1_atomic_bridge_initiator_BridgeTransferRefundedEvent'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <#0>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'#0'($1_from_bcs_deserialize'#0'(b1), $1_from_bcs_deserialize'#0'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:21:9+118, instance <#1>
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''(b1, b2) ==> $IsEqual'#1'($1_from_bcs_deserialize'#1'(b1), $1_from_bcs_deserialize'#1'(b2)))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:8:9+113
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_keccak256(b1), $1_aptos_hash_spec_keccak256(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:13:9+129
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_sha2_512_internal(b1), $1_aptos_hash_spec_sha2_512_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:18:9+129
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_sha3_512_internal(b1), $1_aptos_hash_spec_sha3_512_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:23:9+131
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_ripemd160_internal(b1), $1_aptos_hash_spec_ripemd160_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// axiom at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:28:9+135
axiom (forall b1: Vec (int), b2: Vec (int) :: $IsValid'vec'u8''(b1) ==> $IsValid'vec'u8''(b2) ==> (($IsEqual'vec'u8''($1_aptos_hash_spec_blake2b_256_internal(b1), $1_aptos_hash_spec_blake2b_256_internal(b2)) ==> $IsEqual'vec'u8''(b1, b2))));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:152:5+86
function {:inline} $1_vector_$is_empty'u128'(v: Vec (int)): bool {
    $IsEqual'u64'($1_vector_$length'u128'(v), 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:152:5+86
function {:inline} $1_vector_$is_empty'$1_aggregator_Aggregator'(v: Vec ($1_aggregator_Aggregator)): bool {
    $IsEqual'u64'($1_vector_$length'$1_aggregator_Aggregator'(v), 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:152:5+86
function {:inline} $1_vector_$is_empty'$1_object_Object'$1_fungible_asset_Metadata''(v: Vec ($1_object_Object'$1_fungible_asset_Metadata')): bool {
    $IsEqual'u64'($1_vector_$length'$1_object_Object'$1_fungible_asset_Metadata''(v), 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:152:5+86
function {:inline} $1_vector_$is_empty'$1_optional_aggregator_Integer'(v: Vec ($1_optional_aggregator_Integer)): bool {
    $IsEqual'u64'($1_vector_$length'$1_optional_aggregator_Integer'(v), 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:152:5+86
function {:inline} $1_vector_$is_empty'$1_optional_aggregator_OptionalAggregator'(v: Vec ($1_optional_aggregator_OptionalAggregator)): bool {
    $IsEqual'u64'($1_vector_$length'$1_optional_aggregator_OptionalAggregator'(v), 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:152:5+86
function {:inline} $1_vector_$is_empty'$1_function_info_FunctionInfo'(v: Vec ($1_function_info_FunctionInfo)): bool {
    $IsEqual'u64'($1_vector_$length'$1_function_info_FunctionInfo'(v), 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:152:5+86
function {:inline} $1_vector_$is_empty'$1_fungible_asset_BurnRef'(v: Vec ($1_fungible_asset_BurnRef)): bool {
    $IsEqual'u64'($1_vector_$length'$1_fungible_asset_BurnRef'(v), 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:34:10+78
function {:inline} $1_option_spec_none'u128'(): $1_option_Option'u128' {
    $1_option_Option'u128'($EmptyVec'u128'())
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:34:10+78
function {:inline} $1_option_spec_none'$1_object_Object'$1_fungible_asset_Metadata''(): $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'' {
    $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata''($EmptyVec'$1_object_Object'$1_fungible_asset_Metadata''())
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:34:10+78
function {:inline} $1_option_spec_none'$1_function_info_FunctionInfo'(): $1_option_Option'$1_function_info_FunctionInfo' {
    $1_option_Option'$1_function_info_FunctionInfo'($EmptyVec'$1_function_info_FunctionInfo'())
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:47:10+89
function {:inline} $1_option_spec_some'u128'(e: int): $1_option_Option'u128' {
    $1_option_Option'u128'(MakeVec1(e))
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:47:10+89
function {:inline} $1_option_spec_some'$1_object_Object'$1_fungible_asset_Metadata''(e: $1_object_Object'$1_fungible_asset_Metadata'): $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'' {
    $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata''(MakeVec1(e))
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:47:10+89
function {:inline} $1_option_spec_some'$1_fungible_asset_TransferRef'(e: $1_fungible_asset_TransferRef): $1_option_Option'$1_fungible_asset_TransferRef' {
    $1_option_Option'$1_fungible_asset_TransferRef'(MakeVec1(e))
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:47:10+89
function {:inline} $1_option_spec_some'$1_fungible_asset_BurnRef'(e: $1_fungible_asset_BurnRef): $1_option_Option'$1_fungible_asset_BurnRef' {
    $1_option_Option'$1_fungible_asset_BurnRef'(MakeVec1(e))
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:47:10+89
function {:inline} $1_option_spec_some'$1_fungible_asset_MintRef'(e: $1_fungible_asset_MintRef): $1_option_Option'$1_fungible_asset_MintRef' {
    $1_option_Option'$1_fungible_asset_MintRef'(MakeVec1(e))
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:69:10+91
function {:inline} $1_option_spec_is_none'u128'(t: $1_option_Option'u128'): bool {
    $1_vector_$is_empty'u128'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:69:10+91
function {:inline} $1_option_spec_is_none'$1_aggregator_Aggregator'(t: $1_option_Option'$1_aggregator_Aggregator'): bool {
    $1_vector_$is_empty'$1_aggregator_Aggregator'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:69:10+91
function {:inline} $1_option_spec_is_none'$1_object_Object'$1_fungible_asset_Metadata''(t: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata''): bool {
    $1_vector_$is_empty'$1_object_Object'$1_fungible_asset_Metadata''(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:69:10+91
function {:inline} $1_option_spec_is_none'$1_optional_aggregator_Integer'(t: $1_option_Option'$1_optional_aggregator_Integer'): bool {
    $1_vector_$is_empty'$1_optional_aggregator_Integer'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:69:10+91
function {:inline} $1_option_spec_is_none'$1_optional_aggregator_OptionalAggregator'(t: $1_option_Option'$1_optional_aggregator_OptionalAggregator'): bool {
    $1_vector_$is_empty'$1_optional_aggregator_OptionalAggregator'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:69:10+91
function {:inline} $1_option_spec_is_none'$1_function_info_FunctionInfo'(t: $1_option_Option'$1_function_info_FunctionInfo'): bool {
    $1_vector_$is_empty'$1_function_info_FunctionInfo'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:69:10+91
function {:inline} $1_option_spec_is_none'$1_fungible_asset_BurnRef'(t: $1_option_Option'$1_fungible_asset_BurnRef'): bool {
    $1_vector_$is_empty'$1_fungible_asset_BurnRef'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:82:10+92
function {:inline} $1_option_spec_is_some'u128'(t: $1_option_Option'u128'): bool {
    !$1_vector_$is_empty'u128'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:82:10+92
function {:inline} $1_option_spec_is_some'$1_aggregator_Aggregator'(t: $1_option_Option'$1_aggregator_Aggregator'): bool {
    !$1_vector_$is_empty'$1_aggregator_Aggregator'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:82:10+92
function {:inline} $1_option_spec_is_some'$1_object_Object'$1_fungible_asset_Metadata''(t: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata''): bool {
    !$1_vector_$is_empty'$1_object_Object'$1_fungible_asset_Metadata''(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:82:10+92
function {:inline} $1_option_spec_is_some'$1_optional_aggregator_Integer'(t: $1_option_Option'$1_optional_aggregator_Integer'): bool {
    !$1_vector_$is_empty'$1_optional_aggregator_Integer'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:82:10+92
function {:inline} $1_option_spec_is_some'$1_optional_aggregator_OptionalAggregator'(t: $1_option_Option'$1_optional_aggregator_OptionalAggregator'): bool {
    !$1_vector_$is_empty'$1_optional_aggregator_OptionalAggregator'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:82:10+92
function {:inline} $1_option_spec_is_some'$1_function_info_FunctionInfo'(t: $1_option_Option'$1_function_info_FunctionInfo'): bool {
    !$1_vector_$is_empty'$1_function_info_FunctionInfo'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:82:10+92
function {:inline} $1_option_spec_is_some'$1_fungible_asset_BurnRef'(t: $1_option_Option'$1_fungible_asset_BurnRef'): bool {
    !$1_vector_$is_empty'$1_fungible_asset_BurnRef'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:111:10+78
function {:inline} $1_option_spec_borrow'u128'(t: $1_option_Option'u128'): int {
    ReadVec(t->$vec, 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:111:10+78
function {:inline} $1_option_spec_borrow'$1_aggregator_Aggregator'(t: $1_option_Option'$1_aggregator_Aggregator'): $1_aggregator_Aggregator {
    ReadVec(t->$vec, 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:111:10+78
function {:inline} $1_option_spec_borrow'$1_object_Object'$1_fungible_asset_Metadata''(t: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata''): $1_object_Object'$1_fungible_asset_Metadata' {
    ReadVec(t->$vec, 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:111:10+78
function {:inline} $1_option_spec_borrow'$1_optional_aggregator_Integer'(t: $1_option_Option'$1_optional_aggregator_Integer'): $1_optional_aggregator_Integer {
    ReadVec(t->$vec, 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:111:10+78
function {:inline} $1_option_spec_borrow'$1_optional_aggregator_OptionalAggregator'(t: $1_option_Option'$1_optional_aggregator_OptionalAggregator'): $1_optional_aggregator_OptionalAggregator {
    ReadVec(t->$vec, 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:111:10+78
function {:inline} $1_option_spec_borrow'$1_function_info_FunctionInfo'(t: $1_option_Option'$1_function_info_FunctionInfo'): $1_function_info_FunctionInfo {
    ReadVec(t->$vec, 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:111:10+78
function {:inline} $1_option_spec_borrow'$1_fungible_asset_BurnRef'(t: $1_option_Option'$1_fungible_asset_BurnRef'): $1_fungible_asset_BurnRef {
    ReadVec(t->$vec, 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:102:5+145
function {:inline} $1_option_$borrow'$1_aggregator_Aggregator'(t: $1_option_Option'$1_aggregator_Aggregator'): $1_aggregator_Aggregator {
    $1_vector_$borrow'$1_aggregator_Aggregator'(t->$vec, 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:102:5+145
function {:inline} $1_option_$borrow'$1_optional_aggregator_Integer'(t: $1_option_Option'$1_optional_aggregator_Integer'): $1_optional_aggregator_Integer {
    $1_vector_$borrow'$1_optional_aggregator_Integer'(t->$vec, 0)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:61:5+95
function {:inline} $1_option_$is_none'$1_aggregator_Aggregator'(t: $1_option_Option'$1_aggregator_Aggregator'): bool {
    $1_vector_$is_empty'$1_aggregator_Aggregator'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:61:5+95
function {:inline} $1_option_$is_none'$1_optional_aggregator_Integer'(t: $1_option_Option'$1_optional_aggregator_Integer'): bool {
    $1_vector_$is_empty'$1_optional_aggregator_Integer'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:74:5+96
function {:inline} $1_option_$is_some'$1_aggregator_Aggregator'(t: $1_option_Option'$1_aggregator_Aggregator'): bool {
    !$1_vector_$is_empty'$1_aggregator_Aggregator'(t->$vec)
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:74:5+96
function {:inline} $1_option_$is_some'$1_optional_aggregator_Integer'(t: $1_option_Option'$1_optional_aggregator_Integer'): bool {
    !$1_vector_$is_empty'$1_optional_aggregator_Integer'(t->$vec)
}

// struct option::Option<u128> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'u128' {
    $1_option_Option'u128'($vec: Vec (int))
}
function {:inline} $Update'$1_option_Option'u128''_vec(s: $1_option_Option'u128', x: Vec (int)): $1_option_Option'u128' {
    $1_option_Option'u128'(x)
}
function $IsValid'$1_option_Option'u128''(s: $1_option_Option'u128'): bool {
    $IsValid'vec'u128''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'u128''(s1: $1_option_Option'u128', s2: $1_option_Option'u128'): bool {
    $IsEqual'vec'u128''(s1->$vec, s2->$vec)}

// struct option::Option<aggregator::Aggregator> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_aggregator_Aggregator' {
    $1_option_Option'$1_aggregator_Aggregator'($vec: Vec ($1_aggregator_Aggregator))
}
function {:inline} $Update'$1_option_Option'$1_aggregator_Aggregator''_vec(s: $1_option_Option'$1_aggregator_Aggregator', x: Vec ($1_aggregator_Aggregator)): $1_option_Option'$1_aggregator_Aggregator' {
    $1_option_Option'$1_aggregator_Aggregator'(x)
}
function $IsValid'$1_option_Option'$1_aggregator_Aggregator''(s: $1_option_Option'$1_aggregator_Aggregator'): bool {
    $IsValid'vec'$1_aggregator_Aggregator''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_aggregator_Aggregator''(s1: $1_option_Option'$1_aggregator_Aggregator', s2: $1_option_Option'$1_aggregator_Aggregator'): bool {
    $IsEqual'vec'$1_aggregator_Aggregator''(s1->$vec, s2->$vec)}

// struct option::Option<object::Object<fungible_asset::Metadata>> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'' {
    $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata''($vec: Vec ($1_object_Object'$1_fungible_asset_Metadata'))
}
function {:inline} $Update'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''_vec(s: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'', x: Vec ($1_object_Object'$1_fungible_asset_Metadata')): $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'' {
    $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata''(x)
}
function $IsValid'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''(s: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata''): bool {
    $IsValid'vec'$1_object_Object'$1_fungible_asset_Metadata'''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''(s1: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'', s2: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata''): bool {
    $IsEqual'vec'$1_object_Object'$1_fungible_asset_Metadata'''(s1->$vec, s2->$vec)}

// struct option::Option<optional_aggregator::Integer> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_optional_aggregator_Integer' {
    $1_option_Option'$1_optional_aggregator_Integer'($vec: Vec ($1_optional_aggregator_Integer))
}
function {:inline} $Update'$1_option_Option'$1_optional_aggregator_Integer''_vec(s: $1_option_Option'$1_optional_aggregator_Integer', x: Vec ($1_optional_aggregator_Integer)): $1_option_Option'$1_optional_aggregator_Integer' {
    $1_option_Option'$1_optional_aggregator_Integer'(x)
}
function $IsValid'$1_option_Option'$1_optional_aggregator_Integer''(s: $1_option_Option'$1_optional_aggregator_Integer'): bool {
    $IsValid'vec'$1_optional_aggregator_Integer''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_optional_aggregator_Integer''(s1: $1_option_Option'$1_optional_aggregator_Integer', s2: $1_option_Option'$1_optional_aggregator_Integer'): bool {
    $IsEqual'vec'$1_optional_aggregator_Integer''(s1->$vec, s2->$vec)}

// struct option::Option<optional_aggregator::OptionalAggregator> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_optional_aggregator_OptionalAggregator' {
    $1_option_Option'$1_optional_aggregator_OptionalAggregator'($vec: Vec ($1_optional_aggregator_OptionalAggregator))
}
function {:inline} $Update'$1_option_Option'$1_optional_aggregator_OptionalAggregator''_vec(s: $1_option_Option'$1_optional_aggregator_OptionalAggregator', x: Vec ($1_optional_aggregator_OptionalAggregator)): $1_option_Option'$1_optional_aggregator_OptionalAggregator' {
    $1_option_Option'$1_optional_aggregator_OptionalAggregator'(x)
}
function $IsValid'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(s: $1_option_Option'$1_optional_aggregator_OptionalAggregator'): bool {
    $IsValid'vec'$1_optional_aggregator_OptionalAggregator''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(s1: $1_option_Option'$1_optional_aggregator_OptionalAggregator', s2: $1_option_Option'$1_optional_aggregator_OptionalAggregator'): bool {
    $IsEqual'vec'$1_optional_aggregator_OptionalAggregator''(s1->$vec, s2->$vec)}

// struct option::Option<function_info::FunctionInfo> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_function_info_FunctionInfo' {
    $1_option_Option'$1_function_info_FunctionInfo'($vec: Vec ($1_function_info_FunctionInfo))
}
function {:inline} $Update'$1_option_Option'$1_function_info_FunctionInfo''_vec(s: $1_option_Option'$1_function_info_FunctionInfo', x: Vec ($1_function_info_FunctionInfo)): $1_option_Option'$1_function_info_FunctionInfo' {
    $1_option_Option'$1_function_info_FunctionInfo'(x)
}
function $IsValid'$1_option_Option'$1_function_info_FunctionInfo''(s: $1_option_Option'$1_function_info_FunctionInfo'): bool {
    $IsValid'vec'$1_function_info_FunctionInfo''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_function_info_FunctionInfo''(s1: $1_option_Option'$1_function_info_FunctionInfo', s2: $1_option_Option'$1_function_info_FunctionInfo'): bool {
    $IsEqual'vec'$1_function_info_FunctionInfo''(s1->$vec, s2->$vec)}

// struct option::Option<fungible_asset::TransferRef> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_fungible_asset_TransferRef' {
    $1_option_Option'$1_fungible_asset_TransferRef'($vec: Vec ($1_fungible_asset_TransferRef))
}
function {:inline} $Update'$1_option_Option'$1_fungible_asset_TransferRef''_vec(s: $1_option_Option'$1_fungible_asset_TransferRef', x: Vec ($1_fungible_asset_TransferRef)): $1_option_Option'$1_fungible_asset_TransferRef' {
    $1_option_Option'$1_fungible_asset_TransferRef'(x)
}
function $IsValid'$1_option_Option'$1_fungible_asset_TransferRef''(s: $1_option_Option'$1_fungible_asset_TransferRef'): bool {
    $IsValid'vec'$1_fungible_asset_TransferRef''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_fungible_asset_TransferRef''(s1: $1_option_Option'$1_fungible_asset_TransferRef', s2: $1_option_Option'$1_fungible_asset_TransferRef'): bool {
    $IsEqual'vec'$1_fungible_asset_TransferRef''(s1->$vec, s2->$vec)}

// struct option::Option<fungible_asset::BurnRef> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_fungible_asset_BurnRef' {
    $1_option_Option'$1_fungible_asset_BurnRef'($vec: Vec ($1_fungible_asset_BurnRef))
}
function {:inline} $Update'$1_option_Option'$1_fungible_asset_BurnRef''_vec(s: $1_option_Option'$1_fungible_asset_BurnRef', x: Vec ($1_fungible_asset_BurnRef)): $1_option_Option'$1_fungible_asset_BurnRef' {
    $1_option_Option'$1_fungible_asset_BurnRef'(x)
}
function $IsValid'$1_option_Option'$1_fungible_asset_BurnRef''(s: $1_option_Option'$1_fungible_asset_BurnRef'): bool {
    $IsValid'vec'$1_fungible_asset_BurnRef''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_fungible_asset_BurnRef''(s1: $1_option_Option'$1_fungible_asset_BurnRef', s2: $1_option_Option'$1_fungible_asset_BurnRef'): bool {
    $IsEqual'vec'$1_fungible_asset_BurnRef''(s1->$vec, s2->$vec)}

// struct option::Option<fungible_asset::MintRef> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:7:5+81
datatype $1_option_Option'$1_fungible_asset_MintRef' {
    $1_option_Option'$1_fungible_asset_MintRef'($vec: Vec ($1_fungible_asset_MintRef))
}
function {:inline} $Update'$1_option_Option'$1_fungible_asset_MintRef''_vec(s: $1_option_Option'$1_fungible_asset_MintRef', x: Vec ($1_fungible_asset_MintRef)): $1_option_Option'$1_fungible_asset_MintRef' {
    $1_option_Option'$1_fungible_asset_MintRef'(x)
}
function $IsValid'$1_option_Option'$1_fungible_asset_MintRef''(s: $1_option_Option'$1_fungible_asset_MintRef'): bool {
    $IsValid'vec'$1_fungible_asset_MintRef''(s->$vec)
}
function {:inline} $IsEqual'$1_option_Option'$1_fungible_asset_MintRef''(s1: $1_option_Option'$1_fungible_asset_MintRef', s2: $1_option_Option'$1_fungible_asset_MintRef'): bool {
    $IsEqual'vec'$1_fungible_asset_MintRef''(s1->$vec, s2->$vec)}

// fun option::borrow_mut<u128> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:173:5+165
procedure {:inline 1} $1_option_borrow_mut'u128'(_$t0: $Mutation ($1_option_Option'u128')) returns ($ret0: $Mutation (int), $ret1: $Mutation ($1_option_Option'u128'))
{
    // declare local variables
    var $t1: $1_option_Option'u128';
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation (Vec (int));
    var $t6: int;
    var $t7: $Mutation (int);
    var $t0: $Mutation ($1_option_Option'u128');
    var $temp_0'$1_option_Option'u128'': $1_option_Option'u128';
    var $temp_0'u128': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[t]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:173:5+1
    assume {:print "$at(13,5765,5766)"} true;
    $temp_0'$1_option_Option'u128'' := $Dereference($t0);
    assume {:print "$track_local(1,1,0):", $temp_0'$1_option_Option'u128''} $temp_0'$1_option_Option'u128'' == $temp_0'$1_option_Option'u128'';

    // $t1 := read_ref($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:25+1
    assume {:print "$at(13,5861,5862)"} true;
    $t1 := $Dereference($t0);

    // $t2 := opaque begin: option::is_some<#0>($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10
    assume $IsValid'bool'($t2);

    // assume Eq<bool>($t2, option::spec_is_some<#0>($t1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10
    assume $IsEqual'bool'($t2, $1_option_spec_is_some'u128'($t1));

    // $t2 := opaque end: option::is_some<#0>($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10

    // if ($t2) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    assume {:print "$at(13,5845,5881)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
L0:

    // pack_ref_deep($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    assume {:print "$at(13,5845,5881)"} true;

    // drop($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36

    // $t3 := 262145 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:29+15
    $t3 := 262145;
    assume $IsValid'u64'($t3);

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    assume {:print "$at(13,5845,5881)"} true;
    assume {:print "$track_abort(1,1):", $t3} $t3 == $t3;

    // $t4 := move($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    $t4 := $t3;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:33+1
    assume {:print "$at(13,5915,5916)"} true;
L2:

    // $t5 := borrow_field<option::Option<#0>>.vec($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:28+10
    assume {:print "$at(13,5910,5920)"} true;
    $t5 := $ChildMutation($t0, 0, $Dereference($t0)->$vec);

    // $t6 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:40+1
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := vector::borrow_mut<#0>($t5, $t6) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    call $t7,$t5 := $1_vector_borrow_mut'u128'($t5, $t6);
    if ($abort_flag) {
        assume {:print "$at(13,5891,5924)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(1,1):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_return[0]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    $temp_0'u128' := $Dereference($t7);
    assume {:print "$track_return(1,1,0):", $temp_0'u128'} $temp_0'u128' == $temp_0'u128';

    // trace_local[t]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    $temp_0'$1_option_Option'u128'' := $Dereference($t0);
    assume {:print "$track_local(1,1,0):", $temp_0'$1_option_Option'u128''} $temp_0'$1_option_Option'u128'' == $temp_0'$1_option_Option'u128'';

    // trace_local[t]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    $temp_0'$1_option_Option'u128'' := $Dereference($t0);
    assume {:print "$track_local(1,1,0):", $temp_0'$1_option_Option'u128''} $temp_0'$1_option_Option'u128'' == $temp_0'$1_option_Option'u128'';

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(13,5929,5930)"} true;
L3:

    // return $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(13,5929,5930)"} true;
    $ret0 := $t7;
    $ret1 := $t0;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(13,5929,5930)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun option::borrow_mut<aggregator::Aggregator> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:173:5+165
procedure {:inline 1} $1_option_borrow_mut'$1_aggregator_Aggregator'(_$t0: $Mutation ($1_option_Option'$1_aggregator_Aggregator')) returns ($ret0: $Mutation ($1_aggregator_Aggregator), $ret1: $Mutation ($1_option_Option'$1_aggregator_Aggregator'))
{
    // declare local variables
    var $t1: $1_option_Option'$1_aggregator_Aggregator';
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation (Vec ($1_aggregator_Aggregator));
    var $t6: int;
    var $t7: $Mutation ($1_aggregator_Aggregator);
    var $t0: $Mutation ($1_option_Option'$1_aggregator_Aggregator');
    var $temp_0'$1_aggregator_Aggregator': $1_aggregator_Aggregator;
    var $temp_0'$1_option_Option'$1_aggregator_Aggregator'': $1_option_Option'$1_aggregator_Aggregator';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[t]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:173:5+1
    assume {:print "$at(13,5765,5766)"} true;
    $temp_0'$1_option_Option'$1_aggregator_Aggregator'' := $Dereference($t0);
    assume {:print "$track_local(1,1,0):", $temp_0'$1_option_Option'$1_aggregator_Aggregator''} $temp_0'$1_option_Option'$1_aggregator_Aggregator'' == $temp_0'$1_option_Option'$1_aggregator_Aggregator'';

    // $t1 := read_ref($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:25+1
    assume {:print "$at(13,5861,5862)"} true;
    $t1 := $Dereference($t0);

    // $t2 := opaque begin: option::is_some<#0>($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10
    assume $IsValid'bool'($t2);

    // assume Eq<bool>($t2, option::spec_is_some<#0>($t1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10
    assume $IsEqual'bool'($t2, $1_option_spec_is_some'$1_aggregator_Aggregator'($t1));

    // $t2 := opaque end: option::is_some<#0>($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10

    // if ($t2) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    assume {:print "$at(13,5845,5881)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
L0:

    // pack_ref_deep($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    assume {:print "$at(13,5845,5881)"} true;

    // drop($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36

    // $t3 := 262145 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:29+15
    $t3 := 262145;
    assume $IsValid'u64'($t3);

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    assume {:print "$at(13,5845,5881)"} true;
    assume {:print "$track_abort(1,1):", $t3} $t3 == $t3;

    // $t4 := move($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    $t4 := $t3;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:33+1
    assume {:print "$at(13,5915,5916)"} true;
L2:

    // $t5 := borrow_field<option::Option<#0>>.vec($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:28+10
    assume {:print "$at(13,5910,5920)"} true;
    $t5 := $ChildMutation($t0, 0, $Dereference($t0)->$vec);

    // $t6 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:40+1
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := vector::borrow_mut<#0>($t5, $t6) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    call $t7,$t5 := $1_vector_borrow_mut'$1_aggregator_Aggregator'($t5, $t6);
    if ($abort_flag) {
        assume {:print "$at(13,5891,5924)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(1,1):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_return[0]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    $temp_0'$1_aggregator_Aggregator' := $Dereference($t7);
    assume {:print "$track_return(1,1,0):", $temp_0'$1_aggregator_Aggregator'} $temp_0'$1_aggregator_Aggregator' == $temp_0'$1_aggregator_Aggregator';

    // trace_local[t]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    $temp_0'$1_option_Option'$1_aggregator_Aggregator'' := $Dereference($t0);
    assume {:print "$track_local(1,1,0):", $temp_0'$1_option_Option'$1_aggregator_Aggregator''} $temp_0'$1_option_Option'$1_aggregator_Aggregator'' == $temp_0'$1_option_Option'$1_aggregator_Aggregator'';

    // trace_local[t]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    $temp_0'$1_option_Option'$1_aggregator_Aggregator'' := $Dereference($t0);
    assume {:print "$track_local(1,1,0):", $temp_0'$1_option_Option'$1_aggregator_Aggregator''} $temp_0'$1_option_Option'$1_aggregator_Aggregator'' == $temp_0'$1_option_Option'$1_aggregator_Aggregator'';

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(13,5929,5930)"} true;
L3:

    // return $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(13,5929,5930)"} true;
    $ret0 := $t7;
    $ret1 := $t0;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(13,5929,5930)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun option::borrow_mut<optional_aggregator::Integer> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:173:5+165
procedure {:inline 1} $1_option_borrow_mut'$1_optional_aggregator_Integer'(_$t0: $Mutation ($1_option_Option'$1_optional_aggregator_Integer')) returns ($ret0: $Mutation ($1_optional_aggregator_Integer), $ret1: $Mutation ($1_option_Option'$1_optional_aggregator_Integer'))
{
    // declare local variables
    var $t1: $1_option_Option'$1_optional_aggregator_Integer';
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation (Vec ($1_optional_aggregator_Integer));
    var $t6: int;
    var $t7: $Mutation ($1_optional_aggregator_Integer);
    var $t0: $Mutation ($1_option_Option'$1_optional_aggregator_Integer');
    var $temp_0'$1_option_Option'$1_optional_aggregator_Integer'': $1_option_Option'$1_optional_aggregator_Integer';
    var $temp_0'$1_optional_aggregator_Integer': $1_optional_aggregator_Integer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[t]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:173:5+1
    assume {:print "$at(13,5765,5766)"} true;
    $temp_0'$1_option_Option'$1_optional_aggregator_Integer'' := $Dereference($t0);
    assume {:print "$track_local(1,1,0):", $temp_0'$1_option_Option'$1_optional_aggregator_Integer''} $temp_0'$1_option_Option'$1_optional_aggregator_Integer'' == $temp_0'$1_option_Option'$1_optional_aggregator_Integer'';

    // $t1 := read_ref($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:25+1
    assume {:print "$at(13,5861,5862)"} true;
    $t1 := $Dereference($t0);

    // $t2 := opaque begin: option::is_some<#0>($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10
    assume $IsValid'bool'($t2);

    // assume Eq<bool>($t2, option::spec_is_some<#0>($t1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10
    assume $IsEqual'bool'($t2, $1_option_spec_is_some'$1_optional_aggregator_Integer'($t1));

    // $t2 := opaque end: option::is_some<#0>($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10

    // if ($t2) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    assume {:print "$at(13,5845,5881)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
L0:

    // pack_ref_deep($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    assume {:print "$at(13,5845,5881)"} true;

    // drop($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36

    // $t3 := 262145 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:29+15
    $t3 := 262145;
    assume $IsValid'u64'($t3);

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    assume {:print "$at(13,5845,5881)"} true;
    assume {:print "$track_abort(1,1):", $t3} $t3 == $t3;

    // $t4 := move($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    $t4 := $t3;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:33+1
    assume {:print "$at(13,5915,5916)"} true;
L2:

    // $t5 := borrow_field<option::Option<#0>>.vec($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:28+10
    assume {:print "$at(13,5910,5920)"} true;
    $t5 := $ChildMutation($t0, 0, $Dereference($t0)->$vec);

    // $t6 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:40+1
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := vector::borrow_mut<#0>($t5, $t6) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    call $t7,$t5 := $1_vector_borrow_mut'$1_optional_aggregator_Integer'($t5, $t6);
    if ($abort_flag) {
        assume {:print "$at(13,5891,5924)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(1,1):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_return[0]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    $temp_0'$1_optional_aggregator_Integer' := $Dereference($t7);
    assume {:print "$track_return(1,1,0):", $temp_0'$1_optional_aggregator_Integer'} $temp_0'$1_optional_aggregator_Integer' == $temp_0'$1_optional_aggregator_Integer';

    // trace_local[t]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    $temp_0'$1_option_Option'$1_optional_aggregator_Integer'' := $Dereference($t0);
    assume {:print "$track_local(1,1,0):", $temp_0'$1_option_Option'$1_optional_aggregator_Integer''} $temp_0'$1_option_Option'$1_optional_aggregator_Integer'' == $temp_0'$1_option_Option'$1_optional_aggregator_Integer'';

    // trace_local[t]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    $temp_0'$1_option_Option'$1_optional_aggregator_Integer'' := $Dereference($t0);
    assume {:print "$track_local(1,1,0):", $temp_0'$1_option_Option'$1_optional_aggregator_Integer''} $temp_0'$1_option_Option'$1_optional_aggregator_Integer'' == $temp_0'$1_option_Option'$1_optional_aggregator_Integer'';

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(13,5929,5930)"} true;
L3:

    // return $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(13,5929,5930)"} true;
    $ret0 := $t7;
    $ret1 := $t0;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(13,5929,5930)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun option::borrow_mut<optional_aggregator::OptionalAggregator> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:173:5+165
procedure {:inline 1} $1_option_borrow_mut'$1_optional_aggregator_OptionalAggregator'(_$t0: $Mutation ($1_option_Option'$1_optional_aggregator_OptionalAggregator')) returns ($ret0: $Mutation ($1_optional_aggregator_OptionalAggregator), $ret1: $Mutation ($1_option_Option'$1_optional_aggregator_OptionalAggregator'))
{
    // declare local variables
    var $t1: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation (Vec ($1_optional_aggregator_OptionalAggregator));
    var $t6: int;
    var $t7: $Mutation ($1_optional_aggregator_OptionalAggregator);
    var $t0: $Mutation ($1_option_Option'$1_optional_aggregator_OptionalAggregator');
    var $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'': $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $temp_0'$1_optional_aggregator_OptionalAggregator': $1_optional_aggregator_OptionalAggregator;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[t]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:173:5+1
    assume {:print "$at(13,5765,5766)"} true;
    $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'' := $Dereference($t0);
    assume {:print "$track_local(1,1,0):", $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator''} $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'' == $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'';

    // $t1 := read_ref($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:25+1
    assume {:print "$at(13,5861,5862)"} true;
    $t1 := $Dereference($t0);

    // $t2 := opaque begin: option::is_some<#0>($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10
    assume $IsValid'bool'($t2);

    // assume Eq<bool>($t2, option::spec_is_some<#0>($t1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10
    assume $IsEqual'bool'($t2, $1_option_spec_is_some'$1_optional_aggregator_OptionalAggregator'($t1));

    // $t2 := opaque end: option::is_some<#0>($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:17+10

    // if ($t2) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    assume {:print "$at(13,5845,5881)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
L0:

    // pack_ref_deep($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    assume {:print "$at(13,5845,5881)"} true;

    // drop($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36

    // $t3 := 262145 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:29+15
    $t3 := 262145;
    assume $IsValid'u64'($t3);

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    assume {:print "$at(13,5845,5881)"} true;
    assume {:print "$track_abort(1,1):", $t3} $t3 == $t3;

    // $t4 := move($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    $t4 := $t3;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:174:9+36
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:33+1
    assume {:print "$at(13,5915,5916)"} true;
L2:

    // $t5 := borrow_field<option::Option<#0>>.vec($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:28+10
    assume {:print "$at(13,5910,5920)"} true;
    $t5 := $ChildMutation($t0, 0, $Dereference($t0)->$vec);

    // $t6 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:40+1
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := vector::borrow_mut<#0>($t5, $t6) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    call $t7,$t5 := $1_vector_borrow_mut'$1_optional_aggregator_OptionalAggregator'($t5, $t6);
    if ($abort_flag) {
        assume {:print "$at(13,5891,5924)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(1,1):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_return[0]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    $temp_0'$1_optional_aggregator_OptionalAggregator' := $Dereference($t7);
    assume {:print "$track_return(1,1,0):", $temp_0'$1_optional_aggregator_OptionalAggregator'} $temp_0'$1_optional_aggregator_OptionalAggregator' == $temp_0'$1_optional_aggregator_OptionalAggregator';

    // trace_local[t]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'' := $Dereference($t0);
    assume {:print "$track_local(1,1,0):", $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator''} $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'' == $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'';

    // trace_local[t]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:175:9+33
    $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'' := $Dereference($t0);
    assume {:print "$track_local(1,1,0):", $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator''} $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'' == $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'';

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(13,5929,5930)"} true;
L3:

    // return $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(13,5929,5930)"} true;
    $ret0 := $t7;
    $ret1 := $t0;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:176:5+1
    assume {:print "$at(13,5929,5930)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.spec.move:28:9+50
function  $1_string_spec_internal_check_utf8(v: Vec (int)): bool;
axiom (forall v: Vec (int) ::
(var $$res := $1_string_spec_internal_check_utf8(v);
$IsValid'bool'($$res)));

// struct string::String at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:13:5+70
datatype $1_string_String {
    $1_string_String($bytes: Vec (int))
}
function {:inline} $Update'$1_string_String'_bytes(s: $1_string_String, x: Vec (int)): $1_string_String {
    $1_string_String(x)
}
function $IsValid'$1_string_String'(s: $1_string_String): bool {
    $IsValid'vec'u8''(s->$bytes)
}
function {:inline} $IsEqual'$1_string_String'(s1: $1_string_String, s2: $1_string_String): bool {
    $IsEqual'vec'u8''(s1->$bytes, s2->$bytes)}

// fun string::length [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:43:5+75
procedure {:inline 1} $1_string_length(_$t0: $1_string_String) returns ($ret0: int)
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: int;
    var $t3: int;
    var $t0: $1_string_String;
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[s]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:43:5+1
    assume {:print "$at(15,1295,1296)"} true;
    assume {:print "$track_local(2,10,0):", $t0} $t0 == $t0;

    // $t1 := get_field<string::String>.bytes($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:44:24+8
    assume {:print "$at(15,1355,1363)"} true;
    $t1 := $t0->$bytes;

    // $t2 := vector::length<u8>($t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:44:9+24
    call $t2 := $1_vector_length'u8'($t1);
    if ($abort_flag) {
        assume {:print "$at(15,1340,1364)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(2,10):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:44:9+24
    assume {:print "$track_return(2,10,0):", $t2} $t2 == $t2;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:45:5+1
    assume {:print "$at(15,1369,1370)"} true;
L1:

    // return $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:45:5+1
    assume {:print "$at(15,1369,1370)"} true;
    $ret0 := $t2;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:45:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:45:5+1
    assume {:print "$at(15,1369,1370)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun string::bytes [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:33:5+66
procedure {:inline 1} $1_string_bytes(_$t0: $1_string_String) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t0: $1_string_String;
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[s]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:33:5+1
    assume {:print "$at(15,1039,1040)"} true;
    assume {:print "$track_local(2,2,0):", $t0} $t0 == $t0;

    // $t1 := get_field<string::String>.bytes($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:34:9+8
    assume {:print "$at(15,1091,1099)"} true;
    $t1 := $t0->$bytes;

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:34:9+8
    assume {:print "$track_return(2,2,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:35:5+1
    assume {:print "$at(15,1104,1105)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:35:5+1
    assume {:print "$at(15,1104,1105)"} true;
    $ret0 := $t1;
    return;

}

// fun string::utf8 [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:18:5+133
procedure {:inline 1} $1_string_utf8(_$t0: Vec (int)) returns ($ret0: $1_string_String)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: $1_string_String;
    var $t0: Vec (int);
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bytes]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:18:5+1
    assume {:print "$at(15,573,574)"} true;
    assume {:print "$track_local(2,13,0):", $t0} $t0 == $t0;

    // $t1 := opaque begin: string::internal_check_utf8($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:17+27
    assume {:print "$at(15,634,661)"} true;

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:17+27
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, string::spec_internal_check_utf8($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:17+27
    assume $IsEqual'bool'($t1, $1_string_spec_internal_check_utf8($t0));

    // $t1 := opaque end: string::internal_check_utf8($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:17+27

    // if ($t1) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:9+51
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:9+51
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:9+51
    assume {:print "$at(15,626,677)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:46+13
L0:

    // $t2 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:46+13
    assume {:print "$at(15,663,676)"} true;
    $t2 := 1;
    assume $IsValid'u64'($t2);

    // trace_abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:9+51
    assume {:print "$at(15,626,677)"} true;
    assume {:print "$track_abort(2,13):", $t2} $t2 == $t2;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:19:9+51
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:20:16+5
    assume {:print "$at(15,694,699)"} true;
L2:

    // $t3 := pack string::String($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:20:9+13
    assume {:print "$at(15,687,700)"} true;
    $t3 := $1_string_String($t0);

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:20:9+13
    assume {:print "$track_return(2,13,0):", $t3} $t3 == $t3;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:21:5+1
    assume {:print "$at(15,705,706)"} true;
L3:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:21:5+1
    assume {:print "$at(15,705,706)"} true;
    $ret0 := $t3;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:21:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/string.move:21:5+1
    assume {:print "$at(15,705,706)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:12:5+77
function {:inline} $1_signer_$address_of(s: $signer): int {
    $1_signer_$borrow_address(s)
}

// fun signer::address_of [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:12:5+77
procedure {:inline 1} $1_signer_address_of(_$t0: $signer) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t0: $signer;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[s]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:12:5+1
    assume {:print "$at(14,395,396)"} true;
    assume {:print "$track_local(3,0,0):", $t0} $t0 == $t0;

    // $t1 := signer::borrow_address($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:13:10+17
    assume {:print "$at(14,449,466)"} true;
    call $t1 := $1_signer_borrow_address($t0);
    if ($abort_flag) {
        assume {:print "$at(14,449,466)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(3,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:13:9+18
    assume {:print "$track_return(3,0,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:14:5+1
    assume {:print "$at(14,471,472)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:14:5+1
    assume {:print "$at(14,471,472)"} true;
    $ret0 := $t1;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:14:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/signer.move:14:5+1
    assume {:print "$at(14,471,472)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun error::aborted [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:3+57
procedure {:inline 1} $1_error_aborted(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:3+1
    assume {:print "$at(10,3525,3526)"} true;
    assume {:print "$track_local(4,0,0):", $t0} $t0 == $t0;

    // $t1 := 7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:47+7
    $t1 := 7;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:37+21
    assume {:print "$at(10,3559,3580)"} true;

    // assume WellFormed($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:37+21
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:37+21
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:37+21

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:37+21
    assume {:print "$track_return(4,0,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:59+1
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:82:59+1
    assume {:print "$at(10,3581,3582)"} true;
    $ret0 := $t3;
    return;

}

// fun error::already_exists [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:3+71
procedure {:inline 1} $1_error_already_exists(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:3+1
    assume {:print "$at(10,3585,3586)"} true;
    assume {:print "$track_local(4,1,0):", $t0} $t0 == $t0;

    // $t1 := 8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:54+14
    $t1 := 8;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28
    assume {:print "$at(10,3626,3654)"} true;

    // assume WellFormed($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:44+28
    assume {:print "$track_return(4,1,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:73+1
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:83:73+1
    assume {:print "$at(10,3655,3656)"} true;
    $ret0 := $t3;
    return;

}

// fun error::internal [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:85:3+60
procedure {:inline 1} $1_error_internal(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:85:3+1
    assume {:print "$at(10,3742,3743)"} true;
    assume {:print "$track_local(4,3,0):", $t0} $t0 == $t0;

    // $t1 := 11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:85:49+8
    $t1 := 11;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:85:39+22
    assume {:print "$at(10,3778,3800)"} true;

    // assume WellFormed($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:85:39+22
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:85:39+22
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:85:39+22

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:85:39+22
    assume {:print "$track_return(4,3,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:85:62+1
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:85:62+1
    assume {:print "$at(10,3801,3802)"} true;
    $ret0 := $t3;
    return;

}

// fun error::invalid_argument [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:3+76
procedure {:inline 1} $1_error_invalid_argument(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:3+1
    assume {:print "$at(10,3082,3083)"} true;
    assume {:print "$track_local(4,4,0):", $t0} $t0 == $t0;

    // $t1 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:57+16
    $t1 := 1;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume {:print "$at(10,3126,3156)"} true;

    // assume WellFormed($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:47+30
    assume {:print "$track_return(4,4,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:78+1
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:76:78+1
    assume {:print "$at(10,3157,3158)"} true;
    $ret0 := $t3;
    return;

}

// fun error::invalid_state [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:3+70
procedure {:inline 1} $1_error_invalid_state(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:3+1
    assume {:print "$at(10,3232,3233)"} true;
    assume {:print "$track_local(4,5,0):", $t0} $t0 == $t0;

    // $t1 := 3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:54+13
    $t1 := 3;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume {:print "$at(10,3273,3300)"} true;

    // assume WellFormed($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:44+27
    assume {:print "$track_return(4,5,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:72+1
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:78:72+1
    assume {:print "$at(10,3301,3302)"} true;
    $ret0 := $t3;
    return;

}

// fun error::not_found [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:3+61
procedure {:inline 1} $1_error_not_found(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:3+1
    assume {:print "$at(10,3461,3462)"} true;
    assume {:print "$track_local(4,6,0):", $t0} $t0 == $t0;

    // $t1 := 6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:49+9
    $t1 := 6;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume {:print "$at(10,3497,3520)"} true;

    // assume WellFormed($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:39+23
    assume {:print "$track_return(4,6,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:63+1
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:81:63+1
    assume {:print "$at(10,3521,3522)"} true;
    $ret0 := $t3;
    return;

}

// fun error::out_of_range [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:3+68
procedure {:inline 1} $1_error_out_of_range(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:3+1
    assume {:print "$at(10,3161,3162)"} true;
    assume {:print "$track_local(4,8,0):", $t0} $t0 == $t0;

    // $t1 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:53+12
    $t1 := 2;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26
    assume {:print "$at(10,3201,3227)"} true;

    // assume WellFormed($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:43+26
    assume {:print "$track_return(4,8,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:70+1
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:77:70+1
    assume {:print "$at(10,3228,3229)"} true;
    $ret0 := $t3;
    return;

}

// fun error::permission_denied [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:3+77
procedure {:inline 1} $1_error_permission_denied(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[r]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:3+1
    assume {:print "$at(10,3381,3382)"} true;
    assume {:print "$track_local(4,9,0):", $t0} $t0 == $t0;

    // $t1 := 5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:57+17
    $t1 := 5;
    assume $IsValid'u64'($t1);

    // assume Identical($t2, Shl($t1, 16)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:69:5+29
    assume {:print "$at(10,2844,2873)"} true;
    assume ($t2 == $shlU64($t1, 16));

    // $t3 := opaque begin: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume {:print "$at(10,3425,3456)"} true;

    // assume WellFormed($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume $IsValid'u64'($t3);

    // assume Eq<u64>($t3, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume $IsEqual'u64'($t3, $t1);

    // $t3 := opaque end: error::canonical($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:47+31
    assume {:print "$track_return(4,9,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:79+1
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/error.move:80:79+1
    assume {:print "$at(10,3457,3458)"} true;
    $ret0 := $t3;
    return;

}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.spec.move:59:10+40
function  $1_features_spec_is_enabled(feature: int): bool;
axiom (forall feature: int ::
(var $$res := $1_features_spec_is_enabled(feature);
$IsValid'bool'($$res)));

// struct features::Features at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:602:5+61
datatype $1_features_Features {
    $1_features_Features($features: Vec (bv8))
}
function {:inline} $Update'$1_features_Features'_features(s: $1_features_Features, x: Vec (bv8)): $1_features_Features {
    $1_features_Features(x)
}
function $IsValid'$1_features_Features'(s: $1_features_Features): bool {
    $IsValid'vec'bv8''(s->$features)
}
function {:inline} $IsEqual'$1_features_Features'(s1: $1_features_Features, s2: $1_features_Features): bool {
    $IsEqual'vec'bv8''(s1->$features, s2->$features)}
var $1_features_Features_$memory: $Memory $1_features_Features;

// fun features::abort_atomic_bridge_enabled [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:591:5+106
procedure {:inline 1} $1_features_abort_atomic_bridge_enabled() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 71 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:592:20+13
    assume {:print "$at(8,21739,21752)"} true;
    $t0 := 71;
    assume $IsValid'u64'($t0);

    // $t1 := opaque begin: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:592:9+25

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:592:9+25
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, features::spec_is_enabled($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:592:9+25
    assume $IsEqual'bool'($t1, $1_features_spec_is_enabled($t0));

    // $t1 := opaque end: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:592:9+25

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:592:9+25
    assume {:print "$track_return(5,0,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:593:5+1
    assume {:print "$at(8,21758,21759)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:593:5+1
    assume {:print "$at(8,21758,21759)"} true;
    $ret0 := $t1;
    return;

}

// fun features::coin_to_fungible_asset_migration_feature_enabled [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:491:5+146
procedure {:inline 1} $1_features_coin_to_fungible_asset_migration_feature_enabled() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 60 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:492:20+32
    assume {:print "$at(8,17963,17995)"} true;
    $t0 := 60;
    assume $IsValid'u64'($t0);

    // $t1 := opaque begin: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:492:9+44

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:492:9+44
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, features::spec_is_enabled($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:492:9+44
    assume $IsEqual'bool'($t1, $1_features_spec_is_enabled($t0));

    // $t1 := opaque end: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:492:9+44

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:492:9+44
    assume {:print "$track_return(5,18,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:493:5+1
    assume {:print "$at(8,18001,18002)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:493:5+1
    assume {:print "$at(8,18001,18002)"} true;
    $ret0 := $t1;
    return;

}

// fun features::concurrent_fungible_assets_enabled [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:409:5+126
procedure {:inline 1} $1_features_concurrent_fungible_assets_enabled() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 50 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:410:20+26
    assume {:print "$at(8,14950,14976)"} true;
    $t0 := 50;
    assume $IsValid'u64'($t0);

    // $t1 := opaque begin: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:410:9+38

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:410:9+38
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, features::spec_is_enabled($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:410:9+38
    assume $IsEqual'bool'($t1, $1_features_spec_is_enabled($t0));

    // $t1 := opaque end: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:410:9+38

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:410:9+38
    assume {:print "$track_return(5,22,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:411:5+1
    assume {:print "$at(8,14982,14983)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:411:5+1
    assume {:print "$at(8,14982,14983)"} true;
    $ret0 := $t1;
    return;

}

// fun features::default_to_concurrent_fungible_balance_enabled [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:569:5+150
procedure {:inline 1} $1_features_default_to_concurrent_fungible_balance_enabled() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 68 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:570:20+38
    assume {:print "$at(8,20879,20917)"} true;
    $t0 := 68;
    assume $IsValid'u64'($t0);

    // $t1 := opaque begin: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:570:9+50

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:570:9+50
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, features::spec_is_enabled($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:570:9+50
    assume $IsEqual'bool'($t1, $1_features_spec_is_enabled($t0));

    // $t1 := opaque end: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:570:9+50

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:570:9+50
    assume {:print "$track_return(5,27,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:571:5+1
    assume {:print "$at(8,20923,20924)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:571:5+1
    assume {:print "$at(8,20923,20924)"} true;
    $ret0 := $t1;
    return;

}

// fun features::dispatchable_fungible_asset_enabled [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:530:5+128
procedure {:inline 1} $1_features_dispatchable_fungible_asset_enabled() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 63 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:531:20+27
    assume {:print "$at(8,19347,19374)"} true;
    $t0 := 63;
    assume $IsValid'u64'($t0);

    // $t1 := opaque begin: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:531:9+39

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:531:9+39
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, features::spec_is_enabled($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:531:9+39
    assume $IsEqual'bool'($t1, $1_features_spec_is_enabled($t0));

    // $t1 := opaque end: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:531:9+39

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:531:9+39
    assume {:print "$track_return(5,31,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:532:5+1
    assume {:print "$at(8,19380,19381)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:532:5+1
    assume {:print "$at(8,19380,19381)"} true;
    $ret0 := $t1;
    return;

}

// fun features::module_event_migration_enabled [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:468:5+118
procedure {:inline 1} $1_features_module_event_migration_enabled() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 57 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:469:20+22
    assume {:print "$at(8,17041,17063)"} true;
    $t0 := 57;
    assume $IsValid'u64'($t0);

    // $t1 := opaque begin: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:469:9+34

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:469:9+34
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, features::spec_is_enabled($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:469:9+34
    assume $IsEqual'bool'($t1, $1_features_spec_is_enabled($t0));

    // $t1 := opaque end: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:469:9+34

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:469:9+34
    assume {:print "$track_return(5,88,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:470:5+1
    assume {:print "$at(8,17069,17070)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:470:5+1
    assume {:print "$at(8,17069,17070)"} true;
    $ret0 := $t1;
    return;

}

// fun features::new_accounts_default_to_fa_apt_store_enabled [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:539:5+146
procedure {:inline 1} $1_features_new_accounts_default_to_fa_apt_store_enabled() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 64 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:540:20+36
    assume {:print "$at(8,19690,19726)"} true;
    $t0 := 64;
    assume $IsValid'u64'($t0);

    // $t1 := opaque begin: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:540:9+48

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:540:9+48
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, features::spec_is_enabled($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:540:9+48
    assume $IsEqual'bool'($t1, $1_features_spec_is_enabled($t0));

    // $t1 := opaque end: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:540:9+48

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:540:9+48
    assume {:print "$track_return(5,93,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:541:5+1
    assume {:print "$at(8,19732,19733)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:541:5+1
    assume {:print "$at(8,19732,19733)"} true;
    $ret0 := $t1;
    return;

}

// fun features::operations_default_to_fa_apt_store_enabled [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:548:5+142
procedure {:inline 1} $1_features_operations_default_to_fa_apt_store_enabled() returns ($ret0: bool)
{
    // declare local variables
    var $t0: int;
    var $t1: bool;
    var $temp_0'bool': bool;

    // bytecode translation starts here
    // $t0 := 65 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:549:20+34
    assume {:print "$at(8,20034,20068)"} true;
    $t0 := 65;
    assume $IsValid'u64'($t0);

    // $t1 := opaque begin: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:549:9+46

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:549:9+46
    assume $IsValid'bool'($t1);

    // assume Eq<bool>($t1, features::spec_is_enabled($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:549:9+46
    assume $IsEqual'bool'($t1, $1_features_spec_is_enabled($t0));

    // $t1 := opaque end: features::is_enabled($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:549:9+46

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:549:9+46
    assume {:print "$track_return(5,96,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:550:5+1
    assume {:print "$at(8,20074,20075)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/configs/features.move:550:5+1
    assume {:print "$at(8,20074,20075)"} true;
    $ret0 := $t1;
    return;

}

// struct type_info::TypeInfo at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/type_info.move:17:5+145
datatype $1_type_info_TypeInfo {
    $1_type_info_TypeInfo($account_address: int, $module_name: Vec (int), $struct_name: Vec (int))
}
function {:inline} $Update'$1_type_info_TypeInfo'_account_address(s: $1_type_info_TypeInfo, x: int): $1_type_info_TypeInfo {
    $1_type_info_TypeInfo(x, s->$module_name, s->$struct_name)
}
function {:inline} $Update'$1_type_info_TypeInfo'_module_name(s: $1_type_info_TypeInfo, x: Vec (int)): $1_type_info_TypeInfo {
    $1_type_info_TypeInfo(s->$account_address, x, s->$struct_name)
}
function {:inline} $Update'$1_type_info_TypeInfo'_struct_name(s: $1_type_info_TypeInfo, x: Vec (int)): $1_type_info_TypeInfo {
    $1_type_info_TypeInfo(s->$account_address, s->$module_name, x)
}
function $IsValid'$1_type_info_TypeInfo'(s: $1_type_info_TypeInfo): bool {
    $IsValid'address'(s->$account_address)
      && $IsValid'vec'u8''(s->$module_name)
      && $IsValid'vec'u8''(s->$struct_name)
}
function {:inline} $IsEqual'$1_type_info_TypeInfo'(s1: $1_type_info_TypeInfo, s2: $1_type_info_TypeInfo): bool {
    $IsEqual'address'(s1->$account_address, s2->$account_address)
    && $IsEqual'vec'u8''(s1->$module_name, s2->$module_name)
    && $IsEqual'vec'u8''(s1->$struct_name, s2->$struct_name)}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/system_addresses.move:59:5+99
function {:inline} $1_system_addresses_$is_aptos_framework_address(addr: int): bool {
    $IsEqual'address'(addr, 1)
}

// struct guid::GUID at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:7:5+50
datatype $1_guid_GUID {
    $1_guid_GUID($id: $1_guid_ID)
}
function {:inline} $Update'$1_guid_GUID'_id(s: $1_guid_GUID, x: $1_guid_ID): $1_guid_GUID {
    $1_guid_GUID(x)
}
function $IsValid'$1_guid_GUID'(s: $1_guid_GUID): bool {
    $IsValid'$1_guid_ID'(s->$id)
}
function {:inline} $IsEqual'$1_guid_GUID'(s1: $1_guid_GUID, s2: $1_guid_GUID): bool {
    s1 == s2
}

// struct guid::ID at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:12:5+209
datatype $1_guid_ID {
    $1_guid_ID($creation_num: int, $addr: int)
}
function {:inline} $Update'$1_guid_ID'_creation_num(s: $1_guid_ID, x: int): $1_guid_ID {
    $1_guid_ID(x, s->$addr)
}
function {:inline} $Update'$1_guid_ID'_addr(s: $1_guid_ID, x: int): $1_guid_ID {
    $1_guid_ID(s->$creation_num, x)
}
function $IsValid'$1_guid_ID'(s: $1_guid_ID): bool {
    $IsValid'u64'(s->$creation_num)
      && $IsValid'address'(s->$addr)
}
function {:inline} $IsEqual'$1_guid_ID'(s1: $1_guid_ID, s2: $1_guid_ID): bool {
    s1 == s2
}

// fun guid::create [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:23:5+286
procedure {:inline 1} $1_guid_create(_$t0: int, _$t1: $Mutation (int)) returns ($ret0: $1_guid_GUID, $ret1: $Mutation (int))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_guid_ID;
    var $t8: $1_guid_GUID;
    var $t0: int;
    var $t1: $Mutation (int);
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[addr]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:23:5+1
    assume {:print "$at(146,836,837)"} true;
    assume {:print "$track_local(13,0,0):", $t0} $t0 == $t0;

    // trace_local[creation_num_ref]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:23:5+1
    $temp_0'u64' := $Dereference($t1);
    assume {:print "$track_local(13,0,1):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // $t3 := read_ref($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:24:28+17
    assume {:print "$at(146,940,957)"} true;
    $t3 := $Dereference($t1);

    // trace_local[creation_num]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:24:13+12
    assume {:print "$track_local(13,0,2):", $t3} $t3 == $t3;

    // $t4 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:25:44+1
    assume {:print "$at(146,1002,1003)"} true;
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // $t5 := +($t3, $t4) on_abort goto L2 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:25:42+1
    call $t5 := $AddU64($t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(146,1000,1001)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(13,0):", $t6} $t6 == $t6;
        goto L2;
    }

    // write_ref($t1, $t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:25:9+36
    $t1 := $UpdateMutation($t1, $t5);

    // $t7 := pack guid::ID($t3, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:27:17+70
    assume {:print "$at(146,1036,1106)"} true;
    $t7 := $1_guid_ID($t3, $t0);

    // $t8 := pack guid::GUID($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:26:9+103
    assume {:print "$at(146,1013,1116)"} true;
    $t8 := $1_guid_GUID($t7);

    // trace_return[0]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:26:9+103
    assume {:print "$track_return(13,0,0):", $t8} $t8 == $t8;

    // trace_local[creation_num_ref]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:26:9+103
    $temp_0'u64' := $Dereference($t1);
    assume {:print "$track_local(13,0,1):", $temp_0'u64'} $temp_0'u64' == $temp_0'u64';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:32:5+1
    assume {:print "$at(146,1121,1122)"} true;
L1:

    // return $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:32:5+1
    assume {:print "$at(146,1121,1122)"} true;
    $ret0 := $t8;
    $ret1 := $t1;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:32:5+1
L2:

    // abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/guid.move:32:5+1
    assume {:print "$at(146,1121,1122)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'bool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'bool'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u8'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u8'(bytes);
$IsValid'u8'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u64'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u64'(bytes);
$IsValid'u64'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u128'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u128'(bytes);
$IsValid'u128'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'u256'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'u256'(bytes);
$IsValid'u256'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'address'(bytes: Vec (int)): int;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'address'(bytes);
$IsValid'address'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'signer'(bytes: Vec (int)): $signer;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'signer'(bytes);
$IsValid'signer'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'u8''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'u8''(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'u128''(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'u128''(bytes);
$IsValid'vec'u128''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_aggregator_Aggregator''(bytes: Vec (int)): Vec ($1_aggregator_Aggregator);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_aggregator_Aggregator''(bytes);
$IsValid'vec'$1_aggregator_Aggregator''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_object_Object'$1_fungible_asset_Metadata'''(bytes: Vec (int)): Vec ($1_object_Object'$1_fungible_asset_Metadata');
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_object_Object'$1_fungible_asset_Metadata'''(bytes);
$IsValid'vec'$1_object_Object'$1_fungible_asset_Metadata'''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_optional_aggregator_Integer''(bytes: Vec (int)): Vec ($1_optional_aggregator_Integer);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_optional_aggregator_Integer''(bytes);
$IsValid'vec'$1_optional_aggregator_Integer''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_optional_aggregator_OptionalAggregator''(bytes: Vec (int)): Vec ($1_optional_aggregator_OptionalAggregator);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_optional_aggregator_OptionalAggregator''(bytes);
$IsValid'vec'$1_optional_aggregator_OptionalAggregator''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_function_info_FunctionInfo''(bytes: Vec (int)): Vec ($1_function_info_FunctionInfo);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_function_info_FunctionInfo''(bytes);
$IsValid'vec'$1_function_info_FunctionInfo''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_fungible_asset_TransferRef''(bytes: Vec (int)): Vec ($1_fungible_asset_TransferRef);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_fungible_asset_TransferRef''(bytes);
$IsValid'vec'$1_fungible_asset_TransferRef''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_fungible_asset_BurnRef''(bytes: Vec (int)): Vec ($1_fungible_asset_BurnRef);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_fungible_asset_BurnRef''(bytes);
$IsValid'vec'$1_fungible_asset_BurnRef''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_fungible_asset_FungibleStore''(bytes: Vec (int)): Vec ($1_fungible_asset_FungibleStore);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_fungible_asset_FungibleStore''(bytes);
$IsValid'vec'$1_fungible_asset_FungibleStore''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_fungible_asset_MintRef''(bytes: Vec (int)): Vec ($1_fungible_asset_MintRef);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_fungible_asset_MintRef''(bytes);
$IsValid'vec'$1_fungible_asset_MintRef''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): Vec ($1_aptos_coin_AptosCoin);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'vec'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'vec'#0''(bytes: Vec (int)): Vec (#0);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'vec'#0''(bytes);
$IsValid'vec'#0''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'u128''(bytes: Vec (int)): $1_option_Option'u128';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'u128''(bytes);
$IsValid'$1_option_Option'u128''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_aggregator_Aggregator''(bytes: Vec (int)): $1_option_Option'$1_aggregator_Aggregator';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_aggregator_Aggregator''(bytes);
$IsValid'$1_option_Option'$1_aggregator_Aggregator''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''(bytes: Vec (int)): $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''(bytes);
$IsValid'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_Integer''(bytes: Vec (int)): $1_option_Option'$1_optional_aggregator_Integer';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_Integer''(bytes);
$IsValid'$1_option_Option'$1_optional_aggregator_Integer''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(bytes: Vec (int)): $1_option_Option'$1_optional_aggregator_OptionalAggregator';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(bytes);
$IsValid'$1_option_Option'$1_optional_aggregator_OptionalAggregator''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_function_info_FunctionInfo''(bytes: Vec (int)): $1_option_Option'$1_function_info_FunctionInfo';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_function_info_FunctionInfo''(bytes);
$IsValid'$1_option_Option'$1_function_info_FunctionInfo''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_fungible_asset_TransferRef''(bytes: Vec (int)): $1_option_Option'$1_fungible_asset_TransferRef';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_fungible_asset_TransferRef''(bytes);
$IsValid'$1_option_Option'$1_fungible_asset_TransferRef''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_fungible_asset_BurnRef''(bytes: Vec (int)): $1_option_Option'$1_fungible_asset_BurnRef';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_fungible_asset_BurnRef''(bytes);
$IsValid'$1_option_Option'$1_fungible_asset_BurnRef''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_option_Option'$1_fungible_asset_MintRef''(bytes: Vec (int)): $1_option_Option'$1_fungible_asset_MintRef';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_option_Option'$1_fungible_asset_MintRef''(bytes);
$IsValid'$1_option_Option'$1_fungible_asset_MintRef''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_string_String'(bytes: Vec (int)): $1_string_String;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_string_String'(bytes);
$IsValid'$1_string_String'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_features_Features'(bytes: Vec (int)): $1_features_Features;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_features_Features'(bytes);
$IsValid'$1_features_Features'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_type_info_TypeInfo'(bytes: Vec (int)): $1_type_info_TypeInfo;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_type_info_TypeInfo'(bytes);
$IsValid'$1_type_info_TypeInfo'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_table_Table'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata'''(bytes: Vec (int)): Table int ($1_object_Object'$1_fungible_asset_Metadata');
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_table_Table'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata'''(bytes);
$IsValid'$1_table_Table'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata'''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_guid_GUID'(bytes: Vec (int)): $1_guid_GUID;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_guid_GUID'(bytes);
$IsValid'$1_guid_GUID'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_guid_ID'(bytes: Vec (int)): $1_guid_ID;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_guid_ID'(bytes);
$IsValid'$1_guid_ID'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_object_TransferEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_object_TransferEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_object_TransferEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_object_TransferEvent''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_DepositEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_coin_DepositEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_DepositEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_coin_DepositEvent''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_WithdrawEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_coin_WithdrawEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_coin_WithdrawEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_coin_WithdrawEvent''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes: Vec (int)): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes);
$IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_aggregator_Aggregator'(bytes: Vec (int)): $1_aggregator_Aggregator;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_aggregator_Aggregator'(bytes);
$IsValid'$1_aggregator_Aggregator'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u64''(bytes: Vec (int)): $1_aggregator_v2_Aggregator'u64';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u64''(bytes);
$IsValid'$1_aggregator_v2_Aggregator'u64''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u128''(bytes: Vec (int)): $1_aggregator_v2_Aggregator'u128';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_aggregator_v2_Aggregator'u128''(bytes);
$IsValid'$1_aggregator_v2_Aggregator'u128''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_ConstructorRef'(bytes: Vec (int)): $1_object_ConstructorRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_ConstructorRef'(bytes);
$IsValid'$1_object_ConstructorRef'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_DeriveRef'(bytes: Vec (int)): $1_object_DeriveRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_DeriveRef'(bytes);
$IsValid'$1_object_DeriveRef'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_FungibleStore''(bytes: Vec (int)): $1_object_Object'$1_fungible_asset_FungibleStore';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_FungibleStore''(bytes);
$IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(bytes: Vec (int)): $1_object_Object'$1_fungible_asset_Metadata';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_Object'$1_fungible_asset_Metadata''(bytes);
$IsValid'$1_object_Object'$1_fungible_asset_Metadata''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_ObjectCore'(bytes: Vec (int)): $1_object_ObjectCore;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_ObjectCore'(bytes);
$IsValid'$1_object_ObjectCore'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_TransferRef'(bytes: Vec (int)): $1_object_TransferRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_TransferRef'(bytes);
$IsValid'$1_object_TransferRef'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_object_Untransferable'(bytes: Vec (int)): $1_object_Untransferable;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_object_Untransferable'(bytes);
$IsValid'$1_object_Untransferable'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_optional_aggregator_Integer'(bytes: Vec (int)): $1_optional_aggregator_Integer;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_optional_aggregator_Integer'(bytes);
$IsValid'$1_optional_aggregator_Integer'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_optional_aggregator_OptionalAggregator'(bytes: Vec (int)): $1_optional_aggregator_OptionalAggregator;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_optional_aggregator_OptionalAggregator'(bytes);
$IsValid'$1_optional_aggregator_OptionalAggregator'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_function_info_FunctionInfo'(bytes: Vec (int)): $1_function_info_FunctionInfo;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_function_info_FunctionInfo'(bytes);
$IsValid'$1_function_info_FunctionInfo'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_TransferRef'(bytes: Vec (int)): $1_fungible_asset_TransferRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_TransferRef'(bytes);
$IsValid'$1_fungible_asset_TransferRef'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Untransferable'(bytes: Vec (int)): $1_fungible_asset_Untransferable;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Untransferable'(bytes);
$IsValid'$1_fungible_asset_Untransferable'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(bytes: Vec (int)): $1_fungible_asset_BurnRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_BurnRef'(bytes);
$IsValid'$1_fungible_asset_BurnRef'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentFungibleBalance'(bytes: Vec (int)): $1_fungible_asset_ConcurrentFungibleBalance;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentFungibleBalance'(bytes);
$IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentSupply'(bytes: Vec (int)): $1_fungible_asset_ConcurrentSupply;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_ConcurrentSupply'(bytes);
$IsValid'$1_fungible_asset_ConcurrentSupply'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Deposit'(bytes: Vec (int)): $1_fungible_asset_Deposit;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Deposit'(bytes);
$IsValid'$1_fungible_asset_Deposit'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_DispatchFunctionStore'(bytes: Vec (int)): $1_fungible_asset_DispatchFunctionStore;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_DispatchFunctionStore'(bytes);
$IsValid'$1_fungible_asset_DispatchFunctionStore'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_FungibleAsset'(bytes: Vec (int)): $1_fungible_asset_FungibleAsset;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_FungibleAsset'(bytes);
$IsValid'$1_fungible_asset_FungibleAsset'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_FungibleStore'(bytes: Vec (int)): $1_fungible_asset_FungibleStore;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_FungibleStore'(bytes);
$IsValid'$1_fungible_asset_FungibleStore'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Metadata'(bytes: Vec (int)): $1_fungible_asset_Metadata;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Metadata'(bytes);
$IsValid'$1_fungible_asset_Metadata'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_MintRef'(bytes: Vec (int)): $1_fungible_asset_MintRef;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_MintRef'(bytes);
$IsValid'$1_fungible_asset_MintRef'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Supply'(bytes: Vec (int)): $1_fungible_asset_Supply;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Supply'(bytes);
$IsValid'$1_fungible_asset_Supply'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_fungible_asset_Withdraw'(bytes: Vec (int)): $1_fungible_asset_Withdraw;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_fungible_asset_Withdraw'(bytes);
$IsValid'$1_fungible_asset_Withdraw'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_dispatchable_fungible_asset_TransferRefStore'(bytes: Vec (int)): $1_dispatchable_fungible_asset_TransferRefStore;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_dispatchable_fungible_asset_TransferRefStore'(bytes);
$IsValid'$1_dispatchable_fungible_asset_TransferRefStore'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_primary_fungible_store_DeriveRefPod'(bytes: Vec (int)): $1_primary_fungible_store_DeriveRefPod;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_primary_fungible_store_DeriveRefPod'(bytes);
$IsValid'$1_primary_fungible_store_DeriveRefPod'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_DepositEvent'(bytes: Vec (int)): $1_coin_DepositEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_DepositEvent'(bytes);
$IsValid'$1_coin_DepositEvent'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_Coin'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_Coin'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_Coin'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_CoinConversionMap'(bytes: Vec (int)): $1_coin_CoinConversionMap;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_CoinConversionMap'(bytes);
$IsValid'$1_coin_CoinConversionMap'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_CoinDeposit'(bytes: Vec (int)): $1_coin_CoinDeposit;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_CoinDeposit'(bytes);
$IsValid'$1_coin_CoinDeposit'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_MigrationFlag'(bytes: Vec (int)): $1_coin_MigrationFlag;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_MigrationFlag'(bytes);
$IsValid'$1_coin_MigrationFlag'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_MintCapability'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_PairCreation'(bytes: Vec (int)): $1_coin_PairCreation;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_PairCreation'(bytes);
$IsValid'$1_coin_PairCreation'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_PairedCoinType'(bytes: Vec (int)): $1_coin_PairedCoinType;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_PairedCoinType'(bytes);
$IsValid'$1_coin_PairedCoinType'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_PairedFungibleAssetRefs'(bytes: Vec (int)): $1_coin_PairedFungibleAssetRefs;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_PairedFungibleAssetRefs'(bytes);
$IsValid'$1_coin_PairedFungibleAssetRefs'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_aptos_coin_AptosCoin'(bytes: Vec (int)): $1_aptos_coin_AptosCoin;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_aptos_coin_AptosCoin'(bytes);
$IsValid'$1_aptos_coin_AptosCoin'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(bytes: Vec (int)): $1_chain_status_GenesisEndMarker;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_chain_status_GenesisEndMarker'(bytes);
$IsValid'$1_chain_status_GenesisEndMarker'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(bytes: Vec (int)): $1_timestamp_CurrentTimeMicroseconds;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_timestamp_CurrentTimeMicroseconds'(bytes);
$IsValid'$1_timestamp_CurrentTimeMicroseconds'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(bytes: Vec (int)): Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(bytes);
$IsValid'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(bytes: Vec (int)): Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(bytes);
$IsValid'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(bytes: Vec (int)): Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(bytes);
$IsValid'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(bytes: Vec (int)): $1_reconfiguration_Configuration;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_reconfiguration_Configuration'(bytes);
$IsValid'$1_reconfiguration_Configuration'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_ethereum_EthereumAddress'(bytes: Vec (int)): $1_ethereum_EthereumAddress;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_ethereum_EthereumAddress'(bytes);
$IsValid'$1_ethereum_EthereumAddress'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''(bytes: Vec (int)): $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''(bytes);
$IsValid'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''(bytes: Vec (int)): $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''(bytes);
$IsValid'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_store_AddressPair'#0_#1''(bytes: Vec (int)): $1_atomic_bridge_store_AddressPair'#0_#1';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_store_AddressPair'#0_#1''(bytes);
$IsValid'$1_atomic_bridge_store_AddressPair'#0_#1''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(bytes: Vec (int)): $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(bytes);
$IsValid'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(bytes: Vec (int)): $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(bytes);
$IsValid'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(bytes: Vec (int)): $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(bytes);
$IsValid'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_store_Nonce'(bytes: Vec (int)): $1_atomic_bridge_store_Nonce;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_store_Nonce'(bytes);
$IsValid'$1_atomic_bridge_store_Nonce'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(bytes: Vec (int)): $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(bytes);
$IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(bytes: Vec (int)): $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(bytes);
$IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(bytes: Vec (int)): $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(bytes);
$IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_configuration_BridgeConfig'(bytes: Vec (int)): $1_atomic_bridge_configuration_BridgeConfig;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_configuration_BridgeConfig'(bytes);
$IsValid'$1_atomic_bridge_configuration_BridgeConfig'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_configuration_BridgeConfigOperatorUpdated'(bytes: Vec (int)): $1_atomic_bridge_configuration_BridgeConfigOperatorUpdated;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_configuration_BridgeConfigOperatorUpdated'(bytes);
$IsValid'$1_atomic_bridge_configuration_BridgeConfigOperatorUpdated'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_configuration_CounterpartyTimeLockUpdated'(bytes: Vec (int)): $1_atomic_bridge_configuration_CounterpartyTimeLockUpdated;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_configuration_CounterpartyTimeLockUpdated'(bytes);
$IsValid'$1_atomic_bridge_configuration_CounterpartyTimeLockUpdated'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_configuration_InitiatorTimeLockUpdated'(bytes: Vec (int)): $1_atomic_bridge_configuration_InitiatorTimeLockUpdated;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_configuration_InitiatorTimeLockUpdated'(bytes);
$IsValid'$1_atomic_bridge_configuration_InitiatorTimeLockUpdated'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_AptosCoinMintCapability'(bytes: Vec (int)): $1_atomic_bridge_AptosCoinMintCapability;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_AptosCoinMintCapability'(bytes);
$IsValid'$1_atomic_bridge_AptosCoinMintCapability'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_AptosFABurnCapabilities'(bytes: Vec (int)): $1_atomic_bridge_AptosFABurnCapabilities;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_AptosFABurnCapabilities'(bytes);
$IsValid'$1_atomic_bridge_AptosFABurnCapabilities'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_AptosCoinBurnCapability'(bytes: Vec (int)): $1_atomic_bridge_AptosCoinBurnCapability;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_AptosCoinBurnCapability'(bytes);
$IsValid'$1_atomic_bridge_AptosCoinBurnCapability'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_counterparty_BridgeTransferCancelledEvent'(bytes: Vec (int)): $1_atomic_bridge_counterparty_BridgeTransferCancelledEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_counterparty_BridgeTransferCancelledEvent'(bytes);
$IsValid'$1_atomic_bridge_counterparty_BridgeTransferCancelledEvent'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_counterparty_BridgeTransferCompletedEvent'(bytes: Vec (int)): $1_atomic_bridge_counterparty_BridgeTransferCompletedEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_counterparty_BridgeTransferCompletedEvent'(bytes);
$IsValid'$1_atomic_bridge_counterparty_BridgeTransferCompletedEvent'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'(bytes: Vec (int)): $1_atomic_bridge_counterparty_BridgeTransferLockedEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'(bytes);
$IsValid'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_initiator_BridgeTransferCompletedEvent'(bytes: Vec (int)): $1_atomic_bridge_initiator_BridgeTransferCompletedEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_initiator_BridgeTransferCompletedEvent'(bytes);
$IsValid'$1_atomic_bridge_initiator_BridgeTransferCompletedEvent'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'(bytes: Vec (int)): $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'(bytes);
$IsValid'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'$1_atomic_bridge_initiator_BridgeTransferRefundedEvent'(bytes: Vec (int)): $1_atomic_bridge_initiator_BridgeTransferRefundedEvent;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'$1_atomic_bridge_initiator_BridgeTransferRefundedEvent'(bytes);
$IsValid'$1_atomic_bridge_initiator_BridgeTransferRefundedEvent'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'#0'(bytes: Vec (int)): #0;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'#0'(bytes);
$IsValid'#0'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:7:9+41
function  $1_from_bcs_deserialize'#1'(bytes: Vec (int)): #1;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserialize'#1'(bytes);
$IsValid'#1'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'bool'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'bool'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u8'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u8'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u64'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u64'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u128'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u128'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'u256'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'u256'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'address'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'address'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'signer'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'signer'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'u8''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'u8''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'u128''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'u128''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_aggregator_Aggregator''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_aggregator_Aggregator''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_object_Object'$1_fungible_asset_Metadata'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_object_Object'$1_fungible_asset_Metadata'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_optional_aggregator_Integer''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_optional_aggregator_Integer''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_optional_aggregator_OptionalAggregator''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_optional_aggregator_OptionalAggregator''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_function_info_FunctionInfo''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_function_info_FunctionInfo''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_fungible_asset_TransferRef''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_fungible_asset_TransferRef''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_fungible_asset_BurnRef''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_fungible_asset_BurnRef''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_fungible_asset_FungibleStore''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_fungible_asset_FungibleStore''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_fungible_asset_MintRef''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_fungible_asset_MintRef''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'vec'#0''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'vec'#0''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'u128''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'u128''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_aggregator_Aggregator''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_aggregator_Aggregator''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_Integer''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_Integer''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_function_info_FunctionInfo''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_function_info_FunctionInfo''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_fungible_asset_TransferRef''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_fungible_asset_TransferRef''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_fungible_asset_BurnRef''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_fungible_asset_BurnRef''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_option_Option'$1_fungible_asset_MintRef''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_option_Option'$1_fungible_asset_MintRef''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_string_String'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_string_String'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_features_Features'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_features_Features'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_type_info_TypeInfo'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_type_info_TypeInfo'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_table_Table'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_table_Table'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_guid_GUID'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_guid_GUID'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_guid_ID'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_guid_ID'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_object_TransferEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_object_TransferEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_DepositEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_DepositEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_WithdrawEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_coin_WithdrawEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_aggregator_Aggregator'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_aggregator_Aggregator'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u64''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u64''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u128''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_aggregator_v2_Aggregator'u128''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_ConstructorRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_ConstructorRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_DeriveRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_DeriveRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_FungibleStore''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_FungibleStore''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_Object'$1_fungible_asset_Metadata''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_ObjectCore'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_ObjectCore'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_TransferRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_TransferRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_object_Untransferable'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_object_Untransferable'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_optional_aggregator_Integer'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_optional_aggregator_Integer'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_optional_aggregator_OptionalAggregator'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_optional_aggregator_OptionalAggregator'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_function_info_FunctionInfo'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_function_info_FunctionInfo'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_TransferRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_TransferRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Untransferable'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Untransferable'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_BurnRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentFungibleBalance'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentFungibleBalance'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentSupply'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_ConcurrentSupply'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Deposit'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Deposit'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_DispatchFunctionStore'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_DispatchFunctionStore'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_FungibleAsset'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_FungibleAsset'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_FungibleStore'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_FungibleStore'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Metadata'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Metadata'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_MintRef'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_MintRef'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Supply'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Supply'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_fungible_asset_Withdraw'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_fungible_asset_Withdraw'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_dispatchable_fungible_asset_TransferRefStore'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_dispatchable_fungible_asset_TransferRefStore'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_primary_fungible_store_DeriveRefPod'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_primary_fungible_store_DeriveRefPod'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_DepositEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_DepositEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_Coin'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_Coin'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_CoinConversionMap'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_CoinConversionMap'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_CoinDeposit'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_CoinDeposit'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_MigrationFlag'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_MigrationFlag'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_PairCreation'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_PairCreation'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_PairedCoinType'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_PairedCoinType'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_PairedFungibleAssetRefs'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_PairedFungibleAssetRefs'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_aptos_coin_AptosCoin'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_aptos_coin_AptosCoin'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_chain_status_GenesisEndMarker'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_timestamp_CurrentTimeMicroseconds'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_reconfiguration_Configuration'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_ethereum_EthereumAddress'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_ethereum_EthereumAddress'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_store_AddressPair'#0_#1''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_store_AddressPair'#0_#1''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_store_Nonce'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_store_Nonce'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_configuration_BridgeConfig'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_configuration_BridgeConfig'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_configuration_BridgeConfigOperatorUpdated'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_configuration_BridgeConfigOperatorUpdated'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_configuration_CounterpartyTimeLockUpdated'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_configuration_CounterpartyTimeLockUpdated'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_configuration_InitiatorTimeLockUpdated'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_configuration_InitiatorTimeLockUpdated'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_AptosCoinMintCapability'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_AptosCoinMintCapability'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_AptosFABurnCapabilities'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_AptosFABurnCapabilities'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_AptosCoinBurnCapability'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_AptosCoinBurnCapability'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_counterparty_BridgeTransferCancelledEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_counterparty_BridgeTransferCancelledEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_counterparty_BridgeTransferCompletedEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_counterparty_BridgeTransferCompletedEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_initiator_BridgeTransferCompletedEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_initiator_BridgeTransferCompletedEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'$1_atomic_bridge_initiator_BridgeTransferRefundedEvent'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'$1_atomic_bridge_initiator_BridgeTransferRefundedEvent'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'#0'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'#0'(bytes);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/from_bcs.spec.move:11:9+47
function  $1_from_bcs_deserializable'#1'(bytes: Vec (int)): bool;
axiom (forall bytes: Vec (int) ::
(var $$res := $1_from_bcs_deserializable'#1'(bytes);
$IsValid'bool'($$res)));

// struct event::EventHandle<object::TransferEvent> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_object_TransferEvent' {
    $1_event_EventHandle'$1_object_TransferEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_object_TransferEvent''_counter(s: $1_event_EventHandle'$1_object_TransferEvent', x: int): $1_event_EventHandle'$1_object_TransferEvent' {
    $1_event_EventHandle'$1_object_TransferEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_object_TransferEvent''_guid(s: $1_event_EventHandle'$1_object_TransferEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_object_TransferEvent' {
    $1_event_EventHandle'$1_object_TransferEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_object_TransferEvent''(s: $1_event_EventHandle'$1_object_TransferEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_object_TransferEvent''(s1: $1_event_EventHandle'$1_object_TransferEvent', s2: $1_event_EventHandle'$1_object_TransferEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<coin::DepositEvent> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_coin_DepositEvent' {
    $1_event_EventHandle'$1_coin_DepositEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_coin_DepositEvent''_counter(s: $1_event_EventHandle'$1_coin_DepositEvent', x: int): $1_event_EventHandle'$1_coin_DepositEvent' {
    $1_event_EventHandle'$1_coin_DepositEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_coin_DepositEvent''_guid(s: $1_event_EventHandle'$1_coin_DepositEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_coin_DepositEvent' {
    $1_event_EventHandle'$1_coin_DepositEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_coin_DepositEvent''(s: $1_event_EventHandle'$1_coin_DepositEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_coin_DepositEvent''(s1: $1_event_EventHandle'$1_coin_DepositEvent', s2: $1_event_EventHandle'$1_coin_DepositEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<coin::WithdrawEvent> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_coin_WithdrawEvent' {
    $1_event_EventHandle'$1_coin_WithdrawEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_coin_WithdrawEvent''_counter(s: $1_event_EventHandle'$1_coin_WithdrawEvent', x: int): $1_event_EventHandle'$1_coin_WithdrawEvent' {
    $1_event_EventHandle'$1_coin_WithdrawEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_coin_WithdrawEvent''_guid(s: $1_event_EventHandle'$1_coin_WithdrawEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_coin_WithdrawEvent' {
    $1_event_EventHandle'$1_coin_WithdrawEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_coin_WithdrawEvent''(s: $1_event_EventHandle'$1_coin_WithdrawEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_coin_WithdrawEvent''(s1: $1_event_EventHandle'$1_coin_WithdrawEvent', s2: $1_event_EventHandle'$1_coin_WithdrawEvent'): bool {
    s1 == s2
}

// struct event::EventHandle<reconfiguration::NewEpochEvent> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:34:5+224
datatype $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'($counter: int, $guid: $1_guid_GUID)
}
function {:inline} $Update'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''_counter(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', x: int): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'(x, s->$guid)
}
function {:inline} $Update'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''_guid(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', x: $1_guid_GUID): $1_event_EventHandle'$1_reconfiguration_NewEpochEvent' {
    $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'(s->$counter, x)
}
function $IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): bool {
    $IsValid'u64'(s->$counter)
      && $IsValid'$1_guid_GUID'(s->$guid)
}
function {:inline} $IsEqual'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s1: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent', s2: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): bool {
    s1 == s2
}

// fun event::new_event_handle<object::TransferEvent> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:43:5+165
procedure {:inline 1} $1_event_new_event_handle'$1_object_TransferEvent'(_$t0: $1_guid_GUID) returns ($ret0: $1_event_EventHandle'$1_object_TransferEvent')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_event_EventHandle'$1_object_TransferEvent';
    var $t0: $1_guid_GUID;
    var $temp_0'$1_event_EventHandle'$1_object_TransferEvent'': $1_event_EventHandle'$1_object_TransferEvent';
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[guid]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:43:5+1
    assume {:print "$at(136,1543,1544)"} true;
    assume {:print "$track_local(15,5,0):", $t0} $t0 == $t0;

    // $t1 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:45:22+1
    assume {:print "$at(136,1672,1673)"} true;
    $t1 := 0;
    assume $IsValid'u64'($t1);

    // $t2 := pack event::EventHandle<#0>($t1, $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:44:9+68
    assume {:print "$at(136,1634,1702)"} true;
    $t2 := $1_event_EventHandle'$1_object_TransferEvent'($t1, $t0);

    // trace_return[0]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:44:9+68
    assume {:print "$track_return(15,5,0):", $t2} $t2 == $t2;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:48:5+1
    assume {:print "$at(136,1707,1708)"} true;
L1:

    // return $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/event.move:48:5+1
    assume {:print "$at(136,1707,1708)"} true;
    $ret0 := $t2;
    return;

}

// struct aggregator_v2::Aggregator<u64> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:52:5+111
datatype $1_aggregator_v2_Aggregator'u64' {
    $1_aggregator_v2_Aggregator'u64'($value: int, $max_value: int)
}
function {:inline} $Update'$1_aggregator_v2_Aggregator'u64''_value(s: $1_aggregator_v2_Aggregator'u64', x: int): $1_aggregator_v2_Aggregator'u64' {
    $1_aggregator_v2_Aggregator'u64'(x, s->$max_value)
}
function {:inline} $Update'$1_aggregator_v2_Aggregator'u64''_max_value(s: $1_aggregator_v2_Aggregator'u64', x: int): $1_aggregator_v2_Aggregator'u64' {
    $1_aggregator_v2_Aggregator'u64'(s->$value, x)
}
function $IsValid'$1_aggregator_v2_Aggregator'u64''(s: $1_aggregator_v2_Aggregator'u64'): bool {
    $IsValid'u64'(s->$value)
      && $IsValid'u64'(s->$max_value)
}
function {:inline} $IsEqual'$1_aggregator_v2_Aggregator'u64''(s1: $1_aggregator_v2_Aggregator'u64', s2: $1_aggregator_v2_Aggregator'u64'): bool {
    s1 == s2
}

// struct aggregator_v2::Aggregator<u128> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:52:5+111
datatype $1_aggregator_v2_Aggregator'u128' {
    $1_aggregator_v2_Aggregator'u128'($value: int, $max_value: int)
}
function {:inline} $Update'$1_aggregator_v2_Aggregator'u128''_value(s: $1_aggregator_v2_Aggregator'u128', x: int): $1_aggregator_v2_Aggregator'u128' {
    $1_aggregator_v2_Aggregator'u128'(x, s->$max_value)
}
function {:inline} $Update'$1_aggregator_v2_Aggregator'u128''_max_value(s: $1_aggregator_v2_Aggregator'u128', x: int): $1_aggregator_v2_Aggregator'u128' {
    $1_aggregator_v2_Aggregator'u128'(s->$value, x)
}
function $IsValid'$1_aggregator_v2_Aggregator'u128''(s: $1_aggregator_v2_Aggregator'u128'): bool {
    $IsValid'u128'(s->$value)
      && $IsValid'u128'(s->$max_value)
}
function {:inline} $IsEqual'$1_aggregator_v2_Aggregator'u128''(s1: $1_aggregator_v2_Aggregator'u128', s2: $1_aggregator_v2_Aggregator'u128'): bool {
    s1 == s2
}

// fun aggregator_v2::add<u64> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:109:5+182
procedure {:inline 1} $1_aggregator_v2_add'u64'(_$t0: $Mutation ($1_aggregator_v2_Aggregator'u64'), _$t1: int) returns ($ret0: $Mutation ($1_aggregator_v2_Aggregator'u64'))
{
    // declare local variables
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t0: $Mutation ($1_aggregator_v2_Aggregator'u64');
    var $t1: int;
    var $temp_0'$1_aggregator_v2_Aggregator'u64'': $1_aggregator_v2_Aggregator'u64';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[aggregator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:109:5+1
    assume {:print "$at(90,5345,5346)"} true;
    $temp_0'$1_aggregator_v2_Aggregator'u64'' := $Dereference($t0);
    assume {:print "$track_local(21,0,0):", $temp_0'$1_aggregator_v2_Aggregator'u64''} $temp_0'$1_aggregator_v2_Aggregator'u64'' == $temp_0'$1_aggregator_v2_Aggregator'u64'';

    // trace_local[value]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:109:5+1
    assume {:print "$track_local(21,0,1):", $t1} $t1 == $t1;

    // $t2 := opaque begin: aggregator_v2::try_add<#0>($t0, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:17+26
    assume {:print "$at(90,5450,5476)"} true;

    // $t3 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:17+26
    havoc $t3;

    // if ($t3) goto L7 else goto L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:17+26
    if ($t3) { goto L7; } else { goto L6; }

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:17+26
L7:

    // trace_abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:17+26
    assume {:print "$at(90,5450,5476)"} true;
    assume {:print "$track_abort(21,0):", $t4} $t4 == $t4;

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:17+26
    goto L5;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:17+26
L6:

    // $t0 := havoc[mut]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:17+26
    assume {:print "$at(90,5450,5476)"} true;
    havoc $temp_0'$1_aggregator_v2_Aggregator'u64'';
    $t0 := $UpdateMutation($t0, $temp_0'$1_aggregator_v2_Aggregator'u64'');

    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:17+26
    assume $IsValid'$1_aggregator_v2_Aggregator'u64''($Dereference($t0));

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:17+26
    assume $IsValid'bool'($t2);

    // $t2 := opaque end: aggregator_v2::try_add<#0>($t0, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:17+26

    // if ($t2) goto L1 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:9+78
    if ($t2) { goto L1; } else { goto L3; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:9+78
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:9+78
    assume {:print "$at(90,5442,5520)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:65+20
L0:

    // $t5 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:65+20
    assume {:print "$at(90,5498,5518)"} true;
    $t5 := 1;
    assume $IsValid'u64'($t5);

    // $t6 := error::out_of_range($t5) on_abort goto L5 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:45+41
    call $t6 := $1_error_out_of_range($t5);
    if ($abort_flag) {
        assume {:print "$at(90,5478,5519)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(21,0):", $t4} $t4 == $t4;
        goto L5;
    }

    // trace_abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:9+78
    assume {:print "$at(90,5442,5520)"} true;
    assume {:print "$track_abort(21,0):", $t6} $t6 == $t6;

    // $t4 := move($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:9+78
    $t4 := $t6;

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:9+78
    goto L5;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:87+1
L2:

    // trace_local[aggregator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:87+1
    assume {:print "$at(90,5520,5521)"} true;
    $temp_0'$1_aggregator_v2_Aggregator'u64'' := $Dereference($t0);
    assume {:print "$track_local(21,0,0):", $temp_0'$1_aggregator_v2_Aggregator'u64''} $temp_0'$1_aggregator_v2_Aggregator'u64'' == $temp_0'$1_aggregator_v2_Aggregator'u64'';

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:110:87+1
    goto L4;

    // label L3 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L3:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L0 at <internal>:1:1+10
    goto L0;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:111:5+1
    assume {:print "$at(90,5526,5527)"} true;
L4:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:111:5+1
    assume {:print "$at(90,5526,5527)"} true;
    $ret0 := $t0;
    return;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:111:5+1
L5:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator_v2/aggregator_v2.move:111:5+1
    assume {:print "$at(90,5526,5527)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.spec.move:52:10+50
function  $1_object_spec_exists_at'$1_fungible_asset_FungibleStore'(object: int): bool;
axiom (forall object: int ::
(var $$res := $1_object_spec_exists_at'$1_fungible_asset_FungibleStore'(object);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.spec.move:52:10+50
function  $1_object_spec_exists_at'$1_fungible_asset_Metadata'(object: int): bool;
axiom (forall object: int ::
(var $$res := $1_object_spec_exists_at'$1_fungible_asset_Metadata'(object);
$IsValid'bool'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.spec.move:548:10+75
function  $1_object_spec_create_object_address(source: int, seed: Vec (int)): int;
axiom (forall source: int, seed: Vec (int) ::
(var $$res := $1_object_spec_create_object_address(source, seed);
$IsValid'address'($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.spec.move:550:10+92
function  $1_object_spec_create_user_derived_object_address(source: int, derive_from: int): int;
axiom (forall source: int, derive_from: int ::
(var $$res := $1_object_spec_create_user_derived_object_address(source, derive_from);
$IsValid'address'($$res)));

// struct object::ConstructorRef at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:133:5+167
datatype $1_object_ConstructorRef {
    $1_object_ConstructorRef($self: int, $can_delete: bool)
}
function {:inline} $Update'$1_object_ConstructorRef'_self(s: $1_object_ConstructorRef, x: int): $1_object_ConstructorRef {
    $1_object_ConstructorRef(x, s->$can_delete)
}
function {:inline} $Update'$1_object_ConstructorRef'_can_delete(s: $1_object_ConstructorRef, x: bool): $1_object_ConstructorRef {
    $1_object_ConstructorRef(s->$self, x)
}
function $IsValid'$1_object_ConstructorRef'(s: $1_object_ConstructorRef): bool {
    $IsValid'address'(s->$self)
      && $IsValid'bool'(s->$can_delete)
}
function {:inline} $IsEqual'$1_object_ConstructorRef'(s1: $1_object_ConstructorRef, s2: $1_object_ConstructorRef): bool {
    s1 == s2
}

// struct object::DeriveRef at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:162:5+63
datatype $1_object_DeriveRef {
    $1_object_DeriveRef($self: int)
}
function {:inline} $Update'$1_object_DeriveRef'_self(s: $1_object_DeriveRef, x: int): $1_object_DeriveRef {
    $1_object_DeriveRef(x)
}
function $IsValid'$1_object_DeriveRef'(s: $1_object_DeriveRef): bool {
    $IsValid'address'(s->$self)
}
function {:inline} $IsEqual'$1_object_DeriveRef'(s1: $1_object_DeriveRef, s2: $1_object_DeriveRef): bool {
    s1 == s2
}

// struct object::Object<fungible_asset::FungibleStore> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:128:5+78
datatype $1_object_Object'$1_fungible_asset_FungibleStore' {
    $1_object_Object'$1_fungible_asset_FungibleStore'($inner: int)
}
function {:inline} $Update'$1_object_Object'$1_fungible_asset_FungibleStore''_inner(s: $1_object_Object'$1_fungible_asset_FungibleStore', x: int): $1_object_Object'$1_fungible_asset_FungibleStore' {
    $1_object_Object'$1_fungible_asset_FungibleStore'(x)
}
function $IsValid'$1_object_Object'$1_fungible_asset_FungibleStore''(s: $1_object_Object'$1_fungible_asset_FungibleStore'): bool {
    $IsValid'address'(s->$inner)
}
function {:inline} $IsEqual'$1_object_Object'$1_fungible_asset_FungibleStore''(s1: $1_object_Object'$1_fungible_asset_FungibleStore', s2: $1_object_Object'$1_fungible_asset_FungibleStore'): bool {
    s1 == s2
}

// struct object::Object<fungible_asset::Metadata> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:128:5+78
datatype $1_object_Object'$1_fungible_asset_Metadata' {
    $1_object_Object'$1_fungible_asset_Metadata'($inner: int)
}
function {:inline} $Update'$1_object_Object'$1_fungible_asset_Metadata''_inner(s: $1_object_Object'$1_fungible_asset_Metadata', x: int): $1_object_Object'$1_fungible_asset_Metadata' {
    $1_object_Object'$1_fungible_asset_Metadata'(x)
}
function $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s: $1_object_Object'$1_fungible_asset_Metadata'): bool {
    $IsValid'address'(s->$inner)
}
function {:inline} $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''(s1: $1_object_Object'$1_fungible_asset_Metadata', s2: $1_object_Object'$1_fungible_asset_Metadata'): bool {
    s1 == s2
}

// struct object::ObjectCore at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:97:5+551
datatype $1_object_ObjectCore {
    $1_object_ObjectCore($guid_creation_num: int, $owner: int, $allow_ungated_transfer: bool, $transfer_events: $1_event_EventHandle'$1_object_TransferEvent')
}
function {:inline} $Update'$1_object_ObjectCore'_guid_creation_num(s: $1_object_ObjectCore, x: int): $1_object_ObjectCore {
    $1_object_ObjectCore(x, s->$owner, s->$allow_ungated_transfer, s->$transfer_events)
}
function {:inline} $Update'$1_object_ObjectCore'_owner(s: $1_object_ObjectCore, x: int): $1_object_ObjectCore {
    $1_object_ObjectCore(s->$guid_creation_num, x, s->$allow_ungated_transfer, s->$transfer_events)
}
function {:inline} $Update'$1_object_ObjectCore'_allow_ungated_transfer(s: $1_object_ObjectCore, x: bool): $1_object_ObjectCore {
    $1_object_ObjectCore(s->$guid_creation_num, s->$owner, x, s->$transfer_events)
}
function {:inline} $Update'$1_object_ObjectCore'_transfer_events(s: $1_object_ObjectCore, x: $1_event_EventHandle'$1_object_TransferEvent'): $1_object_ObjectCore {
    $1_object_ObjectCore(s->$guid_creation_num, s->$owner, s->$allow_ungated_transfer, x)
}
function $IsValid'$1_object_ObjectCore'(s: $1_object_ObjectCore): bool {
    $IsValid'u64'(s->$guid_creation_num)
      && $IsValid'address'(s->$owner)
      && $IsValid'bool'(s->$allow_ungated_transfer)
      && $IsValid'$1_event_EventHandle'$1_object_TransferEvent''(s->$transfer_events)
}
function {:inline} $IsEqual'$1_object_ObjectCore'(s1: $1_object_ObjectCore, s2: $1_object_ObjectCore): bool {
    s1 == s2
}
var $1_object_ObjectCore_$memory: $Memory $1_object_ObjectCore;

// struct object::TransferEvent at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:167:5+113
datatype $1_object_TransferEvent {
    $1_object_TransferEvent($object: int, $from: int, $to: int)
}
function {:inline} $Update'$1_object_TransferEvent'_object(s: $1_object_TransferEvent, x: int): $1_object_TransferEvent {
    $1_object_TransferEvent(x, s->$from, s->$to)
}
function {:inline} $Update'$1_object_TransferEvent'_from(s: $1_object_TransferEvent, x: int): $1_object_TransferEvent {
    $1_object_TransferEvent(s->$object, x, s->$to)
}
function {:inline} $Update'$1_object_TransferEvent'_to(s: $1_object_TransferEvent, x: int): $1_object_TransferEvent {
    $1_object_TransferEvent(s->$object, s->$from, x)
}
function $IsValid'$1_object_TransferEvent'(s: $1_object_TransferEvent): bool {
    $IsValid'address'(s->$object)
      && $IsValid'address'(s->$from)
      && $IsValid'address'(s->$to)
}
function {:inline} $IsEqual'$1_object_TransferEvent'(s1: $1_object_TransferEvent, s2: $1_object_TransferEvent): bool {
    s1 == s2
}

// struct object::TransferRef at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:150:5+65
datatype $1_object_TransferRef {
    $1_object_TransferRef($self: int)
}
function {:inline} $Update'$1_object_TransferRef'_self(s: $1_object_TransferRef, x: int): $1_object_TransferRef {
    $1_object_TransferRef(x)
}
function $IsValid'$1_object_TransferRef'(s: $1_object_TransferRef): bool {
    $IsValid'address'(s->$self)
}
function {:inline} $IsEqual'$1_object_TransferRef'(s1: $1_object_TransferRef, s2: $1_object_TransferRef): bool {
    s1 == s2
}

// struct object::Untransferable at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:118:5+32
datatype $1_object_Untransferable {
    $1_object_Untransferable($dummy_field: bool)
}
function {:inline} $Update'$1_object_Untransferable'_dummy_field(s: $1_object_Untransferable, x: bool): $1_object_Untransferable {
    $1_object_Untransferable(x)
}
function $IsValid'$1_object_Untransferable'(s: $1_object_Untransferable): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_object_Untransferable'(s1: $1_object_Untransferable, s2: $1_object_Untransferable): bool {
    s1 == s2
}
var $1_object_Untransferable_$memory: $Memory $1_object_Untransferable;

// fun object::address_to_object<fungible_asset::FungibleStore> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:192:5+278
procedure {:inline 1} $1_object_address_to_object'$1_fungible_asset_FungibleStore'(_$t0: int) returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t0: int;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:192:5+1
    assume {:print "$at(156,8178,8179)"} true;
    assume {:print "$track_local(24,3,0):", $t0} $t0 == $t0;

    // $t1 := exists<object::ObjectCore>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:17+6
    assume {:print "$at(156,8261,8267)"} true;
    $t1 := $ResourceExists($1_object_ObjectCore_$memory, $t0);

    // if ($t1) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:9+77
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:9+77
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:9+77
    assume {:print "$at(156,8253,8330)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:62+22
L0:

    // $t2 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:62+22
    assume {:print "$at(156,8306,8328)"} true;
    $t2 := 2;
    assume $IsValid'u64'($t2);

    // $t3 := error::not_found($t2) on_abort goto L7 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:45+40
    call $t3 := $1_error_not_found($t2);
    if ($abort_flag) {
        assume {:print "$at(156,8289,8329)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(24,3):", $t4} $t4 == $t4;
        goto L7;
    }

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:9+77
    assume {:print "$at(156,8253,8330)"} true;
    assume {:print "$track_abort(24,3):", $t3} $t3 == $t3;

    // $t4 := move($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:9+77
    $t4 := $t3;

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:9+77
    goto L7;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:30+6
    assume {:print "$at(156,8361,8367)"} true;
L2:

    // $t5 := opaque begin: object::exists_at<#0>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:17+20
    assume {:print "$at(156,8348,8368)"} true;

    // assume WellFormed($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:17+20
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, object::spec_exists_at<#0>($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:17+20
    assume $IsEqual'bool'($t5, $1_object_spec_exists_at'$1_fungible_asset_FungibleStore'($t0));

    // $t5 := opaque end: object::exists_at<#0>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:17+20

    // if ($t5) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:9+73
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:9+73
L4:

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:9+73
    assume {:print "$at(156,8340,8413)"} true;
    goto L5;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:56+24
L3:

    // $t6 := 7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:56+24
    assume {:print "$at(156,8387,8411)"} true;
    $t6 := 7;
    assume $IsValid'u64'($t6);

    // $t7 := error::not_found($t6) on_abort goto L7 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:39+42
    call $t7 := $1_error_not_found($t6);
    if ($abort_flag) {
        assume {:print "$at(156,8370,8412)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(24,3):", $t4} $t4 == $t4;
        goto L7;
    }

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:9+73
    assume {:print "$at(156,8340,8413)"} true;
    assume {:print "$track_abort(24,3):", $t7} $t7 == $t7;

    // $t4 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:9+73
    $t4 := $t7;

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:9+73
    goto L7;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:195:28+6
    assume {:print "$at(156,8442,8448)"} true;
L5:

    // $t8 := pack object::Object<#0>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:195:9+27
    assume {:print "$at(156,8423,8450)"} true;
    $t8 := $1_object_Object'$1_fungible_asset_FungibleStore'($t0);

    // trace_return[0]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:195:9+27
    assume {:print "$track_return(24,3,0):", $t8} $t8 == $t8;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:196:5+1
    assume {:print "$at(156,8455,8456)"} true;
L6:

    // return $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:196:5+1
    assume {:print "$at(156,8455,8456)"} true;
    $ret0 := $t8;
    return;

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:196:5+1
L7:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:196:5+1
    assume {:print "$at(156,8455,8456)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun object::address_to_object<fungible_asset::Metadata> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:192:5+278
procedure {:inline 1} $1_object_address_to_object'$1_fungible_asset_Metadata'(_$t0: int) returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: $1_object_Object'$1_fungible_asset_Metadata';
    var $t0: int;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:192:5+1
    assume {:print "$at(156,8178,8179)"} true;
    assume {:print "$track_local(24,3,0):", $t0} $t0 == $t0;

    // $t1 := exists<object::ObjectCore>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:17+6
    assume {:print "$at(156,8261,8267)"} true;
    $t1 := $ResourceExists($1_object_ObjectCore_$memory, $t0);

    // if ($t1) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:9+77
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:9+77
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:9+77
    assume {:print "$at(156,8253,8330)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:62+22
L0:

    // $t2 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:62+22
    assume {:print "$at(156,8306,8328)"} true;
    $t2 := 2;
    assume $IsValid'u64'($t2);

    // $t3 := error::not_found($t2) on_abort goto L7 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:45+40
    call $t3 := $1_error_not_found($t2);
    if ($abort_flag) {
        assume {:print "$at(156,8289,8329)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(24,3):", $t4} $t4 == $t4;
        goto L7;
    }

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:9+77
    assume {:print "$at(156,8253,8330)"} true;
    assume {:print "$track_abort(24,3):", $t3} $t3 == $t3;

    // $t4 := move($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:9+77
    $t4 := $t3;

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:193:9+77
    goto L7;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:30+6
    assume {:print "$at(156,8361,8367)"} true;
L2:

    // $t5 := opaque begin: object::exists_at<#0>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:17+20
    assume {:print "$at(156,8348,8368)"} true;

    // assume WellFormed($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:17+20
    assume $IsValid'bool'($t5);

    // assume Eq<bool>($t5, object::spec_exists_at<#0>($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:17+20
    assume $IsEqual'bool'($t5, $1_object_spec_exists_at'$1_fungible_asset_Metadata'($t0));

    // $t5 := opaque end: object::exists_at<#0>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:17+20

    // if ($t5) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:9+73
    if ($t5) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:9+73
L4:

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:9+73
    assume {:print "$at(156,8340,8413)"} true;
    goto L5;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:56+24
L3:

    // $t6 := 7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:56+24
    assume {:print "$at(156,8387,8411)"} true;
    $t6 := 7;
    assume $IsValid'u64'($t6);

    // $t7 := error::not_found($t6) on_abort goto L7 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:39+42
    call $t7 := $1_error_not_found($t6);
    if ($abort_flag) {
        assume {:print "$at(156,8370,8412)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(24,3):", $t4} $t4 == $t4;
        goto L7;
    }

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:9+73
    assume {:print "$at(156,8340,8413)"} true;
    assume {:print "$track_abort(24,3):", $t7} $t7 == $t7;

    // $t4 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:9+73
    $t4 := $t7;

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:194:9+73
    goto L7;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:195:28+6
    assume {:print "$at(156,8442,8448)"} true;
L5:

    // $t8 := pack object::Object<#0>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:195:9+27
    assume {:print "$at(156,8423,8450)"} true;
    $t8 := $1_object_Object'$1_fungible_asset_Metadata'($t0);

    // trace_return[0]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:195:9+27
    assume {:print "$track_return(24,3,0):", $t8} $t8 == $t8;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:196:5+1
    assume {:print "$at(156,8455,8456)"} true;
L6:

    // return $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:196:5+1
    assume {:print "$at(156,8455,8456)"} true;
    $ret0 := $t8;
    return;

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:196:5+1
L7:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:196:5+1
    assume {:print "$at(156,8455,8456)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun object::can_generate_delete_ref [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:382:5+93
procedure {:inline 1} $1_object_can_generate_delete_ref(_$t0: $1_object_ConstructorRef) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:382:5+1
    assume {:print "$at(156,16834,16835)"} true;
    assume {:print "$track_local(24,5,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::ConstructorRef>.can_delete($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:383:9+14
    assume {:print "$at(156,16907,16921)"} true;
    $t1 := $t0->$can_delete;

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:383:9+14
    assume {:print "$track_return(24,5,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:384:5+1
    assume {:print "$at(156,16926,16927)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:384:5+1
    assume {:print "$at(156,16926,16927)"} true;
    $ret0 := $t1;
    return;

}

// fun object::convert<fungible_asset::Metadata, fungible_asset::Metadata> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:246:5+115
procedure {:inline 1} $1_object_convert'$1_fungible_asset_Metadata_$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:246:5+1
    assume {:print "$at(156,10567,10568)"} true;
    assume {:print "$track_local(24,6,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::Object<#0>>.inner($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:247:30+12
    assume {:print "$at(156,10663,10675)"} true;
    $t1 := $t0->$inner;

    // $t2 := object::address_to_object<#1>($t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:247:9+34
    call $t2 := $1_object_address_to_object'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(156,10642,10676)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(24,6):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:247:9+34
    assume {:print "$track_return(24,6,0):", $t2} $t2 == $t2;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:248:5+1
    assume {:print "$at(156,10681,10682)"} true;
L1:

    // return $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:248:5+1
    assume {:print "$at(156,10681,10682)"} true;
    $ret0 := $t2;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:248:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:248:5+1
    assume {:print "$at(156,10681,10682)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun object::create_named_object [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:252:5+284
procedure {:inline 1} $1_object_create_named_object(_$t0: $signer, _$t1: Vec (int)) returns ($ret0: $1_object_ConstructorRef)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: $1_object_ConstructorRef;
    var $t0: $signer;
    var $t1: Vec (int);
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t4, signer::$address_of($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.spec.move:154:9+50
    assume {:print "$at(157,6577,6627)"} true;
    assume ($t4 == $1_signer_$address_of($t0));

    // assume Identical($t5, object::spec_create_object_address($t4, $t1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.spec.move:155:9+65
    assume {:print "$at(157,6636,6701)"} true;
    assume ($t5 == $1_object_spec_create_object_address($t4, $t1));

    // trace_local[creator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:252:5+1
    assume {:print "$at(156,10888,10889)"} true;
    assume {:print "$track_local(24,9,0):", $t0} $t0 == $t0;

    // trace_local[seed]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:252:5+1
    assume {:print "$track_local(24,9,1):", $t1} $t1 == $t1;

    // $t6 := signer::address_of($t0) on_abort goto L2 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:253:31+27
    assume {:print "$at(156,11003,11030)"} true;
    call $t6 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(156,11003,11030)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(24,9):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_local[creator_address]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:253:13+15
    assume {:print "$track_local(24,9,2):", $t6} $t6 == $t6;

    // $t8 := opaque begin: object::create_object_address($t6, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:254:24+45
    assume {:print "$at(156,11055,11100)"} true;

    // assume WellFormed($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:254:24+45
    assume $IsValid'address'($t8);

    // assume Eq<address>($t8, object::spec_create_object_address($t6, $t1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:254:24+45
    assume $IsEqual'address'($t8, $1_object_spec_create_object_address($t6, $t1));

    // $t8 := opaque end: object::create_object_address($t6, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:254:24+45

    // trace_local[obj_addr]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:254:13+8
    assume {:print "$track_local(24,9,3):", $t8} $t8 == $t8;

    // $t9 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:255:59+5
    assume {:print "$at(156,11160,11165)"} true;
    $t9 := false;
    assume $IsValid'bool'($t9);

    // $t10 := object::create_object_internal($t6, $t8, $t9) on_abort goto L2 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:255:9+56
    call $t10 := $1_object_create_object_internal($t6, $t8, $t9);
    if ($abort_flag) {
        assume {:print "$at(156,11110,11166)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(24,9):", $t7} $t7 == $t7;
        goto L2;
    }

    // trace_return[0]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:255:9+56
    assume {:print "$track_return(24,9,0):", $t10} $t10 == $t10;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:256:5+1
    assume {:print "$at(156,11171,11172)"} true;
L1:

    // return $t10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:256:5+1
    assume {:print "$at(156,11171,11172)"} true;
    $ret0 := $t10;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:256:5+1
L2:

    // abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:256:5+1
    assume {:print "$at(156,11171,11172)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun object::create_object_internal [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:319:5+766
procedure {:inline 1} $1_object_create_object_internal(_$t0: int, _$t1: int, _$t2: bool) returns ($ret0: $1_object_ConstructorRef)
{
    // declare local variables
    var $t3: int;
    var $t4: $signer;
    var $t5: $1_guid_GUID;
    var $t6: bool;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $signer;
    var $t12: int;
    var $t13: $Mutation (int);
    var $t14: $1_guid_GUID;
    var $t15: int;
    var $t16: bool;
    var $t17: $1_event_EventHandle'$1_object_TransferEvent';
    var $t18: $1_object_ObjectCore;
    var $t19: $1_object_ConstructorRef;
    var $t0: int;
    var $t1: int;
    var $t2: bool;
    var $temp_0'$1_guid_GUID': $1_guid_GUID;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[creator_address]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:319:5+1
    assume {:print "$at(156,14426,14427)"} true;
    assume {:print "$track_local(24,15,0):", $t0} $t0 == $t0;

    // trace_local[object]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:319:5+1
    assume {:print "$track_local(24,15,1):", $t1} $t1 == $t1;

    // trace_local[can_delete]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:319:5+1
    assume {:print "$track_local(24,15,2):", $t2} $t2 == $t2;

    // $t6 := exists<object::ObjectCore>($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:324:18+6
    assume {:print "$at(156,14580,14586)"} true;
    $t6 := $ResourceExists($1_object_ObjectCore_$memory, $t1);

    // $t7 := !($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:324:17+1
    call $t7 := $Not($t6);

    // if ($t7) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:324:9+75
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:324:9+75
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:324:9+75
    assume {:print "$at(156,14571,14646)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:324:68+14
L0:

    // $t8 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:324:68+14
    assume {:print "$at(156,14630,14644)"} true;
    $t8 := 1;
    assume $IsValid'u64'($t8);

    // $t9 := error::already_exists($t8) on_abort goto L4 with $t10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:324:46+37
    call $t9 := $1_error_already_exists($t8);
    if ($abort_flag) {
        assume {:print "$at(156,14608,14645)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,15):", $t10} $t10 == $t10;
        goto L4;
    }

    // trace_abort($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:324:9+75
    assume {:print "$at(156,14571,14646)"} true;
    assume {:print "$track_abort(24,15):", $t9} $t9 == $t9;

    // $t10 := move($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:324:9+75
    $t10 := $t9;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:324:9+75
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:326:43+6
    assume {:print "$at(156,14691,14697)"} true;
L2:

    // $t11 := opaque begin: create_signer::create_signer($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:326:29+21
    assume {:print "$at(156,14677,14698)"} true;

    // assume WellFormed($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:326:29+21
    assume $IsValid'signer'($t11) && $1_signer_is_txn_signer($t11) && $1_signer_is_txn_signer_addr($t11->$addr);

    // assume Eq<address>(signer::$address_of($t11), $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:326:29+21
    assume $IsEqual'address'($1_signer_$address_of($t11), $t1);

    // $t11 := opaque end: create_signer::create_signer($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:326:29+21

    // trace_local[object_signer]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:326:13+13
    assume {:print "$track_local(24,15,4):", $t11} $t11 == $t11;

    // $t12 := 1125899906842624 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:327:33+22
    assume {:print "$at(156,14732,14754)"} true;
    $t12 := 1125899906842624;
    assume $IsValid'u64'($t12);

    // $t3 := $t12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:327:13+17
    $t3 := $t12;

    // trace_local[guid_creation_num]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:327:13+17
    assume {:print "$track_local(24,15,3):", $t3} $t3 == $t3;

    // $t13 := borrow_local($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:328:57+22
    assume {:print "$at(156,14812,14834)"} true;
    $t13 := $Mutation($Local(3), EmptyVec(), $t3);

    // $t14 := guid::create($t1, $t13) on_abort goto L4 with $t10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:328:36+44
    call $t14,$t13 := $1_guid_create($t1, $t13);
    if ($abort_flag) {
        assume {:print "$at(156,14791,14835)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,15):", $t10} $t10 == $t10;
        goto L4;
    }

    // write_back[LocalRoot($t3)@]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:328:36+44
    $t3 := $Dereference($t13);

    // trace_local[guid_creation_num]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:328:36+44
    assume {:print "$track_local(24,15,3):", $t3} $t3 == $t3;

    // trace_local[transfer_events_guid]($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:328:13+20
    assume {:print "$track_local(24,15,5):", $t14} $t14 == $t14;

    // $t15 := move($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:333:17+17
    assume {:print "$at(156,14924,14941)"} true;
    $t15 := $t3;

    // $t16 := true at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:335:41+4
    assume {:print "$at(156,15023,15027)"} true;
    $t16 := true;
    assume $IsValid'bool'($t16);

    // $t17 := event::new_event_handle<object::TransferEvent>($t14) on_abort goto L4 with $t10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:336:34+45
    assume {:print "$at(156,15062,15107)"} true;
    call $t17 := $1_event_new_event_handle'$1_object_TransferEvent'($t14);
    if ($abort_flag) {
        assume {:print "$at(156,15062,15107)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,15):", $t10} $t10 == $t10;
        goto L4;
    }

    // $t18 := pack object::ObjectCore($t15, $t0, $t16, $t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:332:13+227
    assume {:print "$at(156,14895,15122)"} true;
    $t18 := $1_object_ObjectCore($t15, $t0, $t16, $t17);

    // move_to<object::ObjectCore>($t18, $t11) on_abort goto L4 with $t10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:330:9+7
    assume {:print "$at(156,14846,14853)"} true;
    if ($ResourceExists($1_object_ObjectCore_$memory, $t11->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_object_ObjectCore_$memory := $ResourceUpdate($1_object_ObjectCore_$memory, $t11->$addr, $t18);
    }
    if ($abort_flag) {
        assume {:print "$at(156,14846,14853)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(24,15):", $t10} $t10 == $t10;
        goto L4;
    }

    // $t19 := pack object::ConstructorRef($t1, $t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:339:9+43
    assume {:print "$at(156,15143,15186)"} true;
    $t19 := $1_object_ConstructorRef($t1, $t2);

    // trace_return[0]($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:339:9+43
    assume {:print "$track_return(24,15,0):", $t19} $t19 == $t19;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:340:5+1
    assume {:print "$at(156,15191,15192)"} true;
L3:

    // return $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:340:5+1
    assume {:print "$at(156,15191,15192)"} true;
    $ret0 := $t19;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:340:5+1
L4:

    // abort($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:340:5+1
    assume {:print "$at(156,15191,15192)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun object::create_sticky_object_at_address [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:281:5+215
procedure {:inline 1} $1_object_create_sticky_object_at_address(_$t0: int, _$t1: int) returns ($ret0: $1_object_ConstructorRef)
{
    // declare local variables
    var $t2: bool;
    var $t3: $1_object_ConstructorRef;
    var $t4: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner_address]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:281:5+1
    assume {:print "$at(156,12584,12585)"} true;
    assume {:print "$track_local(24,17,0):", $t0} $t0 == $t0;

    // trace_local[object_address]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:281:5+1
    assume {:print "$track_local(24,17,1):", $t1} $t1 == $t1;

    // $t2 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:285:63+5
    assume {:print "$at(156,12787,12792)"} true;
    $t2 := false;
    assume $IsValid'bool'($t2);

    // $t3 := object::create_object_internal($t0, $t1, $t2) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:285:9+60
    call $t3 := $1_object_create_object_internal($t0, $t1, $t2);
    if ($abort_flag) {
        assume {:print "$at(156,12733,12793)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(24,17):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:285:9+60
    assume {:print "$track_return(24,17,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:286:5+1
    assume {:print "$at(156,12798,12799)"} true;
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:286:5+1
    assume {:print "$at(156,12798,12799)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:286:5+1
L2:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:286:5+1
    assume {:print "$at(156,12798,12799)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun object::object_address<fungible_asset::FungibleStore> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:241:5+91
procedure {:inline 1} $1_object_object_address'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:241:5+1
    assume {:print "$at(156,10430,10431)"} true;
    assume {:print "$track_local(24,37,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::Object<#0>>.inner($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:242:9+12
    assume {:print "$at(156,10503,10515)"} true;
    $t1 := $t0->$inner;

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:242:9+12
    assume {:print "$track_return(24,37,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:243:5+1
    assume {:print "$at(156,10520,10521)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:243:5+1
    assume {:print "$at(156,10520,10521)"} true;
    $ret0 := $t1;
    return;

}

// fun object::object_address<fungible_asset::Metadata> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:241:5+91
procedure {:inline 1} $1_object_object_address'$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[object]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:241:5+1
    assume {:print "$at(156,10430,10431)"} true;
    assume {:print "$track_local(24,37,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::Object<#0>>.inner($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:242:9+12
    assume {:print "$at(156,10503,10515)"} true;
    $t1 := $t0->$inner;

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:242:9+12
    assume {:print "$track_return(24,37,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:243:5+1
    assume {:print "$at(156,10520,10521)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:243:5+1
    assume {:print "$at(156,10520,10521)"} true;
    $ret0 := $t1;
    return;

}

// fun object::create_user_derived_object [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:260:5+277
procedure {:inline 1} $1_object_create_user_derived_object(_$t0: int, _$t1: $1_object_DeriveRef) returns ($ret0: $1_object_ConstructorRef)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: $1_object_ConstructorRef;
    var $t8: int;
    var $t0: int;
    var $t1: $1_object_DeriveRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_DeriveRef': $1_object_DeriveRef;
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, object::spec_create_user_derived_object_address($t0, select object::DeriveRef.self<object::DeriveRef>($t1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.spec.move:177:9+89
    assume {:print "$at(157,7509,7598)"} true;
    assume ($t3 == $1_object_spec_create_user_derived_object_address($t0, $t1->$self));

    // trace_local[creator_address]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:260:5+1
    assume {:print "$at(156,11358,11359)"} true;
    assume {:print "$track_local(24,18,0):", $t0} $t0 == $t0;

    // trace_local[derive_ref]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:260:5+1
    assume {:print "$track_local(24,18,1):", $t1} $t1 == $t1;

    // $t4 := get_field<object::DeriveRef>.self($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:261:76+15
    assume {:print "$at(156,11547,11562)"} true;
    $t4 := $t1->$self;

    // $t5 := opaque begin: object::create_user_derived_object_address($t0, $t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:261:24+68

    // assume WellFormed($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:261:24+68
    assume $IsValid'address'($t5);

    // assume Eq<address>($t5, object::spec_create_user_derived_object_address($t0, $t4)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:261:24+68
    assume $IsEqual'address'($t5, $1_object_spec_create_user_derived_object_address($t0, $t4));

    // $t5 := opaque end: object::create_user_derived_object_address($t0, $t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:261:24+68

    // trace_local[obj_addr]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:261:13+8
    assume {:print "$track_local(24,18,2):", $t5} $t5 == $t5;

    // $t6 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:262:59+5
    assume {:print "$at(156,11623,11628)"} true;
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t7 := object::create_object_internal($t0, $t5, $t6) on_abort goto L2 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:262:9+56
    call $t7 := $1_object_create_object_internal($t0, $t5, $t6);
    if ($abort_flag) {
        assume {:print "$at(156,11573,11629)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(24,18):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_return[0]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:262:9+56
    assume {:print "$track_return(24,18,0):", $t7} $t7 == $t7;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:263:5+1
    assume {:print "$at(156,11634,11635)"} true;
L1:

    // return $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:263:5+1
    assume {:print "$at(156,11634,11635)"} true;
    $ret0 := $t7;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:263:5+1
L2:

    // abort($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:263:5+1
    assume {:print "$at(156,11634,11635)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun object::disable_ungated_transfer [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:446:5+191
procedure {:inline 1} $1_object_disable_ungated_transfer(_$t0: $1_object_TransferRef) returns ()
{
    // declare local variables
    var $t1: $Mutation ($1_object_ObjectCore);
    var $t2: int;
    var $t3: $Mutation ($1_object_ObjectCore);
    var $t4: int;
    var $t5: bool;
    var $t6: $Mutation (bool);
    var $t0: $1_object_TransferRef;
    var $temp_0'$1_object_ObjectCore': $1_object_ObjectCore;
    var $temp_0'$1_object_TransferRef': $1_object_TransferRef;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:446:5+1
    assume {:print "$at(156,18859,18860)"} true;
    assume {:print "$track_local(24,22,0):", $t0} $t0 == $t0;

    // $t2 := get_field<object::TransferRef>.self($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:447:52+8
    assume {:print "$at(156,18987,18995)"} true;
    $t2 := $t0->$self;

    // $t3 := borrow_global<object::ObjectCore>($t2) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:447:22+17
    if (!$ResourceExists($1_object_ObjectCore_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t3 := $Mutation($Global($t2), EmptyVec(), $ResourceValue($1_object_ObjectCore_$memory, $t2));
    }
    if ($abort_flag) {
        assume {:print "$at(156,18957,18974)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(24,22):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[object]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:447:13+6
    $temp_0'$1_object_ObjectCore' := $Dereference($t3);
    assume {:print "$track_local(24,22,1):", $temp_0'$1_object_ObjectCore'} $temp_0'$1_object_ObjectCore' == $temp_0'$1_object_ObjectCore';

    // $t5 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:448:41+5
    assume {:print "$at(156,19038,19043)"} true;
    $t5 := false;
    assume $IsValid'bool'($t5);

    // $t6 := borrow_field<object::ObjectCore>.allow_ungated_transfer($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:448:9+29
    $t6 := $ChildMutation($t3, 2, $Dereference($t3)->$allow_ungated_transfer);

    // write_ref($t6, $t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:448:9+37
    $t6 := $UpdateMutation($t6, $t5);

    // write_back[Reference($t3).allow_ungated_transfer (bool)]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:448:9+37
    $t3 := $UpdateMutation($t3, $Update'$1_object_ObjectCore'_allow_ungated_transfer($Dereference($t3), $Dereference($t6)));

    // write_back[object::ObjectCore@]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:448:9+37
    $1_object_ObjectCore_$memory := $ResourceUpdate($1_object_ObjectCore_$memory, $GlobalLocationAddress($t3),
        $Dereference($t3));

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:449:5+1
    assume {:print "$at(156,19049,19050)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:449:5+1
    assume {:print "$at(156,19049,19050)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:449:5+1
L2:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:449:5+1
    assume {:print "$at(156,19049,19050)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun object::generate_derive_ref [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:362:5+108
procedure {:inline 1} $1_object_generate_derive_ref(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_object_DeriveRef)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_object_DeriveRef;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_DeriveRef': $1_object_DeriveRef;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:362:5+1
    assume {:print "$at(156,16138,16139)"} true;
    assume {:print "$track_local(24,26,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::ConstructorRef>.self($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:363:27+8
    assume {:print "$at(156,16230,16238)"} true;
    $t1 := $t0->$self;

    // $t2 := pack object::DeriveRef($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:363:9+28
    $t2 := $1_object_DeriveRef($t1);

    // trace_return[0]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:363:9+28
    assume {:print "$track_return(24,26,0):", $t2} $t2 == $t2;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:364:5+1
    assume {:print "$at(156,16245,16246)"} true;
L1:

    // return $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:364:5+1
    assume {:print "$at(156,16245,16246)"} true;
    $ret0 := $t2;
    return;

}

// fun object::generate_signer [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:367:5+96
procedure {:inline 1} $1_object_generate_signer(_$t0: $1_object_ConstructorRef) returns ($ret0: $signer)
{
    // declare local variables
    var $t1: int;
    var $t2: $signer;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:367:5+1
    assume {:print "$at(156,16299,16300)"} true;
    assume {:print "$track_local(24,29,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::ConstructorRef>.self($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:368:23+8
    assume {:print "$at(156,16380,16388)"} true;
    $t1 := $t0->$self;

    // $t2 := opaque begin: create_signer::create_signer($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:368:9+23

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:368:9+23
    assume $IsValid'signer'($t2) && $1_signer_is_txn_signer($t2) && $1_signer_is_txn_signer_addr($t2->$addr);

    // assume Eq<address>(signer::$address_of($t2), $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:368:9+23
    assume $IsEqual'address'($1_signer_$address_of($t2), $t1);

    // $t2 := opaque end: create_signer::create_signer($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:368:9+23

    // trace_return[0]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:368:9+23
    assume {:print "$track_return(24,29,0):", $t2} $t2 == $t2;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:369:5+1
    assume {:print "$at(156,16394,16395)"} true;
L1:

    // return $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:369:5+1
    assume {:print "$at(156,16394,16395)"} true;
    $ret0 := $t2;
    return;

}

// fun object::generate_transfer_ref [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:356:5+219
procedure {:inline 1} $1_object_generate_transfer_ref(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_object_TransferRef)
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $1_object_TransferRef;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_TransferRef': $1_object_TransferRef;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:356:5+1
    assume {:print "$at(156,15798,15799)"} true;
    assume {:print "$track_local(24,31,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::ConstructorRef>.self($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:357:41+8
    assume {:print "$at(156,15908,15916)"} true;
    $t1 := $t0->$self;

    // $t2 := exists<object::Untransferable>($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:357:18+6
    $t2 := $ResourceExists($1_object_Untransferable_$memory, $t1);

    // $t3 := !($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:357:17+1
    call $t3 := $Not($t2);

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:357:9+95
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:357:9+95
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:357:9+95
    assume {:print "$at(156,15876,15971)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:357:9+95
L0:

    // $t4 := 9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:357:77+25
    assume {:print "$at(156,15944,15969)"} true;
    $t4 := 9;
    assume $IsValid'u64'($t4);

    // $t5 := error::permission_denied($t4) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:357:52+51
    call $t5 := $1_error_permission_denied($t4);
    if ($abort_flag) {
        assume {:print "$at(156,15919,15970)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(24,31):", $t6} $t6 == $t6;
        goto L4;
    }

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:357:9+95
    assume {:print "$at(156,15876,15971)"} true;
    assume {:print "$track_abort(24,31):", $t5} $t5 == $t5;

    // $t6 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:357:9+95
    $t6 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:357:9+95
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:358:29+3
    assume {:print "$at(156,16001,16004)"} true;
L2:

    // $t7 := get_field<object::ConstructorRef>.self($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:358:29+8
    assume {:print "$at(156,16001,16009)"} true;
    $t7 := $t0->$self;

    // $t8 := pack object::TransferRef($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:358:9+30
    $t8 := $1_object_TransferRef($t7);

    // trace_return[0]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:358:9+30
    assume {:print "$track_return(24,31,0):", $t8} $t8 == $t8;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:359:5+1
    assume {:print "$at(156,16016,16017)"} true;
L3:

    // return $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:359:5+1
    assume {:print "$at(156,16016,16017)"} true;
    $ret0 := $t8;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:359:5+1
L4:

    // abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:359:5+1
    assume {:print "$at(156,16016,16017)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun object::object_from_constructor_ref<fungible_asset::FungibleStore> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:377:5+126
procedure {:inline 1} $1_object_object_from_constructor_ref'$1_fungible_asset_FungibleStore'(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t3: int;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:377:5+1
    assume {:print "$at(156,16620,16621)"} true;
    assume {:print "$track_local(24,39,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::ConstructorRef>.self($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:378:30+8
    assume {:print "$at(156,16731,16739)"} true;
    $t1 := $t0->$self;

    // $t2 := object::address_to_object<#0>($t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:378:9+30
    call $t2 := $1_object_address_to_object'$1_fungible_asset_FungibleStore'($t1);
    if ($abort_flag) {
        assume {:print "$at(156,16710,16740)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(24,39):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:378:9+30
    assume {:print "$track_return(24,39,0):", $t2} $t2 == $t2;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:379:5+1
    assume {:print "$at(156,16745,16746)"} true;
L1:

    // return $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:379:5+1
    assume {:print "$at(156,16745,16746)"} true;
    $ret0 := $t2;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:379:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:379:5+1
    assume {:print "$at(156,16745,16746)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun object::object_from_constructor_ref<fungible_asset::Metadata> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:377:5+126
procedure {:inline 1} $1_object_object_from_constructor_ref'$1_fungible_asset_Metadata'(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:377:5+1
    assume {:print "$at(156,16620,16621)"} true;
    assume {:print "$track_local(24,39,0):", $t0} $t0 == $t0;

    // $t1 := get_field<object::ConstructorRef>.self($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:378:30+8
    assume {:print "$at(156,16731,16739)"} true;
    $t1 := $t0->$self;

    // $t2 := object::address_to_object<#0>($t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:378:9+30
    call $t2 := $1_object_address_to_object'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(156,16710,16740)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(24,39):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:378:9+30
    assume {:print "$track_return(24,39,0):", $t2} $t2 == $t2;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:379:5+1
    assume {:print "$at(156,16745,16746)"} true;
L1:

    // return $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:379:5+1
    assume {:print "$at(156,16745,16746)"} true;
    $ret0 := $t2;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:379:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:379:5+1
    assume {:print "$at(156,16745,16746)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun object::set_untransferable [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:452:5+290
procedure {:inline 1} $1_object_set_untransferable(_$t0: $1_object_ConstructorRef) returns ()
{
    // declare local variables
    var $t1: $Mutation ($1_object_ObjectCore);
    var $t2: $signer;
    var $t3: int;
    var $t4: $Mutation ($1_object_ObjectCore);
    var $t5: int;
    var $t6: bool;
    var $t7: $Mutation (bool);
    var $t8: $signer;
    var $t9: bool;
    var $t10: $1_object_Untransferable;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_ObjectCore': $1_object_ObjectCore;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:452:5+1
    assume {:print "$at(156,19093,19094)"} true;
    assume {:print "$track_local(24,44,0):", $t0} $t0 == $t0;

    // $t3 := get_field<object::ConstructorRef>.self($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:453:52+8
    assume {:print "$at(156,19218,19226)"} true;
    $t3 := $t0->$self;

    // $t4 := borrow_global<object::ObjectCore>($t3) on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:453:22+17
    if (!$ResourceExists($1_object_ObjectCore_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $Mutation($Global($t3), EmptyVec(), $ResourceValue($1_object_ObjectCore_$memory, $t3));
    }
    if ($abort_flag) {
        assume {:print "$at(156,19188,19205)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,44):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[object]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:453:13+6
    $temp_0'$1_object_ObjectCore' := $Dereference($t4);
    assume {:print "$track_local(24,44,1):", $temp_0'$1_object_ObjectCore'} $temp_0'$1_object_ObjectCore' == $temp_0'$1_object_ObjectCore';

    // $t6 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:454:41+5
    assume {:print "$at(156,19269,19274)"} true;
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t7 := borrow_field<object::ObjectCore>.allow_ungated_transfer($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:454:9+29
    $t7 := $ChildMutation($t4, 2, $Dereference($t4)->$allow_ungated_transfer);

    // write_ref($t7, $t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:454:9+37
    $t7 := $UpdateMutation($t7, $t6);

    // write_back[Reference($t4).allow_ungated_transfer (bool)]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:454:9+37
    $t4 := $UpdateMutation($t4, $Update'$1_object_ObjectCore'_allow_ungated_transfer($Dereference($t4), $Dereference($t7)));

    // write_back[object::ObjectCore@]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:454:9+37
    $1_object_ObjectCore_$memory := $ResourceUpdate($1_object_ObjectCore_$memory, $GlobalLocationAddress($t4),
        $Dereference($t4));

    // $t8 := object::generate_signer($t0) on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:455:29+20
    assume {:print "$at(156,19304,19324)"} true;
    call $t8 := $1_object_generate_signer($t0);
    if ($abort_flag) {
        assume {:print "$at(156,19304,19324)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,44):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[object_signer]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:455:13+13
    assume {:print "$track_local(24,44,2):", $t8} $t8 == $t8;

    // $t9 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:456:33+17
    assume {:print "$at(156,19358,19375)"} true;
    $t9 := false;
    assume $IsValid'bool'($t9);

    // $t10 := pack object::Untransferable($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:456:33+17
    $t10 := $1_object_Untransferable($t9);

    // move_to<object::Untransferable>($t10, $t8) on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:456:9+7
    if ($ResourceExists($1_object_Untransferable_$memory, $t8->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_object_Untransferable_$memory := $ResourceUpdate($1_object_Untransferable_$memory, $t8->$addr, $t10);
    }
    if ($abort_flag) {
        assume {:print "$at(156,19334,19341)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(24,44):", $t5} $t5 == $t5;
        goto L2;
    }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:457:5+1
    assume {:print "$at(156,19382,19383)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:457:5+1
    assume {:print "$at(156,19382,19383)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:457:5+1
L2:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.move:457:5+1
    assume {:print "$at(156,19382,19383)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.spec.move:188:10+323
function {:inline} $1_optional_aggregator_optional_aggregator_value(optional_aggregator: $1_optional_aggregator_OptionalAggregator): int {
    (if ($1_optional_aggregator_$is_parallelizable(optional_aggregator)) then ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'(optional_aggregator->$aggregator))) else ($1_option_$borrow'$1_optional_aggregator_Integer'(optional_aggregator->$integer)->$value))
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:190:5+141
function {:inline} $1_optional_aggregator_$is_parallelizable(optional_aggregator: $1_optional_aggregator_OptionalAggregator): bool {
    $1_option_$is_some'$1_aggregator_Aggregator'(optional_aggregator->$aggregator)
}

// struct optional_aggregator::Integer at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:20:5+74
datatype $1_optional_aggregator_Integer {
    $1_optional_aggregator_Integer($value: int, $limit: int)
}
function {:inline} $Update'$1_optional_aggregator_Integer'_value(s: $1_optional_aggregator_Integer, x: int): $1_optional_aggregator_Integer {
    $1_optional_aggregator_Integer(x, s->$limit)
}
function {:inline} $Update'$1_optional_aggregator_Integer'_limit(s: $1_optional_aggregator_Integer, x: int): $1_optional_aggregator_Integer {
    $1_optional_aggregator_Integer(s->$value, x)
}
function $IsValid'$1_optional_aggregator_Integer'(s: $1_optional_aggregator_Integer): bool {
    $IsValid'u128'(s->$value)
      && $IsValid'u128'(s->$limit)
}
function {:inline} $IsEqual'$1_optional_aggregator_Integer'(s1: $1_optional_aggregator_Integer, s2: $1_optional_aggregator_Integer): bool {
    s1 == s2
}

// struct optional_aggregator::OptionalAggregator at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:64:5+175
datatype $1_optional_aggregator_OptionalAggregator {
    $1_optional_aggregator_OptionalAggregator($aggregator: $1_option_Option'$1_aggregator_Aggregator', $integer: $1_option_Option'$1_optional_aggregator_Integer')
}
function {:inline} $Update'$1_optional_aggregator_OptionalAggregator'_aggregator(s: $1_optional_aggregator_OptionalAggregator, x: $1_option_Option'$1_aggregator_Aggregator'): $1_optional_aggregator_OptionalAggregator {
    $1_optional_aggregator_OptionalAggregator(x, s->$integer)
}
function {:inline} $Update'$1_optional_aggregator_OptionalAggregator'_integer(s: $1_optional_aggregator_OptionalAggregator, x: $1_option_Option'$1_optional_aggregator_Integer'): $1_optional_aggregator_OptionalAggregator {
    $1_optional_aggregator_OptionalAggregator(s->$aggregator, x)
}
function $IsValid'$1_optional_aggregator_OptionalAggregator'(s: $1_optional_aggregator_OptionalAggregator): bool {
    $IsValid'$1_option_Option'$1_aggregator_Aggregator''(s->$aggregator)
      && $IsValid'$1_option_Option'$1_optional_aggregator_Integer''(s->$integer)
}
function {:inline} $IsEqual'$1_optional_aggregator_OptionalAggregator'(s1: $1_optional_aggregator_OptionalAggregator, s2: $1_optional_aggregator_OptionalAggregator): bool {
    $IsEqual'$1_option_Option'$1_aggregator_Aggregator''(s1->$aggregator, s2->$aggregator)
    && $IsEqual'$1_option_Option'$1_optional_aggregator_Integer''(s1->$integer, s2->$integer)}

// fun optional_aggregator::add [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:157:5+427
procedure {:inline 1} $1_optional_aggregator_add(_$t0: $Mutation ($1_optional_aggregator_OptionalAggregator), _$t1: int) returns ($ret0: $Mutation ($1_optional_aggregator_OptionalAggregator))
{
    // declare local variables
    var $t2: $1_option_Option'$1_aggregator_Aggregator';
    var $t3: bool;
    var $t4: $Mutation ($1_option_Option'$1_aggregator_Aggregator');
    var $t5: $Mutation ($1_aggregator_Aggregator);
    var $t6: int;
    var $t7: $1_aggregator_Aggregator;
    var $t8: bool;
    var $t9: $Mutation ($1_option_Option'$1_optional_aggregator_Integer');
    var $t10: $Mutation ($1_optional_aggregator_Integer);
    var $t0: $Mutation ($1_optional_aggregator_OptionalAggregator);
    var $t1: int;
    var $temp_0'$1_aggregator_Aggregator': $1_aggregator_Aggregator;
    var $temp_0'$1_optional_aggregator_OptionalAggregator': $1_optional_aggregator_OptionalAggregator;
    var $temp_0'u128': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[optional_aggregator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:157:5+1
    assume {:print "$at(88,5818,5819)"} true;
    $temp_0'$1_optional_aggregator_OptionalAggregator' := $Dereference($t0);
    assume {:print "$track_local(25,0,0):", $temp_0'$1_optional_aggregator_OptionalAggregator'} $temp_0'$1_optional_aggregator_OptionalAggregator' == $temp_0'$1_optional_aggregator_OptionalAggregator';

    // trace_local[value]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:157:5+1
    assume {:print "$track_local(25,0,1):", $t1} $t1 == $t1;

    // $t2 := get_field<optional_aggregator::OptionalAggregator>.aggregator($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:158:29+31
    assume {:print "$at(88,5922,5953)"} true;
    $t2 := $Dereference($t0)->$aggregator;

    // $t3 := opaque begin: option::is_some<aggregator::Aggregator>($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:158:13+48

    // assume WellFormed($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:158:13+48
    assume $IsValid'bool'($t3);

    // assume Eq<bool>($t3, option::spec_is_some<aggregator::Aggregator>($t2)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:158:13+48
    assume $IsEqual'bool'($t3, $1_option_spec_is_some'$1_aggregator_Aggregator'($t2));

    // $t3 := opaque end: option::is_some<aggregator::Aggregator>($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:158:13+48

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:158:9+337
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:159:54+19
    assume {:print "$at(88,6011,6030)"} true;
L1:

    // $t4 := borrow_field<optional_aggregator::OptionalAggregator>.aggregator($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:159:49+35
    assume {:print "$at(88,6006,6041)"} true;
    $t4 := $ChildMutation($t0, 0, $Dereference($t0)->$aggregator);

    // $t5 := option::borrow_mut<aggregator::Aggregator>($t4) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:159:30+55
    call $t5,$t4 := $1_option_borrow_mut'$1_aggregator_Aggregator'($t4);
    if ($abort_flag) {
        assume {:print "$at(88,5987,6042)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,0):", $t6} $t6 == $t6;
        goto L4;
    }

    // opaque begin: aggregator::add($t5, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
    assume {:print "$at(88,6056,6090)"} true;

    // $t7 := read_ref($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
    $t7 := $Dereference($t5);

    // assume Identical($t8, Or(Gt(Add(aggregator::spec_aggregator_get_val($t5), $t1), aggregator::spec_get_limit($t5)), Gt(Add(aggregator::spec_aggregator_get_val($t5), $t1), 340282366920938463463374607431768211455))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
    assume ($t8 == ((($1_aggregator_spec_aggregator_get_val($Dereference($t5)) + $t1) > $1_aggregator_spec_get_limit($Dereference($t5))) || (($1_aggregator_spec_aggregator_get_val($Dereference($t5)) + $t1) > 340282366920938463463374607431768211455)));

    // if ($t8) goto L7 else goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
    if ($t8) { goto L7; } else { goto L5; }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
L6:

    // trace_abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
    assume {:print "$at(88,6056,6090)"} true;
    assume {:print "$track_abort(25,0):", $t6} $t6 == $t6;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
    goto L4;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
L5:

    // $t5 := havoc[mut]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
    assume {:print "$at(88,6056,6090)"} true;
    havoc $temp_0'$1_aggregator_Aggregator';
    $t5 := $UpdateMutation($t5, $temp_0'$1_aggregator_Aggregator');

    // assume WellFormed($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
    assume $IsValid'$1_aggregator_Aggregator'($Dereference($t5));

    // assume Eq<u128>(aggregator::spec_get_limit($t5), aggregator::spec_get_limit($t7)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
    assume $IsEqual'u128'($1_aggregator_spec_get_limit($Dereference($t5)), $1_aggregator_spec_get_limit($t7));

    // assume Eq<aggregator::Aggregator>(Freeze(false)($t5), aggregator::spec_aggregator_set_val($t7, Add(aggregator::spec_aggregator_get_val($t7), $t1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
    assume $IsEqual'$1_aggregator_Aggregator'($Dereference($t5), $1_aggregator_spec_aggregator_set_val($t7, ($1_aggregator_spec_aggregator_get_val($t7) + $t1)));

    // opaque end: aggregator::add($t5, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34

    // write_back[Reference($t4).vec (vector<aggregator::Aggregator>)/[]]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
    $t4 := $UpdateMutation($t4, (var $$sel0 := $Dereference($t4)->$vec; $Update'$1_option_Option'$1_aggregator_Aggregator''_vec($Dereference($t4), UpdateVec($$sel0, ReadVec($t5->p, LenVec($t4->p) + 1), $Dereference($t5)))));

    // write_back[Reference($t0).aggregator (option::Option<aggregator::Aggregator>)]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
    $t0 := $UpdateMutation($t0, $Update'$1_optional_aggregator_OptionalAggregator'_aggregator($Dereference($t0), $Dereference($t4)));

    // trace_local[optional_aggregator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:160:13+34
    $temp_0'$1_optional_aggregator_OptionalAggregator' := $Dereference($t0);
    assume {:print "$track_local(25,0,0):", $temp_0'$1_optional_aggregator_OptionalAggregator'} $temp_0'$1_optional_aggregator_OptionalAggregator' == $temp_0'$1_optional_aggregator_OptionalAggregator';

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:158:9+337
    assume {:print "$at(88,5902,6239)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:162:51+19
    assume {:print "$at(88,6159,6178)"} true;
L0:

    // $t9 := borrow_field<optional_aggregator::OptionalAggregator>.integer($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:162:46+32
    assume {:print "$at(88,6154,6186)"} true;
    $t9 := $ChildMutation($t0, 1, $Dereference($t0)->$integer);

    // $t10 := option::borrow_mut<optional_aggregator::Integer>($t9) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:162:27+52
    call $t10,$t9 := $1_option_borrow_mut'$1_optional_aggregator_Integer'($t9);
    if ($abort_flag) {
        assume {:print "$at(88,6135,6187)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,0):", $t6} $t6 == $t6;
        goto L4;
    }

    // optional_aggregator::add_integer($t10, $t1) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:163:13+27
    assume {:print "$at(88,6201,6228)"} true;
    call $t10 := $1_optional_aggregator_add_integer($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(88,6201,6228)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,0):", $t6} $t6 == $t6;
        goto L4;
    }

    // write_back[Reference($t9).vec (vector<optional_aggregator::Integer>)/[]]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:163:13+27
    $t9 := $UpdateMutation($t9, (var $$sel0 := $Dereference($t9)->$vec; $Update'$1_option_Option'$1_optional_aggregator_Integer''_vec($Dereference($t9), UpdateVec($$sel0, ReadVec($t10->p, LenVec($t9->p) + 1), $Dereference($t10)))));

    // write_back[Reference($t0).integer (option::Option<optional_aggregator::Integer>)]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:163:13+27
    $t0 := $UpdateMutation($t0, $Update'$1_optional_aggregator_OptionalAggregator'_integer($Dereference($t0), $Dereference($t9)));

    // trace_local[optional_aggregator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:163:13+27
    $temp_0'$1_optional_aggregator_OptionalAggregator' := $Dereference($t0);
    assume {:print "$track_local(25,0,0):", $temp_0'$1_optional_aggregator_OptionalAggregator'} $temp_0'$1_optional_aggregator_OptionalAggregator' == $temp_0'$1_optional_aggregator_OptionalAggregator';

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:158:9+337
    assume {:print "$at(88,5902,6239)"} true;
L2:

    // trace_local[optional_aggregator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:158:9+337
    assume {:print "$at(88,5902,6239)"} true;
    $temp_0'$1_optional_aggregator_OptionalAggregator' := $Dereference($t0);
    assume {:print "$track_local(25,0,0):", $temp_0'$1_optional_aggregator_OptionalAggregator'} $temp_0'$1_optional_aggregator_OptionalAggregator' == $temp_0'$1_optional_aggregator_OptionalAggregator';

    // pack_ref_deep($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:158:9+337

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:165:5+1
    assume {:print "$at(88,6244,6245)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:165:5+1
    assume {:print "$at(88,6244,6245)"} true;
    $ret0 := $t0;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:165:5+1
L4:

    // abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:165:5+1
    assume {:print "$at(88,6244,6245)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

    // label L7 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L7:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // drop($t4) at <internal>:1:1+10

    // goto L6 at <internal>:1:1+10
    goto L6;

}

// fun optional_aggregator::read [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:179:5+387
procedure {:inline 1} $1_optional_aggregator_read(_$t0: $1_optional_aggregator_OptionalAggregator) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_option_Option'$1_aggregator_Aggregator';
    var $t3: bool;
    var $t4: $1_option_Option'$1_aggregator_Aggregator';
    var $t5: $1_aggregator_Aggregator;
    var $t6: bool;
    var $t7: int;
    var $t8: $1_option_Option'$1_optional_aggregator_Integer';
    var $t9: $1_optional_aggregator_Integer;
    var $t10: bool;
    var $t0: $1_optional_aggregator_OptionalAggregator;
    var $temp_0'$1_optional_aggregator_OptionalAggregator': $1_optional_aggregator_OptionalAggregator;
    var $temp_0'u128': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[optional_aggregator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:179:5+1
    assume {:print "$at(88,6823,6824)"} true;
    assume {:print "$track_local(25,10,0):", $t0} $t0 == $t0;

    // $t2 := get_field<optional_aggregator::OptionalAggregator>.aggregator($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:180:29+31
    assume {:print "$at(88,6917,6948)"} true;
    $t2 := $t0->$aggregator;

    // $t3 := opaque begin: option::is_some<aggregator::Aggregator>($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:180:13+48

    // assume WellFormed($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:180:13+48
    assume $IsValid'bool'($t3);

    // assume Eq<bool>($t3, option::spec_is_some<aggregator::Aggregator>($t2)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:180:13+48
    assume $IsEqual'bool'($t3, $1_option_spec_is_some'$1_aggregator_Aggregator'($t2));

    // $t3 := opaque end: option::is_some<aggregator::Aggregator>($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:180:13+48

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:180:9+307
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:181:46+19
    assume {:print "$at(88,6998,7017)"} true;
L1:

    // $t4 := get_field<optional_aggregator::OptionalAggregator>.aggregator($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:181:45+31
    assume {:print "$at(88,6997,7028)"} true;
    $t4 := $t0->$aggregator;

    // $t5 := opaque begin: option::borrow<aggregator::Aggregator>($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:181:30+47

    // assume Identical($t6, option::spec_is_none<aggregator::Aggregator>($t4)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:181:30+47
    assume ($t6 == $1_option_spec_is_none'$1_aggregator_Aggregator'($t4));

    // if ($t6) goto L6 else goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:181:30+47
    if ($t6) { goto L6; } else { goto L5; }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:181:30+47
L6:

    // assume And(option::spec_is_none<aggregator::Aggregator>($t4), Eq(262145, $t7)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:181:30+47
    assume {:print "$at(88,6982,7029)"} true;
    assume ($1_option_spec_is_none'$1_aggregator_Aggregator'($t4) && $IsEqual'num'(262145, $t7));

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:181:30+47
    assume {:print "$at(88,6982,7029)"} true;
    assume {:print "$track_abort(25,10):", $t7} $t7 == $t7;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:181:30+47
    goto L4;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:181:30+47
L5:

    // assume WellFormed($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:181:30+47
    assume {:print "$at(88,6982,7029)"} true;
    assume $IsValid'$1_aggregator_Aggregator'($t5);

    // assume Eq<aggregator::Aggregator>($t5, option::spec_borrow<aggregator::Aggregator>($t4)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:181:30+47
    assume $IsEqual'$1_aggregator_Aggregator'($t5, $1_option_spec_borrow'$1_aggregator_Aggregator'($t4));

    // $t5 := opaque end: option::borrow<aggregator::Aggregator>($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:181:30+47

    // $t1 := opaque begin: aggregator::read($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:182:13+28
    assume {:print "$at(88,7043,7071)"} true;

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:182:13+28
    assume $IsValid'u128'($t1);

    // assume Eq<u128>($t1, aggregator::spec_read($t5)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:182:13+28
    assume $IsEqual'u128'($t1, $1_aggregator_spec_read($t5));

    // assume Le($t1, aggregator::spec_get_limit($t5)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:182:13+28
    assume ($t1 <= $1_aggregator_spec_get_limit($t5));

    // $t1 := opaque end: aggregator::read($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:182:13+28

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:180:9+307
    assume {:print "$at(88,6897,7204)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:184:43+19
    assume {:print "$at(88,7131,7150)"} true;
L0:

    // $t8 := get_field<optional_aggregator::OptionalAggregator>.integer($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:184:42+28
    assume {:print "$at(88,7130,7158)"} true;
    $t8 := $t0->$integer;

    // $t9 := opaque begin: option::borrow<optional_aggregator::Integer>($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:184:27+44

    // assume Identical($t10, option::spec_is_none<optional_aggregator::Integer>($t8)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:184:27+44
    assume ($t10 == $1_option_spec_is_none'$1_optional_aggregator_Integer'($t8));

    // if ($t10) goto L8 else goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:184:27+44
    if ($t10) { goto L8; } else { goto L7; }

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:184:27+44
L8:

    // assume And(option::spec_is_none<optional_aggregator::Integer>($t8), Eq(262145, $t7)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:184:27+44
    assume {:print "$at(88,7115,7159)"} true;
    assume ($1_option_spec_is_none'$1_optional_aggregator_Integer'($t8) && $IsEqual'num'(262145, $t7));

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:184:27+44
    assume {:print "$at(88,7115,7159)"} true;
    assume {:print "$track_abort(25,10):", $t7} $t7 == $t7;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:184:27+44
    goto L4;

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:184:27+44
L7:

    // assume WellFormed($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:184:27+44
    assume {:print "$at(88,7115,7159)"} true;
    assume $IsValid'$1_optional_aggregator_Integer'($t9);

    // assume Eq<optional_aggregator::Integer>($t9, option::spec_borrow<optional_aggregator::Integer>($t8)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:184:27+44
    assume $IsEqual'$1_optional_aggregator_Integer'($t9, $1_option_spec_borrow'$1_optional_aggregator_Integer'($t8));

    // $t9 := opaque end: option::borrow<optional_aggregator::Integer>($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:184:27+44

    // $t1 := optional_aggregator::read_integer($t9) on_abort goto L4 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:185:13+21
    assume {:print "$at(88,7173,7194)"} true;
    call $t1 := $1_optional_aggregator_read_integer($t9);
    if ($abort_flag) {
        assume {:print "$at(88,7173,7194)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(25,10):", $t7} $t7 == $t7;
        goto L4;
    }

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:180:9+307
    assume {:print "$at(88,6897,7204)"} true;
L2:

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:180:9+307
    assume {:print "$at(88,6897,7204)"} true;
    assume {:print "$track_return(25,10,0):", $t1} $t1 == $t1;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:187:5+1
    assume {:print "$at(88,7209,7210)"} true;
L3:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:187:5+1
    assume {:print "$at(88,7209,7210)"} true;
    $ret0 := $t1;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:187:5+1
L4:

    // abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:187:5+1
    assume {:print "$at(88,7209,7210)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun optional_aggregator::sub [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:168:5+427
procedure {:inline 1} $1_optional_aggregator_sub(_$t0: $Mutation ($1_optional_aggregator_OptionalAggregator), _$t1: int) returns ($ret0: $Mutation ($1_optional_aggregator_OptionalAggregator))
{
    // declare local variables
    var $t2: $1_option_Option'$1_aggregator_Aggregator';
    var $t3: bool;
    var $t4: $Mutation ($1_option_Option'$1_aggregator_Aggregator');
    var $t5: $Mutation ($1_aggregator_Aggregator);
    var $t6: int;
    var $t7: $1_aggregator_Aggregator;
    var $t8: bool;
    var $t9: $Mutation ($1_option_Option'$1_optional_aggregator_Integer');
    var $t10: $Mutation ($1_optional_aggregator_Integer);
    var $t0: $Mutation ($1_optional_aggregator_OptionalAggregator);
    var $t1: int;
    var $temp_0'$1_aggregator_Aggregator': $1_aggregator_Aggregator;
    var $temp_0'$1_optional_aggregator_OptionalAggregator': $1_optional_aggregator_OptionalAggregator;
    var $temp_0'u128': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[optional_aggregator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:168:5+1
    assume {:print "$at(88,6333,6334)"} true;
    $temp_0'$1_optional_aggregator_OptionalAggregator' := $Dereference($t0);
    assume {:print "$track_local(25,12,0):", $temp_0'$1_optional_aggregator_OptionalAggregator'} $temp_0'$1_optional_aggregator_OptionalAggregator' == $temp_0'$1_optional_aggregator_OptionalAggregator';

    // trace_local[value]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:168:5+1
    assume {:print "$track_local(25,12,1):", $t1} $t1 == $t1;

    // $t2 := get_field<optional_aggregator::OptionalAggregator>.aggregator($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:169:29+31
    assume {:print "$at(88,6437,6468)"} true;
    $t2 := $Dereference($t0)->$aggregator;

    // $t3 := opaque begin: option::is_some<aggregator::Aggregator>($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:169:13+48

    // assume WellFormed($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:169:13+48
    assume $IsValid'bool'($t3);

    // assume Eq<bool>($t3, option::spec_is_some<aggregator::Aggregator>($t2)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:169:13+48
    assume $IsEqual'bool'($t3, $1_option_spec_is_some'$1_aggregator_Aggregator'($t2));

    // $t3 := opaque end: option::is_some<aggregator::Aggregator>($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:169:13+48

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:169:9+337
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:170:54+19
    assume {:print "$at(88,6526,6545)"} true;
L1:

    // $t4 := borrow_field<optional_aggregator::OptionalAggregator>.aggregator($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:170:49+35
    assume {:print "$at(88,6521,6556)"} true;
    $t4 := $ChildMutation($t0, 0, $Dereference($t0)->$aggregator);

    // $t5 := option::borrow_mut<aggregator::Aggregator>($t4) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:170:30+55
    call $t5,$t4 := $1_option_borrow_mut'$1_aggregator_Aggregator'($t4);
    if ($abort_flag) {
        assume {:print "$at(88,6502,6557)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,12):", $t6} $t6 == $t6;
        goto L4;
    }

    // opaque begin: aggregator::sub($t5, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
    assume {:print "$at(88,6571,6605)"} true;

    // $t7 := read_ref($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
    $t7 := $Dereference($t5);

    // assume Identical($t8, Lt(aggregator::spec_aggregator_get_val($t5), $t1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
    assume ($t8 == ($1_aggregator_spec_aggregator_get_val($Dereference($t5)) < $t1));

    // if ($t8) goto L7 else goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
    if ($t8) { goto L7; } else { goto L5; }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
L6:

    // trace_abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
    assume {:print "$at(88,6571,6605)"} true;
    assume {:print "$track_abort(25,12):", $t6} $t6 == $t6;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
    goto L4;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
L5:

    // $t5 := havoc[mut]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
    assume {:print "$at(88,6571,6605)"} true;
    havoc $temp_0'$1_aggregator_Aggregator';
    $t5 := $UpdateMutation($t5, $temp_0'$1_aggregator_Aggregator');

    // assume WellFormed($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
    assume $IsValid'$1_aggregator_Aggregator'($Dereference($t5));

    // assume Eq<u128>(aggregator::spec_get_limit($t5), aggregator::spec_get_limit($t7)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
    assume $IsEqual'u128'($1_aggregator_spec_get_limit($Dereference($t5)), $1_aggregator_spec_get_limit($t7));

    // assume Eq<aggregator::Aggregator>(Freeze(false)($t5), aggregator::spec_aggregator_set_val($t7, Sub(aggregator::spec_aggregator_get_val($t7), $t1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
    assume $IsEqual'$1_aggregator_Aggregator'($Dereference($t5), $1_aggregator_spec_aggregator_set_val($t7, ($1_aggregator_spec_aggregator_get_val($t7) - $t1)));

    // opaque end: aggregator::sub($t5, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34

    // write_back[Reference($t4).vec (vector<aggregator::Aggregator>)/[]]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
    $t4 := $UpdateMutation($t4, (var $$sel0 := $Dereference($t4)->$vec; $Update'$1_option_Option'$1_aggregator_Aggregator''_vec($Dereference($t4), UpdateVec($$sel0, ReadVec($t5->p, LenVec($t4->p) + 1), $Dereference($t5)))));

    // write_back[Reference($t0).aggregator (option::Option<aggregator::Aggregator>)]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
    $t0 := $UpdateMutation($t0, $Update'$1_optional_aggregator_OptionalAggregator'_aggregator($Dereference($t0), $Dereference($t4)));

    // trace_local[optional_aggregator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:171:13+34
    $temp_0'$1_optional_aggregator_OptionalAggregator' := $Dereference($t0);
    assume {:print "$track_local(25,12,0):", $temp_0'$1_optional_aggregator_OptionalAggregator'} $temp_0'$1_optional_aggregator_OptionalAggregator' == $temp_0'$1_optional_aggregator_OptionalAggregator';

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:169:9+337
    assume {:print "$at(88,6417,6754)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:173:51+19
    assume {:print "$at(88,6674,6693)"} true;
L0:

    // $t9 := borrow_field<optional_aggregator::OptionalAggregator>.integer($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:173:46+32
    assume {:print "$at(88,6669,6701)"} true;
    $t9 := $ChildMutation($t0, 1, $Dereference($t0)->$integer);

    // $t10 := option::borrow_mut<optional_aggregator::Integer>($t9) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:173:27+52
    call $t10,$t9 := $1_option_borrow_mut'$1_optional_aggregator_Integer'($t9);
    if ($abort_flag) {
        assume {:print "$at(88,6650,6702)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,12):", $t6} $t6 == $t6;
        goto L4;
    }

    // optional_aggregator::sub_integer($t10, $t1) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:174:13+27
    assume {:print "$at(88,6716,6743)"} true;
    call $t10 := $1_optional_aggregator_sub_integer($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(88,6716,6743)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,12):", $t6} $t6 == $t6;
        goto L4;
    }

    // write_back[Reference($t9).vec (vector<optional_aggregator::Integer>)/[]]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:174:13+27
    $t9 := $UpdateMutation($t9, (var $$sel0 := $Dereference($t9)->$vec; $Update'$1_option_Option'$1_optional_aggregator_Integer''_vec($Dereference($t9), UpdateVec($$sel0, ReadVec($t10->p, LenVec($t9->p) + 1), $Dereference($t10)))));

    // write_back[Reference($t0).integer (option::Option<optional_aggregator::Integer>)]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:174:13+27
    $t0 := $UpdateMutation($t0, $Update'$1_optional_aggregator_OptionalAggregator'_integer($Dereference($t0), $Dereference($t9)));

    // trace_local[optional_aggregator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:174:13+27
    $temp_0'$1_optional_aggregator_OptionalAggregator' := $Dereference($t0);
    assume {:print "$track_local(25,12,0):", $temp_0'$1_optional_aggregator_OptionalAggregator'} $temp_0'$1_optional_aggregator_OptionalAggregator' == $temp_0'$1_optional_aggregator_OptionalAggregator';

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:169:9+337
    assume {:print "$at(88,6417,6754)"} true;
L2:

    // trace_local[optional_aggregator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:169:9+337
    assume {:print "$at(88,6417,6754)"} true;
    $temp_0'$1_optional_aggregator_OptionalAggregator' := $Dereference($t0);
    assume {:print "$track_local(25,12,0):", $temp_0'$1_optional_aggregator_OptionalAggregator'} $temp_0'$1_optional_aggregator_OptionalAggregator' == $temp_0'$1_optional_aggregator_OptionalAggregator';

    // pack_ref_deep($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:169:9+337

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:176:5+1
    assume {:print "$at(88,6759,6760)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:176:5+1
    assume {:print "$at(88,6759,6760)"} true;
    $ret0 := $t0;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:176:5+1
L4:

    // abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:176:5+1
    assume {:print "$at(88,6759,6760)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

    // label L7 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L7:

    // drop($t0) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // drop($t4) at <internal>:1:1+10

    // goto L6 at <internal>:1:1+10
    goto L6;

}

// fun optional_aggregator::add_integer [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:34:5+242
procedure {:inline 1} $1_optional_aggregator_add_integer(_$t0: $Mutation ($1_optional_aggregator_Integer), _$t1: int) returns ($ret0: $Mutation ($1_optional_aggregator_Integer))
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: int;
    var $t11: $Mutation (int);
    var $t0: $Mutation ($1_optional_aggregator_Integer);
    var $t1: int;
    var $temp_0'$1_optional_aggregator_Integer': $1_optional_aggregator_Integer;
    var $temp_0'u128': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[integer]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:34:5+1
    assume {:print "$at(88,1108,1109)"} true;
    $temp_0'$1_optional_aggregator_Integer' := $Dereference($t0);
    assume {:print "$track_local(25,1,0):", $temp_0'$1_optional_aggregator_Integer'} $temp_0'$1_optional_aggregator_Integer' == $temp_0'$1_optional_aggregator_Integer';

    // trace_local[value]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:34:5+1
    assume {:print "$track_local(25,1,1):", $t1} $t1 == $t1;

    // $t2 := get_field<optional_aggregator::Integer>.limit($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:36:23+13
    assume {:print "$at(88,1201,1214)"} true;
    $t2 := $Dereference($t0)->$limit;

    // $t3 := get_field<optional_aggregator::Integer>.value($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:36:39+13
    $t3 := $Dereference($t0)->$value;

    // $t4 := -($t2, $t3) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:36:37+1
    call $t4 := $Sub($t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(88,1215,1216)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(25,1):", $t5} $t5 == $t5;
        goto L4;
    }

    // $t6 := <=($t1, $t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:36:19+2
    call $t6 := $Le($t1, $t4);

    // if ($t6) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:35:9+126
    assume {:print "$at(88,1170,1296)"} true;
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:35:9+126
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:35:9+126
    assume {:print "$at(88,1170,1296)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:35:9+126
L0:

    // drop($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:35:9+126
    assume {:print "$at(88,1170,1296)"} true;

    // $t7 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:37:33+20
    assume {:print "$at(88,1265,1285)"} true;
    $t7 := 1;
    assume $IsValid'u64'($t7);

    // $t8 := error::out_of_range($t7) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:37:13+41
    call $t8 := $1_error_out_of_range($t7);
    if ($abort_flag) {
        assume {:print "$at(88,1245,1286)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(25,1):", $t5} $t5 == $t5;
        goto L4;
    }

    // trace_abort($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:35:9+126
    assume {:print "$at(88,1170,1296)"} true;
    assume {:print "$track_abort(25,1):", $t8} $t8 == $t8;

    // $t5 := move($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:35:9+126
    $t5 := $t8;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:35:9+126
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:39:25+7
    assume {:print "$at(88,1322,1329)"} true;
L2:

    // $t9 := get_field<optional_aggregator::Integer>.value($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:39:25+13
    assume {:print "$at(88,1322,1335)"} true;
    $t9 := $Dereference($t0)->$value;

    // $t10 := +($t9, $t1) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:39:39+1
    call $t10 := $AddU128($t9, $t1);
    if ($abort_flag) {
        assume {:print "$at(88,1336,1337)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(25,1):", $t5} $t5 == $t5;
        goto L4;
    }

    // $t11 := borrow_field<optional_aggregator::Integer>.value($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:39:9+13
    $t11 := $ChildMutation($t0, 0, $Dereference($t0)->$value);

    // write_ref($t11, $t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:39:9+37
    $t11 := $UpdateMutation($t11, $t10);

    // write_back[Reference($t0).value (u128)]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:39:9+37
    $t0 := $UpdateMutation($t0, $Update'$1_optional_aggregator_Integer'_value($Dereference($t0), $Dereference($t11)));

    // trace_local[integer]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:39:9+37
    $temp_0'$1_optional_aggregator_Integer' := $Dereference($t0);
    assume {:print "$track_local(25,1,0):", $temp_0'$1_optional_aggregator_Integer'} $temp_0'$1_optional_aggregator_Integer' == $temp_0'$1_optional_aggregator_Integer';

    // trace_local[integer]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:39:46+1
    $temp_0'$1_optional_aggregator_Integer' := $Dereference($t0);
    assume {:print "$track_local(25,1,0):", $temp_0'$1_optional_aggregator_Integer'} $temp_0'$1_optional_aggregator_Integer' == $temp_0'$1_optional_aggregator_Integer';

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:40:5+1
    assume {:print "$at(88,1349,1350)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:40:5+1
    assume {:print "$at(88,1349,1350)"} true;
    $ret0 := $t0;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:40:5+1
L4:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:40:5+1
    assume {:print "$at(88,1349,1350)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun optional_aggregator::read_integer [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:54:5+71
procedure {:inline 1} $1_optional_aggregator_read_integer(_$t0: $1_optional_aggregator_Integer) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t0: $1_optional_aggregator_Integer;
    var $temp_0'$1_optional_aggregator_Integer': $1_optional_aggregator_Integer;
    var $temp_0'u128': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[integer]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:54:5+1
    assume {:print "$at(88,1785,1786)"} true;
    assume {:print "$track_local(25,11,0):", $t0} $t0 == $t0;

    // $t1 := get_field<optional_aggregator::Integer>.value($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:55:9+13
    assume {:print "$at(88,1837,1850)"} true;
    $t1 := $t0->$value;

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:55:9+13
    assume {:print "$track_return(25,11,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:56:5+1
    assume {:print "$at(88,1855,1856)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:56:5+1
    assume {:print "$at(88,1855,1856)"} true;
    $ret0 := $t1;
    return;

}

// fun optional_aggregator::sub_integer [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:43:5+191
procedure {:inline 1} $1_optional_aggregator_sub_integer(_$t0: $Mutation ($1_optional_aggregator_Integer), _$t1: int) returns ($ret0: $Mutation ($1_optional_aggregator_Integer))
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation (int);
    var $t0: $Mutation ($1_optional_aggregator_Integer);
    var $t1: int;
    var $temp_0'$1_optional_aggregator_Integer': $1_optional_aggregator_Integer;
    var $temp_0'u128': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[integer]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:43:5+1
    assume {:print "$at(88,1424,1425)"} true;
    $temp_0'$1_optional_aggregator_Integer' := $Dereference($t0);
    assume {:print "$track_local(25,13,0):", $temp_0'$1_optional_aggregator_Integer'} $temp_0'$1_optional_aggregator_Integer' == $temp_0'$1_optional_aggregator_Integer';

    // trace_local[value]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:43:5+1
    assume {:print "$track_local(25,13,1):", $t1} $t1 == $t1;

    // $t2 := get_field<optional_aggregator::Integer>.value($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:44:26+13
    assume {:print "$at(88,1503,1516)"} true;
    $t2 := $Dereference($t0)->$value;

    // $t3 := <=($t1, $t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:44:23+2
    call $t3 := $Le($t1, $t2);

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:44:9+75
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:44:9+75
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:44:9+75
    assume {:print "$at(88,1486,1561)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:44:9+75
L0:

    // drop($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:44:9+75
    assume {:print "$at(88,1486,1561)"} true;

    // $t4 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:44:61+21
    $t4 := 2;
    assume $IsValid'u64'($t4);

    // $t5 := error::out_of_range($t4) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:44:41+42
    call $t5 := $1_error_out_of_range($t4);
    if ($abort_flag) {
        assume {:print "$at(88,1518,1560)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,13):", $t6} $t6 == $t6;
        goto L4;
    }

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:44:9+75
    assume {:print "$at(88,1486,1561)"} true;
    assume {:print "$track_abort(25,13):", $t5} $t5 == $t5;

    // $t6 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:44:9+75
    $t6 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:44:9+75
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:45:25+7
    assume {:print "$at(88,1587,1594)"} true;
L2:

    // $t7 := get_field<optional_aggregator::Integer>.value($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:45:25+13
    assume {:print "$at(88,1587,1600)"} true;
    $t7 := $Dereference($t0)->$value;

    // $t8 := -($t7, $t1) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:45:39+1
    call $t8 := $Sub($t7, $t1);
    if ($abort_flag) {
        assume {:print "$at(88,1601,1602)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(25,13):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t9 := borrow_field<optional_aggregator::Integer>.value($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:45:9+13
    $t9 := $ChildMutation($t0, 0, $Dereference($t0)->$value);

    // write_ref($t9, $t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:45:9+37
    $t9 := $UpdateMutation($t9, $t8);

    // write_back[Reference($t0).value (u128)]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:45:9+37
    $t0 := $UpdateMutation($t0, $Update'$1_optional_aggregator_Integer'_value($Dereference($t0), $Dereference($t9)));

    // trace_local[integer]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:45:9+37
    $temp_0'$1_optional_aggregator_Integer' := $Dereference($t0);
    assume {:print "$track_local(25,13,0):", $temp_0'$1_optional_aggregator_Integer'} $temp_0'$1_optional_aggregator_Integer' == $temp_0'$1_optional_aggregator_Integer';

    // trace_local[integer]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:45:46+1
    $temp_0'$1_optional_aggregator_Integer' := $Dereference($t0);
    assume {:print "$track_local(25,13,0):", $temp_0'$1_optional_aggregator_Integer'} $temp_0'$1_optional_aggregator_Integer' == $temp_0'$1_optional_aggregator_Integer';

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:46:5+1
    assume {:print "$at(88,1614,1615)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:46:5+1
    assume {:print "$at(88,1614,1615)"} true;
    $ret0 := $t0;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:46:5+1
L4:

    // abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aggregator/optional_aggregator.move:46:5+1
    assume {:print "$at(88,1614,1615)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// struct function_info::FunctionInfo at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:19:5+142
datatype $1_function_info_FunctionInfo {
    $1_function_info_FunctionInfo($module_address: int, $module_name: $1_string_String, $function_name: $1_string_String)
}
function {:inline} $Update'$1_function_info_FunctionInfo'_module_address(s: $1_function_info_FunctionInfo, x: int): $1_function_info_FunctionInfo {
    $1_function_info_FunctionInfo(x, s->$module_name, s->$function_name)
}
function {:inline} $Update'$1_function_info_FunctionInfo'_module_name(s: $1_function_info_FunctionInfo, x: $1_string_String): $1_function_info_FunctionInfo {
    $1_function_info_FunctionInfo(s->$module_address, x, s->$function_name)
}
function {:inline} $Update'$1_function_info_FunctionInfo'_function_name(s: $1_function_info_FunctionInfo, x: $1_string_String): $1_function_info_FunctionInfo {
    $1_function_info_FunctionInfo(s->$module_address, s->$module_name, x)
}
function $IsValid'$1_function_info_FunctionInfo'(s: $1_function_info_FunctionInfo): bool {
    $IsValid'address'(s->$module_address)
      && $IsValid'$1_string_String'(s->$module_name)
      && $IsValid'$1_string_String'(s->$function_name)
}
function {:inline} $IsEqual'$1_function_info_FunctionInfo'(s1: $1_function_info_FunctionInfo, s2: $1_function_info_FunctionInfo): bool {
    $IsEqual'address'(s1->$module_address, s2->$module_address)
    && $IsEqual'$1_string_String'(s1->$module_name, s2->$module_name)
    && $IsEqual'$1_string_String'(s1->$function_name, s2->$function_name)}

// fun function_info::load_module_from_function [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:89:5+100
procedure {:inline 1} $1_function_info_load_module_from_function(_$t0: $1_function_info_FunctionInfo) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t0: $1_function_info_FunctionInfo;
    var $temp_0'$1_function_info_FunctionInfo': $1_function_info_FunctionInfo;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[f]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:89:5+1
    assume {:print "$at(138,3414,3415)"} true;
    assume {:print "$track_local(26,4,0):", $t0} $t0 == $t0;

    // opaque begin: function_info::load_function_impl($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:90:9+21
    assume {:print "$at(138,3487,3508)"} true;

    // $t1 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:90:9+21
    havoc $t1;

    // if ($t1) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:90:9+21
    if ($t1) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:90:9+21
L4:

    // trace_abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:90:9+21
    assume {:print "$at(138,3487,3508)"} true;
    assume {:print "$track_abort(26,4):", $t2} $t2 == $t2;

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:90:9+21
    goto L2;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:90:9+21
L3:

    // opaque end: function_info::load_function_impl($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:90:9+21
    assume {:print "$at(138,3487,3508)"} true;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:91:5+1
    assume {:print "$at(138,3513,3514)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:91:5+1
    assume {:print "$at(138,3513,3514)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:91:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/function_info.move:91:5+1
    assume {:print "$at(138,3513,3514)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// struct fungible_asset::TransferRef at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:176:5+77
datatype $1_fungible_asset_TransferRef {
    $1_fungible_asset_TransferRef($metadata: $1_object_Object'$1_fungible_asset_Metadata')
}
function {:inline} $Update'$1_fungible_asset_TransferRef'_metadata(s: $1_fungible_asset_TransferRef, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_TransferRef {
    $1_fungible_asset_TransferRef(x)
}
function $IsValid'$1_fungible_asset_TransferRef'(s: $1_fungible_asset_TransferRef): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
}
function {:inline} $IsEqual'$1_fungible_asset_TransferRef'(s1: $1_fungible_asset_TransferRef, s2: $1_fungible_asset_TransferRef): bool {
    s1 == s2
}

// struct fungible_asset::Untransferable at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:135:5+32
datatype $1_fungible_asset_Untransferable {
    $1_fungible_asset_Untransferable($dummy_field: bool)
}
function {:inline} $Update'$1_fungible_asset_Untransferable'_dummy_field(s: $1_fungible_asset_Untransferable, x: bool): $1_fungible_asset_Untransferable {
    $1_fungible_asset_Untransferable(x)
}
function $IsValid'$1_fungible_asset_Untransferable'(s: $1_fungible_asset_Untransferable): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_fungible_asset_Untransferable'(s1: $1_fungible_asset_Untransferable, s2: $1_fungible_asset_Untransferable): bool {
    s1 == s2
}
var $1_fungible_asset_Untransferable_$memory: $Memory $1_fungible_asset_Untransferable;

// struct fungible_asset::BurnRef at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:181:5+73
datatype $1_fungible_asset_BurnRef {
    $1_fungible_asset_BurnRef($metadata: $1_object_Object'$1_fungible_asset_Metadata')
}
function {:inline} $Update'$1_fungible_asset_BurnRef'_metadata(s: $1_fungible_asset_BurnRef, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_BurnRef {
    $1_fungible_asset_BurnRef(x)
}
function $IsValid'$1_fungible_asset_BurnRef'(s: $1_fungible_asset_BurnRef): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
}
function {:inline} $IsEqual'$1_fungible_asset_BurnRef'(s1: $1_fungible_asset_BurnRef, s2: $1_fungible_asset_BurnRef): bool {
    s1 == s2
}

// struct fungible_asset::ConcurrentFungibleBalance at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:157:5+132
datatype $1_fungible_asset_ConcurrentFungibleBalance {
    $1_fungible_asset_ConcurrentFungibleBalance($balance: $1_aggregator_v2_Aggregator'u64')
}
function {:inline} $Update'$1_fungible_asset_ConcurrentFungibleBalance'_balance(s: $1_fungible_asset_ConcurrentFungibleBalance, x: $1_aggregator_v2_Aggregator'u64'): $1_fungible_asset_ConcurrentFungibleBalance {
    $1_fungible_asset_ConcurrentFungibleBalance(x)
}
function $IsValid'$1_fungible_asset_ConcurrentFungibleBalance'(s: $1_fungible_asset_ConcurrentFungibleBalance): bool {
    $IsValid'$1_aggregator_v2_Aggregator'u64''(s->$balance)
}
function {:inline} $IsEqual'$1_fungible_asset_ConcurrentFungibleBalance'(s1: $1_fungible_asset_ConcurrentFungibleBalance, s2: $1_fungible_asset_ConcurrentFungibleBalance): bool {
    s1 == s2
}
var $1_fungible_asset_ConcurrentFungibleBalance_$memory: $Memory $1_fungible_asset_ConcurrentFungibleBalance;

// struct fungible_asset::ConcurrentSupply at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:109:5+74
datatype $1_fungible_asset_ConcurrentSupply {
    $1_fungible_asset_ConcurrentSupply($current: $1_aggregator_v2_Aggregator'u128')
}
function {:inline} $Update'$1_fungible_asset_ConcurrentSupply'_current(s: $1_fungible_asset_ConcurrentSupply, x: $1_aggregator_v2_Aggregator'u128'): $1_fungible_asset_ConcurrentSupply {
    $1_fungible_asset_ConcurrentSupply(x)
}
function $IsValid'$1_fungible_asset_ConcurrentSupply'(s: $1_fungible_asset_ConcurrentSupply): bool {
    $IsValid'$1_aggregator_v2_Aggregator'u128''(s->$current)
}
function {:inline} $IsEqual'$1_fungible_asset_ConcurrentSupply'(s1: $1_fungible_asset_ConcurrentSupply, s2: $1_fungible_asset_ConcurrentSupply): bool {
    s1 == s2
}
var $1_fungible_asset_ConcurrentSupply_$memory: $Memory $1_fungible_asset_ConcurrentSupply;

// struct fungible_asset::Deposit at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:192:5+83
datatype $1_fungible_asset_Deposit {
    $1_fungible_asset_Deposit($store: int, $amount: int)
}
function {:inline} $Update'$1_fungible_asset_Deposit'_store(s: $1_fungible_asset_Deposit, x: int): $1_fungible_asset_Deposit {
    $1_fungible_asset_Deposit(x, s->$amount)
}
function {:inline} $Update'$1_fungible_asset_Deposit'_amount(s: $1_fungible_asset_Deposit, x: int): $1_fungible_asset_Deposit {
    $1_fungible_asset_Deposit(s->$store, x)
}
function $IsValid'$1_fungible_asset_Deposit'(s: $1_fungible_asset_Deposit): bool {
    $IsValid'address'(s->$store)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_fungible_asset_Deposit'(s1: $1_fungible_asset_Deposit, s2: $1_fungible_asset_Deposit): bool {
    s1 == s2
}

// struct fungible_asset::DispatchFunctionStore at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:149:5+185
datatype $1_fungible_asset_DispatchFunctionStore {
    $1_fungible_asset_DispatchFunctionStore($withdraw_function: $1_option_Option'$1_function_info_FunctionInfo', $deposit_function: $1_option_Option'$1_function_info_FunctionInfo', $derived_balance_function: $1_option_Option'$1_function_info_FunctionInfo')
}
function {:inline} $Update'$1_fungible_asset_DispatchFunctionStore'_withdraw_function(s: $1_fungible_asset_DispatchFunctionStore, x: $1_option_Option'$1_function_info_FunctionInfo'): $1_fungible_asset_DispatchFunctionStore {
    $1_fungible_asset_DispatchFunctionStore(x, s->$deposit_function, s->$derived_balance_function)
}
function {:inline} $Update'$1_fungible_asset_DispatchFunctionStore'_deposit_function(s: $1_fungible_asset_DispatchFunctionStore, x: $1_option_Option'$1_function_info_FunctionInfo'): $1_fungible_asset_DispatchFunctionStore {
    $1_fungible_asset_DispatchFunctionStore(s->$withdraw_function, x, s->$derived_balance_function)
}
function {:inline} $Update'$1_fungible_asset_DispatchFunctionStore'_derived_balance_function(s: $1_fungible_asset_DispatchFunctionStore, x: $1_option_Option'$1_function_info_FunctionInfo'): $1_fungible_asset_DispatchFunctionStore {
    $1_fungible_asset_DispatchFunctionStore(s->$withdraw_function, s->$deposit_function, x)
}
function $IsValid'$1_fungible_asset_DispatchFunctionStore'(s: $1_fungible_asset_DispatchFunctionStore): bool {
    $IsValid'$1_option_Option'$1_function_info_FunctionInfo''(s->$withdraw_function)
      && $IsValid'$1_option_Option'$1_function_info_FunctionInfo''(s->$deposit_function)
      && $IsValid'$1_option_Option'$1_function_info_FunctionInfo''(s->$derived_balance_function)
}
function {:inline} $IsEqual'$1_fungible_asset_DispatchFunctionStore'(s1: $1_fungible_asset_DispatchFunctionStore, s2: $1_fungible_asset_DispatchFunctionStore): bool {
    $IsEqual'$1_option_Option'$1_function_info_FunctionInfo''(s1->$withdraw_function, s2->$withdraw_function)
    && $IsEqual'$1_option_Option'$1_function_info_FunctionInfo''(s1->$deposit_function, s2->$deposit_function)
    && $IsEqual'$1_option_Option'$1_function_info_FunctionInfo''(s1->$derived_balance_function, s2->$derived_balance_function)}
var $1_fungible_asset_DispatchFunctionStore_$memory: $Memory $1_fungible_asset_DispatchFunctionStore;

// struct fungible_asset::FungibleAsset at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:164:5+85
datatype $1_fungible_asset_FungibleAsset {
    $1_fungible_asset_FungibleAsset($metadata: $1_object_Object'$1_fungible_asset_Metadata', $amount: int)
}
function {:inline} $Update'$1_fungible_asset_FungibleAsset'_metadata(s: $1_fungible_asset_FungibleAsset, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_FungibleAsset {
    $1_fungible_asset_FungibleAsset(x, s->$amount)
}
function {:inline} $Update'$1_fungible_asset_FungibleAsset'_amount(s: $1_fungible_asset_FungibleAsset, x: int): $1_fungible_asset_FungibleAsset {
    $1_fungible_asset_FungibleAsset(s->$metadata, x)
}
function $IsValid'$1_fungible_asset_FungibleAsset'(s: $1_fungible_asset_FungibleAsset): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_fungible_asset_FungibleAsset'(s1: $1_fungible_asset_FungibleAsset, s2: $1_fungible_asset_FungibleAsset): bool {
    s1 == s2
}

// struct fungible_asset::FungibleStore at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:139:5+324
datatype $1_fungible_asset_FungibleStore {
    $1_fungible_asset_FungibleStore($metadata: $1_object_Object'$1_fungible_asset_Metadata', $balance: int, $frozen: bool)
}
function {:inline} $Update'$1_fungible_asset_FungibleStore'_metadata(s: $1_fungible_asset_FungibleStore, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_FungibleStore {
    $1_fungible_asset_FungibleStore(x, s->$balance, s->$frozen)
}
function {:inline} $Update'$1_fungible_asset_FungibleStore'_balance(s: $1_fungible_asset_FungibleStore, x: int): $1_fungible_asset_FungibleStore {
    $1_fungible_asset_FungibleStore(s->$metadata, x, s->$frozen)
}
function {:inline} $Update'$1_fungible_asset_FungibleStore'_frozen(s: $1_fungible_asset_FungibleStore, x: bool): $1_fungible_asset_FungibleStore {
    $1_fungible_asset_FungibleStore(s->$metadata, s->$balance, x)
}
function $IsValid'$1_fungible_asset_FungibleStore'(s: $1_fungible_asset_FungibleStore): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
      && $IsValid'u64'(s->$balance)
      && $IsValid'bool'(s->$frozen)
}
function {:inline} $IsEqual'$1_fungible_asset_FungibleStore'(s1: $1_fungible_asset_FungibleStore, s2: $1_fungible_asset_FungibleStore): bool {
    s1 == s2
}
var $1_fungible_asset_FungibleStore_$memory: $Memory $1_fungible_asset_FungibleStore;

// struct fungible_asset::Metadata at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:115:5+797
datatype $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata($name: $1_string_String, $symbol: $1_string_String, $decimals: int, $icon_uri: $1_string_String, $project_uri: $1_string_String)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_name(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(x, s->$symbol, s->$decimals, s->$icon_uri, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_symbol(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, x, s->$decimals, s->$icon_uri, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_decimals(s: $1_fungible_asset_Metadata, x: int): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, s->$symbol, x, s->$icon_uri, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_icon_uri(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, s->$symbol, s->$decimals, x, s->$project_uri)
}
function {:inline} $Update'$1_fungible_asset_Metadata'_project_uri(s: $1_fungible_asset_Metadata, x: $1_string_String): $1_fungible_asset_Metadata {
    $1_fungible_asset_Metadata(s->$name, s->$symbol, s->$decimals, s->$icon_uri, x)
}
function $IsValid'$1_fungible_asset_Metadata'(s: $1_fungible_asset_Metadata): bool {
    $IsValid'$1_string_String'(s->$name)
      && $IsValid'$1_string_String'(s->$symbol)
      && $IsValid'u8'(s->$decimals)
      && $IsValid'$1_string_String'(s->$icon_uri)
      && $IsValid'$1_string_String'(s->$project_uri)
}
function {:inline} $IsEqual'$1_fungible_asset_Metadata'(s1: $1_fungible_asset_Metadata, s2: $1_fungible_asset_Metadata): bool {
    $IsEqual'$1_string_String'(s1->$name, s2->$name)
    && $IsEqual'$1_string_String'(s1->$symbol, s2->$symbol)
    && $IsEqual'u8'(s1->$decimals, s2->$decimals)
    && $IsEqual'$1_string_String'(s1->$icon_uri, s2->$icon_uri)
    && $IsEqual'$1_string_String'(s1->$project_uri, s2->$project_uri)}
var $1_fungible_asset_Metadata_$memory: $Memory $1_fungible_asset_Metadata;

// struct fungible_asset::MintRef at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:170:5+73
datatype $1_fungible_asset_MintRef {
    $1_fungible_asset_MintRef($metadata: $1_object_Object'$1_fungible_asset_Metadata')
}
function {:inline} $Update'$1_fungible_asset_MintRef'_metadata(s: $1_fungible_asset_MintRef, x: $1_object_Object'$1_fungible_asset_Metadata'): $1_fungible_asset_MintRef {
    $1_fungible_asset_MintRef(x)
}
function $IsValid'$1_fungible_asset_MintRef'(s: $1_fungible_asset_MintRef): bool {
    $IsValid'$1_object_Object'$1_fungible_asset_Metadata''(s->$metadata)
}
function {:inline} $IsEqual'$1_fungible_asset_MintRef'(s1: $1_fungible_asset_MintRef, s2: $1_fungible_asset_MintRef): bool {
    s1 == s2
}

// struct fungible_asset::Supply at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:102:5+133
datatype $1_fungible_asset_Supply {
    $1_fungible_asset_Supply($current: int, $maximum: $1_option_Option'u128')
}
function {:inline} $Update'$1_fungible_asset_Supply'_current(s: $1_fungible_asset_Supply, x: int): $1_fungible_asset_Supply {
    $1_fungible_asset_Supply(x, s->$maximum)
}
function {:inline} $Update'$1_fungible_asset_Supply'_maximum(s: $1_fungible_asset_Supply, x: $1_option_Option'u128'): $1_fungible_asset_Supply {
    $1_fungible_asset_Supply(s->$current, x)
}
function $IsValid'$1_fungible_asset_Supply'(s: $1_fungible_asset_Supply): bool {
    $IsValid'u128'(s->$current)
      && $IsValid'$1_option_Option'u128''(s->$maximum)
}
function {:inline} $IsEqual'$1_fungible_asset_Supply'(s1: $1_fungible_asset_Supply, s2: $1_fungible_asset_Supply): bool {
    $IsEqual'u128'(s1->$current, s2->$current)
    && $IsEqual'$1_option_Option'u128''(s1->$maximum, s2->$maximum)}
var $1_fungible_asset_Supply_$memory: $Memory $1_fungible_asset_Supply;

// struct fungible_asset::Withdraw at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:199:5+84
datatype $1_fungible_asset_Withdraw {
    $1_fungible_asset_Withdraw($store: int, $amount: int)
}
function {:inline} $Update'$1_fungible_asset_Withdraw'_store(s: $1_fungible_asset_Withdraw, x: int): $1_fungible_asset_Withdraw {
    $1_fungible_asset_Withdraw(x, s->$amount)
}
function {:inline} $Update'$1_fungible_asset_Withdraw'_amount(s: $1_fungible_asset_Withdraw, x: int): $1_fungible_asset_Withdraw {
    $1_fungible_asset_Withdraw(s->$store, x)
}
function $IsValid'$1_fungible_asset_Withdraw'(s: $1_fungible_asset_Withdraw): bool {
    $IsValid'address'(s->$store)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_fungible_asset_Withdraw'(s1: $1_fungible_asset_Withdraw, s2: $1_fungible_asset_Withdraw): bool {
    s1 == s2
}

// fun fungible_asset::burn [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:809:5+275
procedure {:inline 1} $1_fungible_asset_burn(_$t0: $1_fungible_asset_BurnRef, _$t1: $1_fungible_asset_FungibleAsset) returns ()
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t0: $1_fungible_asset_BurnRef;
    var $t1: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_BurnRef': $1_fungible_asset_BurnRef;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:809:5+1
    assume {:print "$at(140,33795,33796)"} true;
    assume {:print "$track_local(27,5,0):", $t0} $t0 == $t0;

    // trace_local[fa]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:809:5+1
    assume {:print "$track_local(27,5,1):", $t1} $t1 == $t1;

    // $t2 := get_field<fungible_asset::BurnRef>.metadata($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:811:13+12
    assume {:print "$at(140,33910,33922)"} true;
    $t2 := $t0->$metadata;

    // $t3 := fungible_asset::metadata_from_asset($t1) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:811:29+24
    call $t3 := $1_fungible_asset_metadata_from_asset($t1);
    if ($abort_flag) {
        assume {:print "$at(140,33926,33950)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(27,5):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t5 := ==($t2, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:811:26+2
    $t5 := $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t2, $t3);

    // if ($t5) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:810:9+147
    assume {:print "$at(140,33889,34036)"} true;
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:810:9+147
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:810:9+147
    assume {:print "$at(140,33889,34036)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:812:37+37
    assume {:print "$at(140,33988,34025)"} true;
L0:

    // $t6 := 13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:812:37+37
    assume {:print "$at(140,33988,34025)"} true;
    $t6 := 13;
    assume $IsValid'u64'($t6);

    // $t7 := error::invalid_argument($t6) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:812:13+62
    call $t7 := $1_error_invalid_argument($t6);
    if ($abort_flag) {
        assume {:print "$at(140,33964,34026)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(27,5):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:810:9+147
    assume {:print "$at(140,33889,34036)"} true;
    assume {:print "$track_abort(27,5):", $t7} $t7 == $t7;

    // $t4 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:810:9+147
    $t4 := $t7;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:810:9+147
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:814:23+2
    assume {:print "$at(140,34060,34062)"} true;
L2:

    // $t8 := fungible_asset::burn_internal($t1) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:814:9+17
    assume {:print "$at(140,34046,34063)"} true;
    call $t8 := $1_fungible_asset_burn_internal($t1);
    if ($abort_flag) {
        assume {:print "$at(140,34046,34063)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(27,5):", $t4} $t4 == $t4;
        goto L4;
    }

    // drop($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:814:9+17

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:815:5+1
    assume {:print "$at(140,34069,34070)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:815:5+1
    assume {:print "$at(140,34069,34070)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:815:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:815:5+1
    assume {:print "$at(140,34069,34070)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun fungible_asset::generate_transfer_ref [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:404:5+207
procedure {:inline 1} $1_fungible_asset_generate_transfer_ref(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_fungible_asset_TransferRef)
{
    // declare local variables
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $t2: int;
    var $t3: $1_fungible_asset_TransferRef;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_fungible_asset_TransferRef': $1_fungible_asset_TransferRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[constructor_ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:404:5+1
    assume {:print "$at(140,17134,17135)"} true;
    assume {:print "$track_local(27,24,0):", $t0} $t0 == $t0;

    // $t1 := object::object_from_constructor_ref<fungible_asset::Metadata>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:405:24+62
    assume {:print "$at(140,17239,17301)"} true;
    call $t1 := $1_object_object_from_constructor_ref'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(140,17239,17301)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(27,24):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack fungible_asset::TransferRef($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:406:9+24
    assume {:print "$at(140,17311,17335)"} true;
    $t3 := $1_fungible_asset_TransferRef($t1);

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:406:9+24
    assume {:print "$track_return(27,24,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:407:5+1
    assume {:print "$at(140,17340,17341)"} true;
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:407:5+1
    assume {:print "$at(140,17340,17341)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:407:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:407:5+1
    assume {:print "$at(140,17340,17341)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun fungible_asset::is_untransferable<fungible_asset::Metadata> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:286:5+137
procedure {:inline 1} $1_fungible_asset_is_untransferable'$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: bool)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[metadata]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:286:5+1
    assume {:print "$at(140,12016,12017)"} true;
    assume {:print "$track_local(27,33,0):", $t0} $t0 == $t0;

    // $t1 := object::object_address<#0>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:287:32+33
    assume {:print "$at(140,12113,12146)"} true;
    call $t1 := $1_object_object_address'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(140,12113,12146)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(27,33):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := exists<fungible_asset::Untransferable>($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:287:9+6
    $t3 := $ResourceExists($1_fungible_asset_Untransferable_$memory, $t1);

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:287:9+57
    assume {:print "$track_return(27,33,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:288:5+1
    assume {:print "$at(140,12152,12153)"} true;
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:288:5+1
    assume {:print "$at(140,12152,12153)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:288:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:288:5+1
    assume {:print "$at(140,12152,12153)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun fungible_asset::add_fungibility [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:230:5+1830
procedure {:inline 1} $1_fungible_asset_add_fungibility(_$t0: $1_object_ConstructorRef, _$t1: $1_option_Option'u128', _$t2: $1_string_String, _$t3: $1_string_String, _$t4: int, _$t5: $1_string_String, _$t6: $1_string_String) returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t7: $signer;
    var $t8: $1_aggregator_v2_Aggregator'u128';
    var $t9: $signer;
    var $t10: $signer;
    var $t11: bool;
    var $t12: bool;
    var $t13: int;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: $signer;
    var $t18: int;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: bool;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: bool;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: int;
    var $t39: bool;
    var $t40: int;
    var $t41: int;
    var $t42: $1_fungible_asset_Metadata;
    var $t43: bool;
    var $t44: $1_option_Option'u128';
    var $t45: bool;
    var $t46: bool;
    var $t47: $Mutation ($1_option_Option'u128');
    var $t48: int;
    var $t49: $1_option_Option'u128';
    var $t50: bool;
    var $t51: bool;
    var $t52: $1_fungible_asset_ConcurrentSupply;
    var $t53: int;
    var $t54: $1_option_Option'u128';
    var $t55: $1_fungible_asset_Supply;
    var $t56: $1_object_Object'$1_fungible_asset_Metadata';
    var $t0: $1_object_ConstructorRef;
    var $t1: $1_option_Option'u128';
    var $t2: $1_string_String;
    var $t3: $1_string_String;
    var $t4: int;
    var $t5: $1_string_String;
    var $t6: $1_string_String;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_option_Option'u128'': $1_option_Option'u128';
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;

    // bytecode translation starts here
    // trace_local[constructor_ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:230:5+1
    assume {:print "$at(140,9649,9650)"} true;
    assume {:print "$track_local(27,0,0):", $t0} $t0 == $t0;

    // trace_local[maximum_supply]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:230:5+1
    assume {:print "$track_local(27,0,1):", $t1} $t1 == $t1;

    // trace_local[name]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:230:5+1
    assume {:print "$track_local(27,0,2):", $t2} $t2 == $t2;

    // trace_local[symbol]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:230:5+1
    assume {:print "$track_local(27,0,3):", $t3} $t3 == $t3;

    // trace_local[decimals]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:230:5+1
    assume {:print "$track_local(27,0,4):", $t4} $t4 == $t4;

    // trace_local[icon_uri]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:230:5+1
    assume {:print "$track_local(27,0,5):", $t5} $t5 == $t5;

    // trace_local[project_uri]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:230:5+1
    assume {:print "$track_local(27,0,6):", $t6} $t6 == $t6;

    // $t12 := object::can_generate_delete_ref($t0) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:239:18+48
    assume {:print "$at(140,9923,9971)"} true;
    call $t12 := $1_object_can_generate_delete_ref($t0);
    if ($abort_flag) {
        assume {:print "$at(140,9923,9971)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // $t14 := !($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:239:17+1
    call $t14 := $Not($t12);

    // if ($t14) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:239:9+105
    if ($t14) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:239:9+105
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:239:9+105
    assume {:print "$at(140,9914,10019)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:239:9+105
L0:

    // $t15 := 18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:239:92+20
    assume {:print "$at(140,9997,10017)"} true;
    $t15 := 18;
    assume $IsValid'u64'($t15);

    // $t16 := error::invalid_argument($t15) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:239:68+45
    call $t16 := $1_error_invalid_argument($t15);
    if ($abort_flag) {
        assume {:print "$at(140,9973,10018)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // trace_abort($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:239:9+105
    assume {:print "$at(140,9914,10019)"} true;
    assume {:print "$track_abort(27,0):", $t16} $t16 == $t16;

    // $t13 := move($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:239:9+105
    $t13 := $t16;

    // goto L25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:239:9+105
    goto L25;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:240:63+15
    assume {:print "$at(140,10083,10098)"} true;
L2:

    // $t17 := object::generate_signer($t0) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:240:39+40
    assume {:print "$at(140,10059,10099)"} true;
    call $t17 := $1_object_generate_signer($t0);
    if ($abort_flag) {
        assume {:print "$at(140,10059,10099)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // trace_local[metadata_object_signer]($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:240:13+22
    assume {:print "$track_local(27,0,10):", $t17} $t17 == $t17;

    // $t18 := string::length($t2) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:241:17+21
    assume {:print "$at(140,10117,10138)"} true;
    call $t18 := $1_string_length($t2);
    if ($abort_flag) {
        assume {:print "$at(140,10117,10138)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // $t19 := 32 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:241:42+15
    $t19 := 32;
    assume $IsValid'u64'($t19);

    // $t20 := <=($t18, $t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:241:39+2
    call $t20 := $Le($t18, $t19);

    // if ($t20) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:241:9+86
    if ($t20) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:241:9+86
L4:

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:241:9+86
    assume {:print "$at(140,10109,10195)"} true;
    goto L5;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:241:9+86
L3:

    // $t21 := 15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:241:79+14
    assume {:print "$at(140,10179,10193)"} true;
    $t21 := 15;
    assume $IsValid'u64'($t21);

    // $t22 := error::out_of_range($t21) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:241:59+35
    call $t22 := $1_error_out_of_range($t21);
    if ($abort_flag) {
        assume {:print "$at(140,10159,10194)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // trace_abort($t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:241:9+86
    assume {:print "$at(140,10109,10195)"} true;
    assume {:print "$track_abort(27,0):", $t22} $t22 == $t22;

    // $t13 := move($t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:241:9+86
    $t13 := $t22;

    // goto L25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:241:9+86
    goto L25;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:242:32+7
    assume {:print "$at(140,10228,10235)"} true;
L5:

    // $t23 := string::length($t3) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:242:17+23
    assume {:print "$at(140,10213,10236)"} true;
    call $t23 := $1_string_length($t3);
    if ($abort_flag) {
        assume {:print "$at(140,10213,10236)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // $t24 := 10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:242:44+17
    $t24 := 10;
    assume $IsValid'u64'($t24);

    // $t25 := <=($t23, $t24) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:242:41+2
    call $t25 := $Le($t23, $t24);

    // if ($t25) goto L7 else goto L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:242:9+92
    if ($t25) { goto L7; } else { goto L6; }

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:242:9+92
L7:

    // goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:242:9+92
    assume {:print "$at(140,10205,10297)"} true;
    goto L8;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:242:9+92
L6:

    // $t26 := 16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:242:83+16
    assume {:print "$at(140,10279,10295)"} true;
    $t26 := 16;
    assume $IsValid'u64'($t26);

    // $t27 := error::out_of_range($t26) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:242:63+37
    call $t27 := $1_error_out_of_range($t26);
    if ($abort_flag) {
        assume {:print "$at(140,10259,10296)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // trace_abort($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:242:9+92
    assume {:print "$at(140,10205,10297)"} true;
    assume {:print "$track_abort(27,0):", $t27} $t27 == $t27;

    // $t13 := move($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:242:9+92
    $t13 := $t27;

    // goto L25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:242:9+92
    goto L25;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:243:17+8
    assume {:print "$at(140,10315,10323)"} true;
L8:

    // $t28 := 32 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:243:29+12
    assume {:print "$at(140,10327,10339)"} true;
    $t28 := 32;
    assume $IsValid'u8'($t28);

    // $t29 := <=($t4, $t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:243:26+2
    call $t29 := $Le($t4, $t28);

    // if ($t29) goto L10 else goto L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:243:9+75
    if ($t29) { goto L10; } else { goto L9; }

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:243:9+75
L10:

    // goto L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:243:9+75
    assume {:print "$at(140,10307,10382)"} true;
    goto L11;

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:243:9+75
L9:

    // $t30 := 17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:243:63+19
    assume {:print "$at(140,10361,10380)"} true;
    $t30 := 17;
    assume $IsValid'u64'($t30);

    // $t31 := error::out_of_range($t30) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:243:43+40
    call $t31 := $1_error_out_of_range($t30);
    if ($abort_flag) {
        assume {:print "$at(140,10341,10381)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // trace_abort($t31) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:243:9+75
    assume {:print "$at(140,10307,10382)"} true;
    assume {:print "$track_abort(27,0):", $t31} $t31 == $t31;

    // $t13 := move($t31) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:243:9+75
    $t13 := $t31;

    // goto L25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:243:9+75
    goto L25;

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:244:32+9
    assume {:print "$at(140,10415,10424)"} true;
L11:

    // $t32 := string::length($t5) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:244:17+25
    assume {:print "$at(140,10400,10425)"} true;
    call $t32 := $1_string_length($t5);
    if ($abort_flag) {
        assume {:print "$at(140,10400,10425)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // $t33 := 512 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:244:46+14
    $t33 := 512;
    assume $IsValid'u64'($t33);

    // $t34 := <=($t32, $t33) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:244:43+2
    call $t34 := $Le($t32, $t33);

    // if ($t34) goto L13 else goto L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:244:9+88
    if ($t34) { goto L13; } else { goto L12; }

    // label L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:244:9+88
L13:

    // goto L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:244:9+88
    assume {:print "$at(140,10392,10480)"} true;
    goto L14;

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:244:9+88
L12:

    // $t35 := 19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:244:82+13
    assume {:print "$at(140,10465,10478)"} true;
    $t35 := 19;
    assume $IsValid'u64'($t35);

    // $t36 := error::out_of_range($t35) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:244:62+34
    call $t36 := $1_error_out_of_range($t35);
    if ($abort_flag) {
        assume {:print "$at(140,10445,10479)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // trace_abort($t36) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:244:9+88
    assume {:print "$at(140,10392,10480)"} true;
    assume {:print "$track_abort(27,0):", $t36} $t36 == $t36;

    // $t13 := move($t36) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:244:9+88
    $t13 := $t36;

    // goto L25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:244:9+88
    goto L25;

    // label L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:245:32+12
    assume {:print "$at(140,10513,10525)"} true;
L14:

    // $t37 := string::length($t6) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:245:17+28
    assume {:print "$at(140,10498,10526)"} true;
    call $t37 := $1_string_length($t6);
    if ($abort_flag) {
        assume {:print "$at(140,10498,10526)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // $t38 := 512 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:245:49+14
    $t38 := 512;
    assume $IsValid'u64'($t38);

    // $t39 := <=($t37, $t38) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:245:46+2
    call $t39 := $Le($t37, $t38);

    // if ($t39) goto L16 else goto L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:245:9+91
    if ($t39) { goto L16; } else { goto L15; }

    // label L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:245:9+91
L16:

    // goto L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:245:9+91
    assume {:print "$at(140,10490,10581)"} true;
    goto L17;

    // label L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:245:9+91
L15:

    // $t40 := 19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:245:85+13
    assume {:print "$at(140,10566,10579)"} true;
    $t40 := 19;
    assume $IsValid'u64'($t40);

    // $t41 := error::out_of_range($t40) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:245:65+34
    call $t41 := $1_error_out_of_range($t40);
    if ($abort_flag) {
        assume {:print "$at(140,10546,10580)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // trace_abort($t41) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:245:9+91
    assume {:print "$at(140,10490,10581)"} true;
    assume {:print "$track_abort(27,0):", $t41} $t41 == $t41;

    // $t13 := move($t41) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:245:9+91
    $t13 := $t41;

    // goto L25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:245:9+91
    goto L25;

    // label L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:246:17+22
    assume {:print "$at(140,10599,10621)"} true;
L17:

    // $t42 := pack fungible_asset::Metadata($t2, $t3, $t4, $t5, $t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:247:13+151
    assume {:print "$at(140,10635,10786)"} true;
    $t42 := $1_fungible_asset_Metadata($t2, $t3, $t4, $t5, $t6);

    // move_to<fungible_asset::Metadata>($t42, $t17) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:246:9+7
    assume {:print "$at(140,10591,10598)"} true;
    if ($ResourceExists($1_fungible_asset_Metadata_$memory, $t17->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_fungible_asset_Metadata_$memory := $ResourceUpdate($1_fungible_asset_Metadata_$memory, $t17->$addr, $t42);
    }
    if ($abort_flag) {
        assume {:print "$at(140,10591,10598)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // $t43 := features::concurrent_fungible_assets_enabled() on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:212:9+46
    assume {:print "$at(140,8798,8844)"} true;
    call $t43 := $1_features_concurrent_fungible_assets_enabled();
    if ($abort_flag) {
        assume {:print "$at(140,8798,8844)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // if ($t43) goto L19 else goto L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:256:9+593
    assume {:print "$at(140,10807,11400)"} true;
    if ($t43) { goto L19; } else { goto L18; }

    // label L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:257:45+15
    assume {:print "$at(140,10898,10913)"} true;
L19:

    // $t44 := copy($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:257:45+15
    assume {:print "$at(140,10898,10913)"} true;
    $t44 := $t1;

    // $t45 := opaque begin: option::is_none<u128>($t44) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:257:29+32

    // assume WellFormed($t45) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:257:29+32
    assume $IsValid'bool'($t45);

    // assume Eq<bool>($t45, option::spec_is_none<u128>($t44)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:257:29+32
    assume $IsEqual'bool'($t45, $1_option_spec_is_none'u128'($t44));

    // $t45 := opaque end: option::is_none<u128>($t44) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:257:29+32

    // trace_local[unlimited]($t45) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:257:17+9
    assume {:print "$track_local(27,0,11):", $t45} $t45 == $t45;

    // if ($t45) goto L21 else goto L20 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:259:26+215
    assume {:print "$at(140,11004,11219)"} true;
    if ($t45) { goto L21; } else { goto L20; }

    // label L21 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:260:21+44
    assume {:print "$at(140,11041,11085)"} true;
L21:

    // $t8 := opaque begin: aggregator_v2::create_unbounded_aggregator<u128>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:260:21+44
    assume {:print "$at(140,11041,11085)"} true;

    // $t46 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:260:21+44
    havoc $t46;

    // if ($t46) goto L27 else goto L26 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:260:21+44
    if ($t46) { goto L27; } else { goto L26; }

    // label L27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:260:21+44
L27:

    // trace_abort($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:260:21+44
    assume {:print "$at(140,11041,11085)"} true;
    assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;

    // goto L25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:260:21+44
    goto L25;

    // label L26 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:260:21+44
L26:

    // assume WellFormed($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:260:21+44
    assume {:print "$at(140,11041,11085)"} true;
    assume $IsValid'$1_aggregator_v2_Aggregator'u128''($t8);

    // $t8 := opaque end: aggregator_v2::create_unbounded_aggregator<u128>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:260:21+44

    // goto L22 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:259:26+215
    assume {:print "$at(140,11004,11219)"} true;
    goto L22;

    // label L20 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:70+19
    assume {:print "$at(140,11180,11199)"} true;
L20:

    // $t47 := borrow_local($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:70+19
    assume {:print "$at(140,11180,11199)"} true;
    $t47 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t48 := opaque begin: option::extract<u128>($t47) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36

    // $t49 := read_ref($t47) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
    $t49 := $Dereference($t47);

    // assume Identical($t50, option::spec_is_none<u128>($t47)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
    assume ($t50 == $1_option_spec_is_none'u128'($Dereference($t47)));

    // if ($t50) goto L29 else goto L32 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
    if ($t50) { goto L29; } else { goto L32; }

    // label L29 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
L29:

    // assume And(option::spec_is_none<u128>($t47), Eq(262145, $t13)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
    assume {:print "$at(140,11164,11200)"} true;
    assume ($1_option_spec_is_none'u128'($Dereference($t47)) && $IsEqual'num'(262145, $t13));

    // trace_abort($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
    assume {:print "$at(140,11164,11200)"} true;
    assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;

    // goto L25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
    goto L25;

    // label L28 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
L28:

    // $t47 := havoc[mut]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
    assume {:print "$at(140,11164,11200)"} true;
    havoc $temp_0'$1_option_Option'u128'';
    $t47 := $UpdateMutation($t47, $temp_0'$1_option_Option'u128'');

    // assume And(WellFormed($t47), Le(Len<u128>(select option::Option.vec($t47)), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
    assume ($IsValid'$1_option_Option'u128''($Dereference($t47)) && (LenVec($Dereference($t47)->$vec) <= 1));

    // assume WellFormed($t48) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
    assume $IsValid'u128'($t48);

    // assume Eq<u128>($t48, option::spec_borrow<u128>($t49)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
    assume $IsEqual'u128'($t48, $1_option_spec_borrow'u128'($t49));

    // assume option::spec_is_none<u128>($t47) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
    assume $1_option_spec_is_none'u128'($Dereference($t47));

    // $t48 := opaque end: option::extract<u128>($t47) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36

    // pack_ref_deep($t47) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36

    // write_back[LocalRoot($t1)@]($t47) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
    $t1 := $Dereference($t47);

    // trace_local[maximum_supply]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:54+36
    assume {:print "$track_local(27,0,1):", $t1} $t1 == $t1;

    // $t8 := opaque begin: aggregator_v2::create_aggregator<u128>($t48) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:21+70

    // $t51 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:21+70
    havoc $t51;

    // if ($t51) goto L31 else goto L30 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:21+70
    if ($t51) { goto L31; } else { goto L30; }

    // label L31 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:21+70
L31:

    // trace_abort($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:21+70
    assume {:print "$at(140,11131,11201)"} true;
    assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;

    // goto L25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:21+70
    goto L25;

    // label L30 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:21+70
L30:

    // assume WellFormed($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:21+70
    assume {:print "$at(140,11131,11201)"} true;
    assume $IsValid'$1_aggregator_v2_Aggregator'u128''($t8);

    // $t8 := opaque end: aggregator_v2::create_aggregator<u128>($t48) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:262:21+70

    // label L22 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:258:21+22
    assume {:print "$at(140,10936,10958)"} true;
L22:

    // $t52 := pack fungible_asset::ConcurrentSupply($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:258:45+274
    assume {:print "$at(140,10960,11234)"} true;
    $t52 := $1_fungible_asset_ConcurrentSupply($t8);

    // move_to<fungible_asset::ConcurrentSupply>($t52, $t17) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:258:13+7
    if ($ResourceExists($1_fungible_asset_ConcurrentSupply_$memory, $t17->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_fungible_asset_ConcurrentSupply_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentSupply_$memory, $t17->$addr, $t52);
    }
    if ($abort_flag) {
        assume {:print "$at(140,10928,10935)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // goto L23 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:264:15+1
    assume {:print "$at(140,11235,11236)"} true;
    goto L23;

    // label L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:266:21+22
    assume {:print "$at(140,11274,11296)"} true;
L18:

    // $t53 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:267:26+1
    assume {:print "$at(140,11332,11333)"} true;
    $t53 := 0;
    assume $IsValid'u128'($t53);

    // $t54 := move($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:268:26+14
    assume {:print "$at(140,11360,11374)"} true;
    $t54 := $t1;

    // $t55 := pack fungible_asset::Supply($t53, $t54) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:266:45+90
    assume {:print "$at(140,11298,11388)"} true;
    $t55 := $1_fungible_asset_Supply($t53, $t54);

    // move_to<fungible_asset::Supply>($t55, $t17) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:266:13+7
    if ($ResourceExists($1_fungible_asset_Supply_$memory, $t17->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_fungible_asset_Supply_$memory := $ResourceUpdate($1_fungible_asset_Supply_$memory, $t17->$addr, $t55);
    }
    if ($abort_flag) {
        assume {:print "$at(140,11266,11273)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // label L23 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:272:55+15
    assume {:print "$at(140,11457,11472)"} true;
L23:

    // $t56 := object::object_from_constructor_ref<fungible_asset::Metadata>($t0) on_abort goto L25 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:272:9+62
    assume {:print "$at(140,11411,11473)"} true;
    call $t56 := $1_object_object_from_constructor_ref'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(140,11411,11473)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,0):", $t13} $t13 == $t13;
        goto L25;
    }

    // trace_return[0]($t56) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:272:9+62
    assume {:print "$track_return(27,0,0):", $t56} $t56 == $t56;

    // label L24 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:273:5+1
    assume {:print "$at(140,11478,11479)"} true;
L24:

    // return $t56 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:273:5+1
    assume {:print "$at(140,11478,11479)"} true;
    $ret0 := $t56;
    return;

    // label L25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:273:5+1
L25:

    // abort($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:273:5+1
    assume {:print "$at(140,11478,11479)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

    // label L32 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L32:

    // drop($t47) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L28 at <internal>:1:1+10
    goto L28;

}

// fun fungible_asset::asset_metadata [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:628:5+91
procedure {:inline 1} $1_fungible_asset_asset_metadata(_$t0: $1_fungible_asset_FungibleAsset) returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $t0: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[fa]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:628:5+1
    assume {:print "$at(140,26638,26639)"} true;
    assume {:print "$track_local(27,3,0):", $t0} $t0 == $t0;

    // $t1 := get_field<fungible_asset::FungibleAsset>.metadata($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:629:9+11
    assume {:print "$at(140,26712,26723)"} true;
    $t1 := $t0->$metadata;

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:629:9+11
    assume {:print "$track_return(27,3,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:630:5+1
    assume {:print "$at(140,26728,26729)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:630:5+1
    assume {:print "$at(140,26728,26729)"} true;
    $ret0 := $t1;
    return;

}

// fun fungible_asset::burn_from<fungible_asset::FungibleStore> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:830:5+322
procedure {:inline 1} $1_fungible_asset_burn_from'$1_fungible_asset_FungibleStore'(_$t0: $1_fungible_asset_BurnRef, _$t1: $1_object_Object'$1_fungible_asset_FungibleStore', _$t2: int) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: int;
    var $t5: $1_fungible_asset_FungibleAsset;
    var $t0: $1_fungible_asset_BurnRef;
    var $t1: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t2: int;
    var $temp_0'$1_fungible_asset_BurnRef': $1_fungible_asset_BurnRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // trace_local[ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:830:5+1
    assume {:print "$at(140,34463,34464)"} true;
    assume {:print "$track_local(27,6,0):", $t0} $t0 == $t0;

    // trace_local[store]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:830:5+1
    assume {:print "$track_local(27,6,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:830:5+1
    assume {:print "$track_local(27,6,2):", $t2} $t2 == $t2;

    // $t3 := object::object_address<#0>($t1) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:836:37+30
    assume {:print "$at(140,34738,34768)"} true;
    call $t3 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t1);
    if ($abort_flag) {
        assume {:print "$at(140,34738,34768)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(27,6):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := fungible_asset::withdraw_internal($t3, $t2) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:836:19+57
    call $t5 := $1_fungible_asset_withdraw_internal($t3, $t2);
    if ($abort_flag) {
        assume {:print "$at(140,34720,34777)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(27,6):", $t4} $t4 == $t4;
        goto L2;
    }

    // fungible_asset::burn($t0, $t5) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:836:9+68
    call $1_fungible_asset_burn($t0, $t5);
    if ($abort_flag) {
        assume {:print "$at(140,34710,34778)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(27,6):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:837:5+1
    assume {:print "$at(140,34784,34785)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:837:5+1
    assume {:print "$at(140,34784,34785)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:837:5+1
L2:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:837:5+1
    assume {:print "$at(140,34784,34785)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun fungible_asset::burn_internal [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:818:5+256
procedure {:inline 1} $1_fungible_asset_burn_internal(_$t0: $1_fungible_asset_FungibleAsset) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: int;
    var $t5: int;
    var $t0: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[fa]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:818:5+1
    assume {:print "$at(140,34131,34132)"} true;
    assume {:print "$track_local(27,7,0):", $t0} $t0 == $t0;

    // ($t3, $t4) := unpack fungible_asset::FungibleAsset($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:821:13+66
    assume {:print "$at(140,34250,34316)"} true;
    $t3 := $t0->$metadata;
    $t4 := $t0->$amount;

    // trace_local[amount]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:823:13+6
    assume {:print "$at(140,34300,34306)"} true;
    assume {:print "$track_local(27,7,1):", $t4} $t4 == $t4;

    // trace_local[metadata]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:822:13+8
    assume {:print "$at(140,34278,34286)"} true;
    assume {:print "$track_local(27,7,2):", $t3} $t3 == $t3;

    // fungible_asset::decrease_supply<fungible_asset::Metadata>($t3, $t4) on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:825:9+34
    assume {:print "$at(140,34331,34365)"} true;
    call $1_fungible_asset_decrease_supply'$1_fungible_asset_Metadata'($t3, $t4);
    if ($abort_flag) {
        assume {:print "$at(140,34331,34365)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,7):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:826:9+6
    assume {:print "$at(140,34375,34381)"} true;
    assume {:print "$track_return(27,7,0):", $t4} $t4 == $t4;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:827:5+1
    assume {:print "$at(140,34386,34387)"} true;
L1:

    // return $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:827:5+1
    assume {:print "$at(140,34386,34387)"} true;
    $ret0 := $t4;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:827:5+1
L2:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:827:5+1
    assume {:print "$at(140,34386,34387)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::create_store<fungible_asset::Metadata> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:666:5+765
procedure {:inline 1} $1_fungible_asset_create_store'$1_fungible_asset_Metadata'(_$t0: $1_object_ConstructorRef, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t2: $signer;
    var $t3: $signer;
    var $t4: $signer;
    var $t5: int;
    var $t6: $1_object_Object'$1_fungible_asset_Metadata';
    var $t7: int;
    var $t8: bool;
    var $t9: $1_fungible_asset_FungibleStore;
    var $t10: bool;
    var $t11: bool;
    var $t12: $1_aggregator_v2_Aggregator'u64';
    var $t13: bool;
    var $t14: $1_fungible_asset_ConcurrentFungibleBalance;
    var $t15: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t0: $1_object_ConstructorRef;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[constructor_ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:666:5+1
    assume {:print "$at(140,28050,28051)"} true;
    assume {:print "$track_local(27,9,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:666:5+1
    assume {:print "$track_local(27,9,1):", $t1} $t1 == $t1;

    // $t4 := object::generate_signer($t0) on_abort goto L6 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:670:26+40
    assume {:print "$at(140,28210,28250)"} true;
    call $t4 := $1_object_generate_signer($t0);
    if ($abort_flag) {
        assume {:print "$at(140,28210,28250)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,9):", $t5} $t5 == $t5;
        goto L6;
    }

    // trace_local[store_obj]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:670:13+9
    assume {:print "$track_local(27,9,3):", $t4} $t4 == $t4;

    // $t6 := object::convert<#0, fungible_asset::Metadata>($t1) on_abort goto L6 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:672:23+25
    assume {:print "$at(140,28317,28342)"} true;
    call $t6 := $1_object_convert'$1_fungible_asset_Metadata_$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(140,28317,28342)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,9):", $t5} $t5 == $t5;
        goto L6;
    }

    // $t7 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:673:22+1
    assume {:print "$at(140,28365,28366)"} true;
    $t7 := 0;
    assume $IsValid'u64'($t7);

    // $t8 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:674:21+5
    assume {:print "$at(140,28388,28393)"} true;
    $t8 := false;
    assume $IsValid'bool'($t8);

    // $t9 := pack fungible_asset::FungibleStore($t6, $t7, $t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:671:28+125
    assume {:print "$at(140,28279,28404)"} true;
    $t9 := $1_fungible_asset_FungibleStore($t6, $t7, $t8);

    // move_to<fungible_asset::FungibleStore>($t9, $t4) on_abort goto L6 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:671:9+7
    if ($ResourceExists($1_fungible_asset_FungibleStore_$memory, $t4->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_fungible_asset_FungibleStore_$memory := $ResourceUpdate($1_fungible_asset_FungibleStore_$memory, $t4->$addr, $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(140,28260,28267)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,9):", $t5} $t5 == $t5;
        goto L6;
    }

    // $t10 := fungible_asset::is_untransferable<#0>($t1) on_abort goto L6 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:677:13+27
    assume {:print "$at(140,28420,28447)"} true;
    call $t10 := $1_fungible_asset_is_untransferable'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(140,28420,28447)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,9):", $t5} $t5 == $t5;
        goto L6;
    }

    // if ($t10) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:677:9+101
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:678:40+15
    assume {:print "$at(140,28490,28505)"} true;
L1:

    // object::set_untransferable($t0) on_abort goto L6 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:678:13+43
    assume {:print "$at(140,28463,28506)"} true;
    call $1_object_set_untransferable($t0);
    if ($abort_flag) {
        assume {:print "$at(140,28463,28506)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,9):", $t5} $t5 == $t5;
        goto L6;
    }

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:220:9+58
    assume {:print "$at(140,9057,9115)"} true;
L0:

    // $t11 := features::default_to_concurrent_fungible_balance_enabled() on_abort goto L6 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:220:9+58
    assume {:print "$at(140,9057,9115)"} true;
    call $t11 := $1_features_default_to_concurrent_fungible_balance_enabled();
    if ($abort_flag) {
        assume {:print "$at(140,9057,9115)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,9):", $t5} $t5 == $t5;
        goto L6;
    }

    // if ($t11) goto L3 else goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:681:9+203
    assume {:print "$at(140,28528,28731)"} true;
    if ($t11) { goto L3; } else { goto L2; }

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:682:21+9
    assume {:print "$at(140,28596,28605)"} true;
L3:

    // $t12 := opaque begin: aggregator_v2::create_unbounded_aggregator<u64>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:683:26+44
    assume {:print "$at(140,28660,28704)"} true;

    // $t13 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:683:26+44
    havoc $t13;

    // if ($t13) goto L8 else goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:683:26+44
    if ($t13) { goto L8; } else { goto L7; }

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:683:26+44
L8:

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:683:26+44
    assume {:print "$at(140,28660,28704)"} true;
    assume {:print "$track_abort(27,9):", $t5} $t5 == $t5;

    // goto L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:683:26+44
    goto L6;

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:683:26+44
L7:

    // assume WellFormed($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:683:26+44
    assume {:print "$at(140,28660,28704)"} true;
    assume $IsValid'$1_aggregator_v2_Aggregator'u64''($t12);

    // $t12 := opaque end: aggregator_v2::create_unbounded_aggregator<u64>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:683:26+44

    // $t14 := pack fungible_asset::ConcurrentFungibleBalance($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:682:32+112
    assume {:print "$at(140,28607,28719)"} true;
    $t14 := $1_fungible_asset_ConcurrentFungibleBalance($t12);

    // move_to<fungible_asset::ConcurrentFungibleBalance>($t14, $t4) on_abort goto L6 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:682:13+7
    if ($ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t4->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_fungible_asset_ConcurrentFungibleBalance_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t4->$addr, $t14);
    }
    if ($abort_flag) {
        assume {:print "$at(140,28588,28595)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,9):", $t5} $t5 == $t5;
        goto L6;
    }

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:684:15+1
    assume {:print "$at(140,28720,28721)"} true;
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:681:9+203
    assume {:print "$at(140,28528,28731)"} true;
L2:

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:687:60+15
    assume {:print "$at(140,28793,28808)"} true;
L4:

    // $t15 := object::object_from_constructor_ref<fungible_asset::FungibleStore>($t0) on_abort goto L6 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:687:9+67
    assume {:print "$at(140,28742,28809)"} true;
    call $t15 := $1_object_object_from_constructor_ref'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(140,28742,28809)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,9):", $t5} $t5 == $t5;
        goto L6;
    }

    // trace_return[0]($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:687:9+67
    assume {:print "$track_return(27,9,0):", $t15} $t15 == $t15;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:688:5+1
    assume {:print "$at(140,28814,28815)"} true;
L5:

    // return $t15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:688:5+1
    assume {:print "$at(140,28814,28815)"} true;
    $ret0 := $t15;
    return;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:688:5+1
L6:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:688:5+1
    assume {:print "$at(140,28814,28815)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::decrease_supply<fungible_asset::Metadata> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1020:5+1053
procedure {:inline 1} $1_fungible_asset_decrease_supply'$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata', _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation ($1_fungible_asset_Supply);
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: $Mutation ($1_fungible_asset_ConcurrentSupply);
    var $t10: $Mutation ($1_aggregator_v2_Aggregator'u128');
    var $t11: int;
    var $t12: bool;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: $Mutation ($1_fungible_asset_Supply);
    var $t21: int;
    var $t22: int;
    var $t23: bool;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: $Mutation (int);
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $t1: int;
    var $temp_0'$1_aggregator_v2_Aggregator'u128'': $1_aggregator_v2_Aggregator'u128';
    var $temp_0'$1_fungible_asset_Supply': $1_fungible_asset_Supply;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[metadata]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1020:5+1
    assume {:print "$at(140,42464,42465)"} true;
    assume {:print "$track_local(27,11,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1020:5+1
    assume {:print "$track_local(27,11,1):", $t1} $t1 == $t1;

    // $t4 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1021:23+1
    assume {:print "$at(140,42585,42586)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := ==($t1, $t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1021:20+2
    $t5 := $IsEqual'u64'($t1, $t4);

    // if ($t5) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1021:9+47
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1022:13+6
    assume {:print "$at(140,42602,42608)"} true;
L1:

    // goto L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1022:13+6
    assume {:print "$at(140,42602,42608)"} true;
    goto L16;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1024:55+8
    assume {:print "$at(140,42674,42682)"} true;
L0:

    // $t6 := object::object_address<#0>($t0) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1024:32+32
    assume {:print "$at(140,42651,42683)"} true;
    call $t6 := $1_object_object_address'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(140,42651,42683)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,11):", $t7} $t7 == $t7;
        goto L17;
    }

    // trace_local[metadata_address]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1024:13+16
    assume {:print "$track_local(27,11,2):", $t6} $t6 == $t6;

    // $t8 := exists<fungible_asset::ConcurrentSupply>($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1026:13+6
    assume {:print "$at(140,42698,42704)"} true;
    $t8 := $ResourceExists($1_fungible_asset_ConcurrentSupply_$memory, $t6);

    // if ($t8) goto L3 else goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1026:9+817
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1027:62+16
    assume {:print "$at(140,42805,42821)"} true;
L3:

    // $t9 := borrow_global<fungible_asset::ConcurrentSupply>($t6) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1027:26+17
    assume {:print "$at(140,42769,42786)"} true;
    if (!$ResourceExists($1_fungible_asset_ConcurrentSupply_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(140,42769,42786)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,11):", $t7} $t7 == $t7;
        goto L17;
    }

    // $t10 := borrow_field<fungible_asset::ConcurrentSupply>.current($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:40+19
    assume {:print "$at(140,42885,42904)"} true;
    $t10 := $ChildMutation($t9, 0, $Dereference($t9)->$current);

    // $t11 := (u128)($t1) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:61+16
    call $t11 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(140,42906,42922)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,11):", $t7} $t7 == $t7;
        goto L17;
    }

    // $t12 := opaque begin: aggregator_v2::try_sub<u128>($t10, $t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:17+61

    // $t13 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:17+61
    havoc $t13;

    // if ($t13) goto L20 else goto L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:17+61
    if ($t13) { goto L20; } else { goto L18; }

    // label L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:17+61
L19:

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:17+61
    assume {:print "$at(140,42862,42923)"} true;
    assume {:print "$track_abort(27,11):", $t7} $t7 == $t7;

    // goto L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:17+61
    goto L17;

    // label L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:17+61
L18:

    // $t10 := havoc[mut]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:17+61
    assume {:print "$at(140,42862,42923)"} true;
    havoc $temp_0'$1_aggregator_v2_Aggregator'u128'';
    $t10 := $UpdateMutation($t10, $temp_0'$1_aggregator_v2_Aggregator'u128'');

    // assume WellFormed($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:17+61
    assume $IsValid'$1_aggregator_v2_Aggregator'u128''($Dereference($t10));

    // assume WellFormed($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:17+61
    assume $IsValid'bool'($t12);

    // $t12 := opaque end: aggregator_v2::try_sub<u128>($t10, $t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:17+61

    // write_back[Reference($t9).current (aggregator_v2::Aggregator<u128>)]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:17+61
    $t9 := $UpdateMutation($t9, $Update'$1_fungible_asset_ConcurrentSupply'_current($Dereference($t9), $Dereference($t10)));

    // write_back[fungible_asset::ConcurrentSupply@]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1030:17+61
    $1_fungible_asset_ConcurrentSupply_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentSupply_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // if ($t12) goto L5 else goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1029:13+156
    assume {:print "$at(140,42837,42993)"} true;
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1029:13+156
L5:

    // goto L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1029:13+156
    assume {:print "$at(140,42837,42993)"} true;
    goto L6;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1031:37+17
    assume {:print "$at(140,42961,42978)"} true;
L4:

    // $t14 := 20 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1031:37+17
    assume {:print "$at(140,42961,42978)"} true;
    $t14 := 20;
    assume $IsValid'u64'($t14);

    // $t15 := error::out_of_range($t14) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1031:17+38
    call $t15 := $1_error_out_of_range($t14);
    if ($abort_flag) {
        assume {:print "$at(140,42941,42979)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,11):", $t7} $t7 == $t7;
        goto L17;
    }

    // trace_abort($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1029:13+156
    assume {:print "$at(140,42837,42993)"} true;
    assume {:print "$track_abort(27,11):", $t15} $t15 == $t15;

    // $t7 := move($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1029:13+156
    $t7 := $t15;

    // goto L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1029:13+156
    goto L17;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1026:9+817
    assume {:print "$at(140,42694,43511)"} true;
L6:

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1026:9+817
    assume {:print "$at(140,42694,43511)"} true;
    goto L7;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1033:35+16
    assume {:print "$at(140,43029,43045)"} true;
L2:

    // $t16 := exists<fungible_asset::Supply>($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1033:20+6
    assume {:print "$at(140,43014,43020)"} true;
    $t16 := $ResourceExists($1_fungible_asset_Supply_$memory, $t6);

    // if ($t16) goto L9 else goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1033:16+501
    if ($t16) { goto L9; } else { goto L8; }

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1034:36+16
    assume {:print "$at(140,43085,43101)"} true;
L9:

    // $t17 := exists<fungible_asset::Supply>($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1034:21+6
    assume {:print "$at(140,43070,43076)"} true;
    $t17 := $ResourceExists($1_fungible_asset_Supply_$memory, $t6);

    // if ($t17) goto L11 else goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1034:13+78
    if ($t17) { goto L11; } else { goto L10; }

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1034:13+78
L11:

    // goto L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1034:13+78
    assume {:print "$at(140,43062,43140)"} true;
    goto L12;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1034:72+17
L10:

    // $t18 := 21 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1034:72+17
    assume {:print "$at(140,43121,43138)"} true;
    $t18 := 21;
    assume $IsValid'u64'($t18);

    // $t19 := error::not_found($t18) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1034:55+35
    call $t19 := $1_error_not_found($t18);
    if ($abort_flag) {
        assume {:print "$at(140,43104,43139)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,11):", $t7} $t7 == $t7;
        goto L17;
    }

    // trace_abort($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1034:13+78
    assume {:print "$at(140,43062,43140)"} true;
    assume {:print "$track_abort(27,11):", $t19} $t19 == $t19;

    // $t7 := move($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1034:13+78
    $t7 := $t19;

    // goto L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1034:13+78
    goto L17;

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1035:52+16
    assume {:print "$at(140,43193,43209)"} true;
L12:

    // $t20 := borrow_global<fungible_asset::Supply>($t6) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1035:26+17
    assume {:print "$at(140,43167,43184)"} true;
    if (!$ResourceExists($1_fungible_asset_Supply_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t20 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_fungible_asset_Supply_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(140,43167,43184)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,11):", $t7} $t7 == $t7;
        goto L17;
    }

    // trace_local[supply#1]($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1035:17+6
    $temp_0'$1_fungible_asset_Supply' := $Dereference($t20);
    assume {:print "$track_local(27,11,3):", $temp_0'$1_fungible_asset_Supply'} $temp_0'$1_fungible_asset_Supply' == $temp_0'$1_fungible_asset_Supply';

    // $t21 := get_field<fungible_asset::Supply>.current($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1037:17+14
    assume {:print "$at(140,43249,43263)"} true;
    $t21 := $Dereference($t20)->$current;

    // $t22 := (u128)($t1) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1037:35+16
    call $t22 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(140,43267,43283)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,11):", $t7} $t7 == $t7;
        goto L17;
    }

    // $t23 := >=($t21, $t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1037:32+2
    call $t23 := $Ge($t21, $t22);

    // if ($t23) goto L14 else goto L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1036:13+130
    assume {:print "$at(140,43224,43354)"} true;
    if ($t23) { goto L14; } else { goto L13; }

    // label L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1036:13+130
L14:

    // goto L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1036:13+130
    assume {:print "$at(140,43224,43354)"} true;
    goto L15;

    // label L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1036:13+130
L13:

    // pack_ref_deep($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1036:13+130
    assume {:print "$at(140,43224,43354)"} true;

    // drop($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1036:13+130

    // $t24 := 20 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1038:38+17
    assume {:print "$at(140,43322,43339)"} true;
    $t24 := 20;
    assume $IsValid'u64'($t24);

    // $t25 := error::invalid_state($t24) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1038:17+39
    call $t25 := $1_error_invalid_state($t24);
    if ($abort_flag) {
        assume {:print "$at(140,43301,43340)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,11):", $t7} $t7 == $t7;
        goto L17;
    }

    // trace_abort($t25) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1036:13+130
    assume {:print "$at(140,43224,43354)"} true;
    assume {:print "$track_abort(27,11):", $t25} $t25 == $t25;

    // $t7 := move($t25) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1036:13+130
    $t7 := $t25;

    // goto L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1036:13+130
    goto L17;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1042:45+17
    assume {:print "$at(140,43481,43498)"} true;
L8:

    // $t26 := 21 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1042:45+17
    assume {:print "$at(140,43481,43498)"} true;
    $t26 := 21;
    assume $IsValid'u64'($t26);

    // $t27 := error::not_found($t26) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1042:28+35
    call $t27 := $1_error_not_found($t26);
    if ($abort_flag) {
        assume {:print "$at(140,43464,43499)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,11):", $t7} $t7 == $t7;
        goto L17;
    }

    // trace_abort($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1042:13+51
    assume {:print "$at(140,43449,43500)"} true;
    assume {:print "$track_abort(27,11):", $t27} $t27 == $t27;

    // $t7 := move($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1042:13+51
    $t7 := $t27;

    // goto L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1042:13+51
    goto L17;

    // label L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1040:30+6
    assume {:print "$at(140,43385,43391)"} true;
L15:

    // $t28 := get_field<fungible_asset::Supply>.current($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1040:30+14
    assume {:print "$at(140,43385,43399)"} true;
    $t28 := $Dereference($t20)->$current;

    // $t29 := (u128)($t1) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1040:47+16
    call $t29 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(140,43402,43418)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,11):", $t7} $t7 == $t7;
        goto L17;
    }

    // $t30 := -($t28, $t29) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1040:45+1
    call $t30 := $Sub($t28, $t29);
    if ($abort_flag) {
        assume {:print "$at(140,43400,43401)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,11):", $t7} $t7 == $t7;
        goto L17;
    }

    // $t31 := borrow_field<fungible_asset::Supply>.current($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1040:13+14
    $t31 := $ChildMutation($t20, 0, $Dereference($t20)->$current);

    // write_ref($t31, $t30) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1040:13+50
    $t31 := $UpdateMutation($t31, $t30);

    // write_back[Reference($t20).current (u128)]($t31) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1040:13+50
    $t20 := $UpdateMutation($t20, $Update'$1_fungible_asset_Supply'_current($Dereference($t20), $Dereference($t31)));

    // pack_ref_deep($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1040:13+50

    // write_back[fungible_asset::Supply@]($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1040:13+50
    $1_fungible_asset_Supply_$memory := $ResourceUpdate($1_fungible_asset_Supply_$memory, $GlobalLocationAddress($t20),
        $Dereference($t20));

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1026:9+817
    assume {:print "$at(140,42694,43511)"} true;
L7:

    // label L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1044:5+1
    assume {:print "$at(140,43516,43517)"} true;
L16:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1044:5+1
    assume {:print "$at(140,43516,43517)"} true;
    return;

    // label L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1044:5+1
L17:

    // abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1044:5+1
    assume {:print "$at(140,43516,43517)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

    // label L20 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L20:

    // drop($t9) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L19 at <internal>:1:1+10
    goto L19;

}

// fun fungible_asset::deposit_dispatch_function<fungible_asset::FungibleStore> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:578:5+458
procedure {:inline 1} $1_fungible_asset_deposit_dispatch_function'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore') returns ($ret0: $1_option_Option'$1_function_info_FunctionInfo')
{
    // declare local variables
    var $t1: $1_option_Option'$1_function_info_FunctionInfo';
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: $1_fungible_asset_FungibleStore;
    var $t10: $1_object_Object'$1_fungible_asset_Metadata';
    var $t11: int;
    var $t12: bool;
    var $t13: $1_fungible_asset_DispatchFunctionStore;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_option_Option'$1_function_info_FunctionInfo'': $1_option_Option'$1_function_info_FunctionInfo';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[store]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:578:5+1
    assume {:print "$at(140,24280,24281)"} true;
    assume {:print "$track_local(27,13,0):", $t0} $t0 == $t0;

    // $t4 := object::object_address<#0>($t0) on_abort goto L7 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1061:26+29
    assume {:print "$at(140,44087,44116)"} true;
    call $t4 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(140,44087,44116)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,13):", $t5} $t5 == $t5;
        goto L7;
    }

    // trace_local[store_addr#218]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1061:13+10
    assume {:print "$track_local(27,13,3):", $t4} $t4 == $t4;

    // $t6 := exists<fungible_asset::FungibleStore>($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:17+6
    assume {:print "$at(140,44134,44140)"} true;
    $t6 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t4);

    // if ($t6) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    assume {:print "$at(140,44126,44213)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:69+25
L0:

    // $t7 := 23 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:69+25
    assume {:print "$at(140,44186,44211)"} true;
    $t7 := 23;
    assume $IsValid'u64'($t7);

    // $t8 := error::not_found($t7) on_abort goto L7 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:52+43
    call $t8 := $1_error_not_found($t7);
    if ($abort_flag) {
        assume {:print "$at(140,44169,44212)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,13):", $t5} $t5 == $t5;
        goto L7;
    }

    // trace_abort($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    assume {:print "$at(140,44126,44213)"} true;
    assume {:print "$track_abort(27,13):", $t8} $t8 == $t8;

    // $t5 := move($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    $t5 := $t8;

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    goto L7;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1063:38+10
    assume {:print "$at(140,44252,44262)"} true;
L2:

    // $t9 := get_global<fungible_asset::FungibleStore>($t4) on_abort goto L7 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1063:9+13
    assume {:print "$at(140,44223,44236)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t4);
    }
    if ($abort_flag) {
        assume {:print "$at(140,44223,44236)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,13):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t10 := get_field<fungible_asset::FungibleStore>.metadata($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:580:52+18
    assume {:print "$at(140,24518,24536)"} true;
    $t10 := $t9->$metadata;

    // $t11 := object::object_address<fungible_asset::Metadata>($t10) on_abort goto L7 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:580:29+42
    call $t11 := $1_object_object_address'$1_fungible_asset_Metadata'($t10);
    if ($abort_flag) {
        assume {:print "$at(140,24495,24537)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,13):", $t5} $t5 == $t5;
        goto L7;
    }

    // trace_local[metadata_addr]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:580:13+13
    assume {:print "$track_local(27,13,2):", $t11} $t11 == $t11;

    // $t12 := exists<fungible_asset::DispatchFunctionStore>($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:581:12+6
    assume {:print "$at(140,24550,24556)"} true;
    $t12 := $ResourceExists($1_fungible_asset_DispatchFunctionStore_$memory, $t11);

    // if ($t12) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:581:9+185
    if ($t12) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:582:50+13
    assume {:print "$at(140,24647,24660)"} true;
L4:

    // $t13 := get_global<fungible_asset::DispatchFunctionStore>($t11) on_abort goto L7 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:582:13+13
    assume {:print "$at(140,24610,24623)"} true;
    if (!$ResourceExists($1_fungible_asset_DispatchFunctionStore_$memory, $t11)) {
        call $ExecFailureAbort();
    } else {
        $t13 := $ResourceValue($1_fungible_asset_DispatchFunctionStore_$memory, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(140,24610,24623)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,13):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t1 := get_field<fungible_asset::DispatchFunctionStore>.deposit_function($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:582:13+68
    $t1 := $t13->$deposit_function;

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:581:9+185
    assume {:print "$at(140,24547,24732)"} true;
    goto L5;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:584:13+14
    assume {:print "$at(140,24708,24722)"} true;
L3:

    // $t1 := opaque begin: option::none<function_info::FunctionInfo>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:584:13+14
    assume {:print "$at(140,24708,24722)"} true;

    // assume And(WellFormed($t1), Le(Len<function_info::FunctionInfo>(select option::Option.vec($t1)), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:584:13+14
    assume ($IsValid'$1_option_Option'$1_function_info_FunctionInfo''($t1) && (LenVec($t1->$vec) <= 1));

    // assume Eq<option::Option<function_info::FunctionInfo>>($t1, option::spec_none<function_info::FunctionInfo>()) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:584:13+14
    assume $IsEqual'$1_option_Option'$1_function_info_FunctionInfo''($t1, $1_option_spec_none'$1_function_info_FunctionInfo'());

    // $t1 := opaque end: option::none<function_info::FunctionInfo>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:584:13+14

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:581:9+185
    assume {:print "$at(140,24547,24732)"} true;
L5:

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:581:9+185
    assume {:print "$at(140,24547,24732)"} true;
    assume {:print "$track_return(27,13,0):", $t1} $t1 == $t1;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:586:5+1
    assume {:print "$at(140,24737,24738)"} true;
L6:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:586:5+1
    assume {:print "$at(140,24737,24738)"} true;
    $ret0 := $t1;
    return;

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:586:5+1
L7:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:586:5+1
    assume {:print "$at(140,24737,24738)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::deposit_internal [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:947:5+886
procedure {:inline 1} $1_fungible_asset_deposit_internal(_$t0: int, _$t1: $1_fungible_asset_FungibleAsset) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: $1_object_Object'$1_fungible_asset_Metadata';
    var $t5: $Mutation ($1_fungible_asset_FungibleStore);
    var $t6: $1_object_Object'$1_fungible_asset_Metadata';
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: int;
    var $t14: $Mutation ($1_fungible_asset_FungibleStore);
    var $t15: $1_object_Object'$1_fungible_asset_Metadata';
    var $t16: bool;
    var $t17: int;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: bool;
    var $t22: bool;
    var $t23: $Mutation ($1_fungible_asset_ConcurrentFungibleBalance);
    var $t24: $Mutation ($1_aggregator_v2_Aggregator'u64');
    var $t25: int;
    var $t26: int;
    var $t27: $Mutation (int);
    var $t28: $1_fungible_asset_Deposit;
    var $t0: int;
    var $t1: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleStore': $1_fungible_asset_FungibleStore;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[store_addr]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:947:5+1
    assume {:print "$at(140,39167,39168)"} true;
    assume {:print "$track_local(27,14,0):", $t0} $t0 == $t0;

    // trace_local[fa]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:947:5+1
    assume {:print "$track_local(27,14,1):", $t1} $t1 == $t1;

    // ($t6, $t7) := unpack fungible_asset::FungibleAsset($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:948:13+34
    assume {:print "$at(140,39307,39341)"} true;
    $t6 := $t1->$metadata;
    $t7 := $t1->$amount;

    // trace_local[amount]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:948:39+6
    assume {:print "$track_local(27,14,3):", $t7} $t7 == $t7;

    // trace_local[metadata]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:948:29+8
    assume {:print "$track_local(27,14,4):", $t6} $t6 == $t6;

    // $t8 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:949:23+1
    assume {:print "$at(140,39370,39371)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := ==($t7, $t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:949:20+2
    $t9 := $IsEqual'u64'($t7, $t8);

    // if ($t9) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:949:9+23
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:949:26+6
L1:

    // goto L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:949:26+6
    assume {:print "$at(140,39373,39379)"} true;
    goto L14;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:951:39+10
    assume {:print "$at(140,39420,39430)"} true;
L0:

    // $t10 := exists<fungible_asset::FungibleStore>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:951:17+6
    assume {:print "$at(140,39398,39404)"} true;
    $t10 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t0);

    // if ($t10) goto L3 else goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:951:9+87
    if ($t10) { goto L3; } else { goto L2; }

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:951:9+87
L3:

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:951:9+87
    assume {:print "$at(140,39390,39477)"} true;
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:951:69+25
L2:

    // $t11 := 23 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:951:69+25
    assume {:print "$at(140,39450,39475)"} true;
    $t11 := 23;
    assume $IsValid'u64'($t11);

    // $t12 := error::not_found($t11) on_abort goto L15 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:951:52+43
    call $t12 := $1_error_not_found($t11);
    if ($abort_flag) {
        assume {:print "$at(140,39433,39476)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,14):", $t13} $t13 == $t13;
        goto L15;
    }

    // trace_abort($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:951:9+87
    assume {:print "$at(140,39390,39477)"} true;
    assume {:print "$track_abort(27,14):", $t12} $t12 == $t12;

    // $t13 := move($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:951:9+87
    $t13 := $t12;

    // goto L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:951:9+87
    goto L15;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:952:54+10
    assume {:print "$at(140,39532,39542)"} true;
L4:

    // $t14 := borrow_global<fungible_asset::FungibleStore>($t0) on_abort goto L15 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:952:21+17
    assume {:print "$at(140,39499,39516)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t14 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(140,39499,39516)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,14):", $t13} $t13 == $t13;
        goto L15;
    }

    // trace_local[store]($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:952:13+5
    $temp_0'$1_fungible_asset_FungibleStore' := $Dereference($t14);
    assume {:print "$track_local(27,14,5):", $temp_0'$1_fungible_asset_FungibleStore'} $temp_0'$1_fungible_asset_FungibleStore' == $temp_0'$1_fungible_asset_FungibleStore';

    // $t15 := get_field<fungible_asset::FungibleStore>.metadata($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:953:29+14
    assume {:print "$at(140,39573,39587)"} true;
    $t15 := $Dereference($t14)->$metadata;

    // $t16 := ==($t6, $t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:953:26+2
    $t16 := $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t6, $t15);

    // if ($t16) goto L6 else goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:953:9+96
    if ($t16) { goto L6; } else { goto L5; }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:953:9+96
L6:

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:953:9+96
    assume {:print "$at(140,39553,39649)"} true;
    goto L7;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:953:9+96
L5:

    // drop($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:953:9+96
    assume {:print "$at(140,39553,39649)"} true;

    // $t17 := 11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:953:69+34
    $t17 := 11;
    assume $IsValid'u64'($t17);

    // $t18 := error::invalid_argument($t17) on_abort goto L15 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:953:45+59
    call $t18 := $1_error_invalid_argument($t17);
    if ($abort_flag) {
        assume {:print "$at(140,39589,39648)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,14):", $t13} $t13 == $t13;
        goto L15;
    }

    // trace_abort($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:953:9+96
    assume {:print "$at(140,39553,39649)"} true;
    assume {:print "$track_abort(27,14):", $t18} $t18 == $t18;

    // $t13 := move($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:953:9+96
    $t13 := $t18;

    // goto L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:953:9+96
    goto L15;

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:955:13+5
    assume {:print "$at(140,39664,39669)"} true;
L7:

    // $t19 := get_field<fungible_asset::FungibleStore>.balance($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:955:13+13
    assume {:print "$at(140,39664,39677)"} true;
    $t19 := $Dereference($t14)->$balance;

    // $t20 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:955:30+1
    $t20 := 0;
    assume $IsValid'u64'($t20);

    // $t21 := ==($t19, $t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:955:27+2
    $t21 := $IsEqual'u64'($t19, $t20);

    // if ($t21) goto L9 else goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:955:13+75
    if ($t21) { goto L9; } else { goto L8; }

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:955:77+10
L9:

    // $t2 := exists<fungible_asset::ConcurrentFungibleBalance>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:503:9+6
    assume {:print "$at(140,21214,21220)"} true;
    $t2 := $ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0);

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:955:13+75
    assume {:print "$at(140,39664,39739)"} true;
    goto L10;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:955:13+75
L8:

    // $t22 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:955:13+75
    assume {:print "$at(140,39664,39739)"} true;
    $t22 := false;
    assume $IsValid'bool'($t22);

    // $t2 := $t22 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:955:13+75
    $t2 := $t22;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:955:13+75
L10:

    // if ($t2) goto L12 else goto L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:955:9+325
    assume {:print "$at(140,39660,39985)"} true;
    if ($t2) { goto L12; } else { goto L11; }

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:956:13+79
    assume {:print "$at(140,39755,39834)"} true;
L12:

    // drop($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:956:13+79
    assume {:print "$at(140,39755,39834)"} true;

    // $t23 := borrow_global<fungible_asset::ConcurrentFungibleBalance>($t0) on_abort goto L15 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:956:36+17
    if (!$ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t23 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(140,39778,39795)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,14):", $t13} $t13 == $t13;
        goto L15;
    }

    // $t24 := borrow_field<fungible_asset::ConcurrentFungibleBalance>.balance($t23) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:957:32+29
    assume {:print "$at(140,39867,39896)"} true;
    $t24 := $ChildMutation($t23, 0, $Dereference($t23)->$balance);

    // aggregator_v2::add<u64>($t24, $t7) on_abort goto L15 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:957:13+57
    call $t24 := $1_aggregator_v2_add'u64'($t24, $t7);
    if ($abort_flag) {
        assume {:print "$at(140,39848,39905)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,14):", $t13} $t13 == $t13;
        goto L15;
    }

    // write_back[Reference($t23).balance (aggregator_v2::Aggregator<u64>)]($t24) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:957:13+57
    $t23 := $UpdateMutation($t23, $Update'$1_fungible_asset_ConcurrentFungibleBalance'_balance($Dereference($t23), $Dereference($t24)));

    // write_back[fungible_asset::ConcurrentFungibleBalance@]($t23) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:957:13+57
    $1_fungible_asset_ConcurrentFungibleBalance_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentFungibleBalance_$memory, $GlobalLocationAddress($t23),
        $Dereference($t23));

    // goto L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:957:70+1
    goto L13;

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:959:29+5
    assume {:print "$at(140,39952,39957)"} true;
L11:

    // $t25 := get_field<fungible_asset::FungibleStore>.balance($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:959:29+13
    assume {:print "$at(140,39952,39965)"} true;
    $t25 := $Dereference($t14)->$balance;

    // $t26 := +($t25, $t7) on_abort goto L15 with $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:959:43+1
    call $t26 := $AddU64($t25, $t7);
    if ($abort_flag) {
        assume {:print "$at(140,39966,39967)"} true;
        $t13 := $abort_code;
        assume {:print "$track_abort(27,14):", $t13} $t13 == $t13;
        goto L15;
    }

    // $t27 := borrow_field<fungible_asset::FungibleStore>.balance($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:959:13+13
    $t27 := $ChildMutation($t14, 1, $Dereference($t14)->$balance);

    // write_ref($t27, $t26) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:959:13+38
    $t27 := $UpdateMutation($t27, $t26);

    // write_back[Reference($t14).balance (u64)]($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:959:13+38
    $t14 := $UpdateMutation($t14, $Update'$1_fungible_asset_FungibleStore'_balance($Dereference($t14), $Dereference($t27)));

    // write_back[fungible_asset::FungibleStore@]($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:959:13+38
    $1_fungible_asset_FungibleStore_$memory := $ResourceUpdate($1_fungible_asset_FungibleStore_$memory, $GlobalLocationAddress($t14),
        $Dereference($t14));

    // label L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:962:38+10
    assume {:print "$at(140,40025,40035)"} true;
L13:

    // $t28 := pack fungible_asset::Deposit($t0, $t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:962:21+37
    assume {:print "$at(140,40008,40045)"} true;
    $t28 := $1_fungible_asset_Deposit($t0, $t7);

    // opaque begin: event::emit<fungible_asset::Deposit>($t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:962:9+50

    // opaque end: event::emit<fungible_asset::Deposit>($t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:962:9+50

    // label L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:963:5+1
    assume {:print "$at(140,40052,40053)"} true;
L14:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:963:5+1
    assume {:print "$at(140,40052,40053)"} true;
    return;

    // label L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:963:5+1
L15:

    // abort($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:963:5+1
    assume {:print "$at(140,40052,40053)"} true;
    $abort_code := $t13;
    $abort_flag := true;
    return;

}

// fun fungible_asset::deposit_sanity_check<fungible_asset::FungibleStore> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:742:5+474
procedure {:inline 1} $1_fungible_asset_deposit_sanity_check'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore', _$t1: bool) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: $1_fungible_asset_FungibleStore;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: $1_fungible_asset_FungibleStore;
    var $t11: bool;
    var $t12: bool;
    var $t13: $1_object_Object'$1_fungible_asset_Metadata';
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t1: bool;
    var $temp_0'$1_fungible_asset_FungibleStore': $1_fungible_asset_FungibleStore;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[store]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:742:5+1
    assume {:print "$at(140,31237,31238)"} true;
    assume {:print "$track_local(27,15,0):", $t0} $t0 == $t0;

    // trace_local[abort_on_dispatch]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:742:5+1
    assume {:print "$track_local(27,15,1):", $t1} $t1 == $t1;

    // $t5 := object::object_address<#0>($t0) on_abort goto L13 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1061:26+29
    assume {:print "$at(140,44087,44116)"} true;
    call $t5 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(140,44087,44116)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(27,15):", $t6} $t6 == $t6;
        goto L13;
    }

    // trace_local[store_addr#221]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1061:13+10
    assume {:print "$track_local(27,15,4):", $t5} $t5 == $t5;

    // $t7 := exists<fungible_asset::FungibleStore>($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:17+6
    assume {:print "$at(140,44134,44140)"} true;
    $t7 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t5);

    // if ($t7) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    assume {:print "$at(140,44126,44213)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:69+25
L0:

    // $t8 := 23 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:69+25
    assume {:print "$at(140,44186,44211)"} true;
    $t8 := 23;
    assume $IsValid'u64'($t8);

    // $t9 := error::not_found($t8) on_abort goto L13 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:52+43
    call $t9 := $1_error_not_found($t8);
    if ($abort_flag) {
        assume {:print "$at(140,44169,44212)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(27,15):", $t6} $t6 == $t6;
        goto L13;
    }

    // trace_abort($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    assume {:print "$at(140,44126,44213)"} true;
    assume {:print "$track_abort(27,15):", $t9} $t9 == $t9;

    // $t6 := move($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    $t6 := $t9;

    // goto L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    goto L13;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1063:38+10
    assume {:print "$at(140,44252,44262)"} true;
L2:

    // $t10 := get_global<fungible_asset::FungibleStore>($t5) on_abort goto L13 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1063:9+13
    assume {:print "$at(140,44223,44236)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t5);
    }
    if ($abort_flag) {
        assume {:print "$at(140,44223,44236)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(27,15):", $t6} $t6 == $t6;
        goto L13;
    }

    // trace_local[fa_store]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:746:13+8
    assume {:print "$at(140,31402,31410)"} true;
    assume {:print "$track_local(27,15,3):", $t10} $t10 == $t10;

    // $t11 := !($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:748:13+1
    assume {:print "$at(140,31473,31474)"} true;
    call $t11 := $Not($t1);

    // if ($t11) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:748:13+71
    if ($t11) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:748:13+71
L4:

    // $t12 := true at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:748:13+71
    assume {:print "$at(140,31473,31544)"} true;
    $t12 := true;
    assume $IsValid'bool'($t12);

    // $t2 := $t12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:748:13+71
    $t2 := $t12;

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:748:13+71
    goto L5;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:748:66+8
L3:

    // $t13 := get_field<fungible_asset::FungibleStore>.metadata($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:748:66+17
    assume {:print "$at(140,31526,31543)"} true;
    $t13 := $t10->$metadata;

    // $t14 := fungible_asset::has_deposit_dispatch_function($t13) on_abort goto L13 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:748:36+48
    call $t14 := $1_fungible_asset_has_deposit_dispatch_function($t13);
    if ($abort_flag) {
        assume {:print "$at(140,31496,31544)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(27,15):", $t6} $t6 == $t6;
        goto L13;
    }

    // $t2 := !($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:748:35+1
    call $t2 := $Not($t14);

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:748:13+71
L5:

    // if ($t2) goto L7 else goto L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:747:9+173
    assume {:print "$at(140,31452,31625)"} true;
    if ($t2) { goto L7; } else { goto L6; }

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:747:9+173
L7:

    // goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:747:9+173
    assume {:print "$at(140,31452,31625)"} true;
    goto L8;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:747:9+173
L6:

    // $t15 := 28 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:749:37+32
    assume {:print "$at(140,31582,31614)"} true;
    $t15 := 28;
    assume $IsValid'u64'($t15);

    // $t16 := error::invalid_argument($t15) on_abort goto L13 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:749:13+57
    call $t16 := $1_error_invalid_argument($t15);
    if ($abort_flag) {
        assume {:print "$at(140,31558,31615)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(27,15):", $t6} $t6 == $t6;
        goto L13;
    }

    // trace_abort($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:747:9+173
    assume {:print "$at(140,31452,31625)"} true;
    assume {:print "$track_abort(27,15):", $t16} $t16 == $t16;

    // $t6 := move($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:747:9+173
    $t6 := $t16;

    // goto L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:747:9+173
    goto L13;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:751:18+8
    assume {:print "$at(140,31644,31652)"} true;
L8:

    // $t17 := get_field<fungible_asset::FungibleStore>.frozen($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:751:18+15
    assume {:print "$at(140,31644,31659)"} true;
    $t17 := $t10->$frozen;

    // $t18 := !($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:751:17+1
    call $t18 := $Not($t17);

    // if ($t18) goto L10 else goto L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:751:9+69
    if ($t18) { goto L10; } else { goto L9; }

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:751:9+69
L10:

    // goto L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:751:9+69
    assume {:print "$at(140,31635,31704)"} true;
    goto L11;

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:751:60+16
L9:

    // $t19 := 3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:751:60+16
    assume {:print "$at(140,31686,31702)"} true;
    $t19 := 3;
    assume $IsValid'u64'($t19);

    // $t20 := error::permission_denied($t19) on_abort goto L13 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:751:35+42
    call $t20 := $1_error_permission_denied($t19);
    if ($abort_flag) {
        assume {:print "$at(140,31661,31703)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(27,15):", $t6} $t6 == $t6;
        goto L13;
    }

    // trace_abort($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:751:9+69
    assume {:print "$at(140,31635,31704)"} true;
    assume {:print "$track_abort(27,15):", $t20} $t20 == $t20;

    // $t6 := move($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:751:9+69
    $t6 := $t20;

    // goto L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:751:9+69
    goto L13;

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:751:78+1
L11:

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:752:5+1
    assume {:print "$at(140,31710,31711)"} true;
L12:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:752:5+1
    assume {:print "$at(140,31710,31711)"} true;
    return;

    // label L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:752:5+1
L13:

    // abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:752:5+1
    assume {:print "$at(140,31710,31711)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun fungible_asset::generate_burn_ref [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:396:5+195
procedure {:inline 1} $1_fungible_asset_generate_burn_ref(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_fungible_asset_BurnRef)
{
    // declare local variables
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $t2: int;
    var $t3: $1_fungible_asset_BurnRef;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_fungible_asset_BurnRef': $1_fungible_asset_BurnRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[constructor_ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:396:5+1
    assume {:print "$at(140,16684,16685)"} true;
    assume {:print "$track_local(27,21,0):", $t0} $t0 == $t0;

    // $t1 := object::object_from_constructor_ref<fungible_asset::Metadata>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:397:24+62
    assume {:print "$at(140,16781,16843)"} true;
    call $t1 := $1_object_object_from_constructor_ref'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(140,16781,16843)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(27,21):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack fungible_asset::BurnRef($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:398:9+20
    assume {:print "$at(140,16853,16873)"} true;
    $t3 := $1_fungible_asset_BurnRef($t1);

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:398:9+20
    assume {:print "$track_return(27,21,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:399:5+1
    assume {:print "$at(140,16878,16879)"} true;
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:399:5+1
    assume {:print "$at(140,16878,16879)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:399:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:399:5+1
    assume {:print "$at(140,16878,16879)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun fungible_asset::generate_mint_ref [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:389:5+195
procedure {:inline 1} $1_fungible_asset_generate_mint_ref(_$t0: $1_object_ConstructorRef) returns ($ret0: $1_fungible_asset_MintRef)
{
    // declare local variables
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $t2: int;
    var $t3: $1_fungible_asset_MintRef;
    var $t0: $1_object_ConstructorRef;
    var $temp_0'$1_fungible_asset_MintRef': $1_fungible_asset_MintRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[constructor_ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:389:5+1
    assume {:print "$at(140,16266,16267)"} true;
    assume {:print "$track_local(27,22,0):", $t0} $t0 == $t0;

    // $t1 := object::object_from_constructor_ref<fungible_asset::Metadata>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:390:24+62
    assume {:print "$at(140,16363,16425)"} true;
    call $t1 := $1_object_object_from_constructor_ref'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(140,16363,16425)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(27,22):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack fungible_asset::MintRef($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:391:9+20
    assume {:print "$at(140,16435,16455)"} true;
    $t3 := $1_fungible_asset_MintRef($t1);

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:391:9+20
    assume {:print "$track_return(27,22,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:392:5+1
    assume {:print "$at(140,16460,16461)"} true;
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:392:5+1
    assume {:print "$at(140,16460,16461)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:392:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:392:5+1
    assume {:print "$at(140,16460,16461)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun fungible_asset::has_deposit_dispatch_function [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:588:5+462
procedure {:inline 1} $1_fungible_asset_has_deposit_dispatch_function(_$t0: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: bool;
    var $t8: bool;
    var $t9: $1_fungible_asset_DispatchFunctionStore;
    var $t10: $1_option_Option'$1_function_info_FunctionInfo';
    var $t11: bool;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[metadata]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:588:5+1
    assume {:print "$at(140,24744,24745)"} true;
    assume {:print "$track_local(27,25,0):", $t0} $t0 == $t0;

    // $t4 := object::object_address<fungible_asset::Metadata>($t0) on_abort goto L7 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:589:29+33
    assume {:print "$at(140,24873,24906)"} true;
    call $t4 := $1_object_object_address'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(140,24873,24906)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // trace_local[metadata_addr]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:589:13+13
    assume {:print "$track_local(27,25,3):", $t4} $t4 == $t4;

    // $t6 := 0xa at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:29+21
    assume {:print "$at(140,24984,25005)"} true;
    $t6 := 10;
    assume $IsValid'address'($t6);

    // $t7 := !=($t4, $t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:26+2
    $t7 := !$IsEqual'address'($t4, $t6);

    // if ($t7) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:12+86
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:84+13
L1:

    // $t1 := exists<fungible_asset::DispatchFunctionStore>($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:54+6
    assume {:print "$at(140,25009,25015)"} true;
    $t1 := $ResourceExists($1_fungible_asset_DispatchFunctionStore_$memory, $t4);

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:12+86
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:12+86
L0:

    // $t8 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:12+86
    assume {:print "$at(140,24967,25053)"} true;
    $t8 := false;
    assume $IsValid'bool'($t8);

    // $t1 := $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:12+86
    $t1 := $t8;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:12+86
L2:

    // if ($t1) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:9+236
    assume {:print "$at(140,24964,25200)"} true;
    if ($t1) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:592:67+13
    assume {:print "$at(140,25123,25136)"} true;
L4:

    // $t9 := get_global<fungible_asset::DispatchFunctionStore>($t4) on_abort goto L7 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:592:30+13
    assume {:print "$at(140,25086,25099)"} true;
    if (!$ResourceExists($1_fungible_asset_DispatchFunctionStore_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $ResourceValue($1_fungible_asset_DispatchFunctionStore_$memory, $t4);
    }
    if ($abort_flag) {
        assume {:print "$at(140,25086,25099)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(27,25):", $t5} $t5 == $t5;
        goto L7;
    }

    // $t10 := get_field<fungible_asset::DispatchFunctionStore>.deposit_function($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:592:29+69
    $t10 := $t9->$deposit_function;

    // $t2 := opaque begin: option::is_some<function_info::FunctionInfo>($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:592:13+86

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:592:13+86
    assume $IsValid'bool'($t2);

    // assume Eq<bool>($t2, option::spec_is_some<function_info::FunctionInfo>($t10)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:592:13+86
    assume $IsEqual'bool'($t2, $1_option_spec_is_some'$1_function_info_FunctionInfo'($t10));

    // $t2 := opaque end: option::is_some<function_info::FunctionInfo>($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:592:13+86

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:9+236
    assume {:print "$at(140,24964,25200)"} true;
    goto L5;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:594:13+5
    assume {:print "$at(140,25185,25190)"} true;
L3:

    // $t11 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:594:13+5
    assume {:print "$at(140,25185,25190)"} true;
    $t11 := false;
    assume $IsValid'bool'($t11);

    // $t2 := $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:9+236
    assume {:print "$at(140,24964,25200)"} true;
    $t2 := $t11;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:9+236
L5:

    // trace_return[0]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:591:9+236
    assume {:print "$at(140,24964,25200)"} true;
    assume {:print "$track_return(27,25,0):", $t2} $t2 == $t2;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:596:5+1
    assume {:print "$at(140,25205,25206)"} true;
L6:

    // return $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:596:5+1
    assume {:print "$at(140,25205,25206)"} true;
    $ret0 := $t2;
    return;

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:596:5+1
L7:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:596:5+1
    assume {:print "$at(140,25205,25206)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun fungible_asset::increase_supply<fungible_asset::Metadata> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:992:5+1110
procedure {:inline 1} $1_fungible_asset_increase_supply'$1_fungible_asset_Metadata'(_$t0: $1_object_Object'$1_fungible_asset_Metadata', _$t1: int) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $Mutation ($1_fungible_asset_Supply);
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: bool;
    var $t9: $Mutation ($1_fungible_asset_ConcurrentSupply);
    var $t10: $Mutation ($1_aggregator_v2_Aggregator'u128');
    var $t11: int;
    var $t12: bool;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: $Mutation ($1_fungible_asset_Supply);
    var $t18: $1_option_Option'u128';
    var $t19: bool;
    var $t20: $Mutation ($1_option_Option'u128');
    var $t21: $Mutation (int);
    var $t22: int;
    var $t23: int;
    var $t24: int;
    var $t25: int;
    var $t26: bool;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: $Mutation (int);
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $t1: int;
    var $temp_0'$1_aggregator_v2_Aggregator'u128'': $1_aggregator_v2_Aggregator'u128';
    var $temp_0'$1_fungible_asset_Supply': $1_fungible_asset_Supply;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[metadata]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:992:5+1
    assume {:print "$at(140,41288,41289)"} true;
    assume {:print "$track_local(27,28,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:992:5+1
    assume {:print "$track_local(27,28,1):", $t1} $t1 == $t1;

    // $t4 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:993:23+1
    assume {:print "$at(140,41409,41410)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := ==($t1, $t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:993:20+2
    $t5 := $IsEqual'u64'($t1, $t4);

    // if ($t5) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:993:9+47
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:994:13+6
    assume {:print "$at(140,41426,41432)"} true;
L1:

    // goto L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:994:13+6
    assume {:print "$at(140,41426,41432)"} true;
    goto L16;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:996:55+8
    assume {:print "$at(140,41498,41506)"} true;
L0:

    // $t6 := object::object_address<#0>($t0) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:996:32+32
    assume {:print "$at(140,41475,41507)"} true;
    call $t6 := $1_object_object_address'$1_fungible_asset_Metadata'($t0);
    if ($abort_flag) {
        assume {:print "$at(140,41475,41507)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,28):", $t7} $t7 == $t7;
        goto L17;
    }

    // trace_local[metadata_address]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:996:13+16
    assume {:print "$track_local(27,28,2):", $t6} $t6 == $t6;

    // $t8 := exists<fungible_asset::ConcurrentSupply>($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:998:13+6
    assume {:print "$at(140,41522,41528)"} true;
    $t8 := $ResourceExists($1_fungible_asset_ConcurrentSupply_$memory, $t6);

    // if ($t8) goto L3 else goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:998:9+874
    if ($t8) { goto L3; } else { goto L2; }

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:999:62+16
    assume {:print "$at(140,41629,41645)"} true;
L3:

    // $t9 := borrow_global<fungible_asset::ConcurrentSupply>($t6) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:999:26+17
    assume {:print "$at(140,41593,41610)"} true;
    if (!$ResourceExists($1_fungible_asset_ConcurrentSupply_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(140,41593,41610)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,28):", $t7} $t7 == $t7;
        goto L17;
    }

    // $t10 := borrow_field<fungible_asset::ConcurrentSupply>.current($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:40+19
    assume {:print "$at(140,41708,41727)"} true;
    $t10 := $ChildMutation($t9, 0, $Dereference($t9)->$current);

    // $t11 := (u128)($t1) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:61+16
    call $t11 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(140,41729,41745)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,28):", $t7} $t7 == $t7;
        goto L17;
    }

    // $t12 := opaque begin: aggregator_v2::try_add<u128>($t10, $t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:17+61

    // $t13 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:17+61
    havoc $t13;

    // if ($t13) goto L20 else goto L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:17+61
    if ($t13) { goto L20; } else { goto L18; }

    // label L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:17+61
L19:

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:17+61
    assume {:print "$at(140,41685,41746)"} true;
    assume {:print "$track_abort(27,28):", $t7} $t7 == $t7;

    // goto L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:17+61
    goto L17;

    // label L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:17+61
L18:

    // $t10 := havoc[mut]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:17+61
    assume {:print "$at(140,41685,41746)"} true;
    havoc $temp_0'$1_aggregator_v2_Aggregator'u128'';
    $t10 := $UpdateMutation($t10, $temp_0'$1_aggregator_v2_Aggregator'u128'');

    // assume WellFormed($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:17+61
    assume $IsValid'$1_aggregator_v2_Aggregator'u128''($Dereference($t10));

    // assume WellFormed($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:17+61
    assume $IsValid'bool'($t12);

    // $t12 := opaque end: aggregator_v2::try_add<u128>($t10, $t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:17+61

    // write_back[Reference($t9).current (aggregator_v2::Aggregator<u128>)]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:17+61
    $t9 := $UpdateMutation($t9, $Update'$1_fungible_asset_ConcurrentSupply'_current($Dereference($t9), $Dereference($t10)));

    // write_back[fungible_asset::ConcurrentSupply@]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1001:17+61
    $1_fungible_asset_ConcurrentSupply_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentSupply_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // if ($t12) goto L5 else goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1000:13+159
    assume {:print "$at(140,41660,41819)"} true;
    if ($t12) { goto L5; } else { goto L4; }

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1000:13+159
L5:

    // goto L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1000:13+159
    assume {:print "$at(140,41660,41819)"} true;
    goto L6;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1002:37+20
    assume {:print "$at(140,41784,41804)"} true;
L4:

    // $t14 := 5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1002:37+20
    assume {:print "$at(140,41784,41804)"} true;
    $t14 := 5;
    assume $IsValid'u64'($t14);

    // $t15 := error::out_of_range($t14) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1002:17+41
    call $t15 := $1_error_out_of_range($t14);
    if ($abort_flag) {
        assume {:print "$at(140,41764,41805)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,28):", $t7} $t7 == $t7;
        goto L17;
    }

    // trace_abort($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1000:13+159
    assume {:print "$at(140,41660,41819)"} true;
    assume {:print "$track_abort(27,28):", $t15} $t15 == $t15;

    // $t7 := move($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1000:13+159
    $t7 := $t15;

    // goto L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1000:13+159
    goto L17;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:998:9+874
    assume {:print "$at(140,41518,42392)"} true;
L6:

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:998:9+874
    assume {:print "$at(140,41518,42392)"} true;
    goto L7;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1004:35+16
    assume {:print "$at(140,41855,41871)"} true;
L2:

    // $t16 := exists<fungible_asset::Supply>($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1004:20+6
    assume {:print "$at(140,41840,41846)"} true;
    $t16 := $ResourceExists($1_fungible_asset_Supply_$memory, $t6);

    // if ($t16) goto L9 else goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1004:16+556
    if ($t16) { goto L9; } else { goto L8; }

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1005:52+16
    assume {:print "$at(140,41927,41943)"} true;
L9:

    // $t17 := borrow_global<fungible_asset::Supply>($t6) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1005:26+17
    assume {:print "$at(140,41901,41918)"} true;
    if (!$ResourceExists($1_fungible_asset_Supply_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_fungible_asset_Supply_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(140,41901,41918)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,28):", $t7} $t7 == $t7;
        goto L17;
    }

    // trace_local[supply#1]($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1005:17+6
    $temp_0'$1_fungible_asset_Supply' := $Dereference($t17);
    assume {:print "$track_local(27,28,3):", $temp_0'$1_fungible_asset_Supply'} $temp_0'$1_fungible_asset_Supply' == $temp_0'$1_fungible_asset_Supply';

    // $t18 := get_field<fungible_asset::Supply>.maximum($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1006:33+15
    assume {:print "$at(140,41978,41993)"} true;
    $t18 := $Dereference($t17)->$maximum;

    // $t19 := opaque begin: option::is_some<u128>($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1006:17+32

    // assume WellFormed($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1006:17+32
    assume $IsValid'bool'($t19);

    // assume Eq<bool>($t19, option::spec_is_some<u128>($t18)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1006:17+32
    assume $IsEqual'bool'($t19, $1_option_spec_is_some'u128'($t18));

    // $t19 := opaque end: option::is_some<u128>($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1006:17+32

    // if ($t19) goto L11 else goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1006:13+288
    if ($t19) { goto L11; } else { goto L10; }

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1007:52+6
    assume {:print "$at(140,42049,42055)"} true;
L11:

    // $t20 := borrow_field<fungible_asset::Supply>.maximum($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1007:47+19
    assume {:print "$at(140,42044,42063)"} true;
    $t20 := $ChildMutation($t17, 1, $Dereference($t17)->$maximum);

    // $t21 := option::borrow_mut<u128>($t20) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1007:28+39
    call $t21,$t20 := $1_option_borrow_mut'u128'($t20);
    if ($abort_flag) {
        assume {:print "$at(140,42025,42064)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,28):", $t7} $t7 == $t7;
        goto L17;
    }

    // $t22 := read_ref($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1007:27+40
    $t22 := $Dereference($t21);

    // write_back[Reference($t17).maximum (option::Option<u128>)]($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1007:27+40
    $t17 := $UpdateMutation($t17, $Update'$1_fungible_asset_Supply'_maximum($Dereference($t17), $Dereference($t20)));

    // $t23 := get_field<fungible_asset::Supply>.current($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1009:27+14
    assume {:print "$at(140,42117,42131)"} true;
    $t23 := $Dereference($t17)->$current;

    // $t24 := -($t22, $t23) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1009:25+1
    call $t24 := $Sub($t22, $t23);
    if ($abort_flag) {
        assume {:print "$at(140,42115,42116)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,28):", $t7} $t7 == $t7;
        goto L17;
    }

    // $t25 := (u128)($t1) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1009:45+16
    call $t25 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(140,42135,42151)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,28):", $t7} $t7 == $t7;
        goto L17;
    }

    // $t26 := >=($t24, $t25) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1009:42+2
    call $t26 := $Ge($t24, $t25);

    // if ($t26) goto L13 else goto L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1008:17+150
    assume {:print "$at(140,42082,42232)"} true;
    if ($t26) { goto L13; } else { goto L12; }

    // label L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1008:17+150
L13:

    // goto L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1008:17+150
    assume {:print "$at(140,42082,42232)"} true;
    goto L14;

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1008:17+150
L12:

    // pack_ref_deep($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1008:17+150
    assume {:print "$at(140,42082,42232)"} true;

    // write_back[fungible_asset::Supply@]($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1008:17+150
    $1_fungible_asset_Supply_$memory := $ResourceUpdate($1_fungible_asset_Supply_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // drop($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1008:17+150

    // $t27 := 5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1010:41+20
    assume {:print "$at(140,42193,42213)"} true;
    $t27 := 5;
    assume $IsValid'u64'($t27);

    // $t28 := error::out_of_range($t27) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1010:21+41
    call $t28 := $1_error_out_of_range($t27);
    if ($abort_flag) {
        assume {:print "$at(140,42173,42214)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,28):", $t7} $t7 == $t7;
        goto L17;
    }

    // trace_abort($t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1008:17+150
    assume {:print "$at(140,42082,42232)"} true;
    assume {:print "$track_abort(27,28):", $t28} $t28 == $t28;

    // $t7 := move($t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1008:17+150
    $t7 := $t28;

    // goto L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1008:17+150
    goto L17;

    // label L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1008:17+150
L14:

    // goto L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1008:17+150
    assume {:print "$at(140,42082,42232)"} true;
    goto L15;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1006:13+288
    assume {:print "$at(140,41958,42246)"} true;
L10:

    // goto L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1006:13+288
    assume {:print "$at(140,41958,42246)"} true;
    goto L15;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1015:36+17
    assume {:print "$at(140,42364,42381)"} true;
L8:

    // $t29 := 21 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1015:36+17
    assume {:print "$at(140,42364,42381)"} true;
    $t29 := 21;
    assume $IsValid'u64'($t29);

    // $t30 := error::not_found($t29) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1015:19+35
    call $t30 := $1_error_not_found($t29);
    if ($abort_flag) {
        assume {:print "$at(140,42347,42382)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,28):", $t7} $t7 == $t7;
        goto L17;
    }

    // trace_abort($t30) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1015:13+41
    assume {:print "$at(140,42341,42382)"} true;
    assume {:print "$track_abort(27,28):", $t30} $t30 == $t30;

    // $t7 := move($t30) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1015:13+41
    $t7 := $t30;

    // goto L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1015:13+41
    goto L17;

    // label L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1013:30+6
    assume {:print "$at(140,42277,42283)"} true;
L15:

    // $t31 := get_field<fungible_asset::Supply>.current($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1013:30+14
    assume {:print "$at(140,42277,42291)"} true;
    $t31 := $Dereference($t17)->$current;

    // $t32 := (u128)($t1) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1013:47+16
    call $t32 := $CastU128($t1);
    if ($abort_flag) {
        assume {:print "$at(140,42294,42310)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,28):", $t7} $t7 == $t7;
        goto L17;
    }

    // $t33 := +($t31, $t32) on_abort goto L17 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1013:45+1
    call $t33 := $AddU128($t31, $t32);
    if ($abort_flag) {
        assume {:print "$at(140,42292,42293)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(27,28):", $t7} $t7 == $t7;
        goto L17;
    }

    // $t34 := borrow_field<fungible_asset::Supply>.current($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1013:13+14
    $t34 := $ChildMutation($t17, 0, $Dereference($t17)->$current);

    // write_ref($t34, $t33) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1013:13+50
    $t34 := $UpdateMutation($t34, $t33);

    // write_back[Reference($t17).current (u128)]($t34) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1013:13+50
    $t17 := $UpdateMutation($t17, $Update'$1_fungible_asset_Supply'_current($Dereference($t17), $Dereference($t34)));

    // pack_ref_deep($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1013:13+50

    // write_back[fungible_asset::Supply@]($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1013:13+50
    $1_fungible_asset_Supply_$memory := $ResourceUpdate($1_fungible_asset_Supply_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:998:9+874
    assume {:print "$at(140,41518,42392)"} true;
L7:

    // label L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1017:5+1
    assume {:print "$at(140,42397,42398)"} true;
L16:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1017:5+1
    assume {:print "$at(140,42397,42398)"} true;
    return;

    // label L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1017:5+1
L17:

    // abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1017:5+1
    assume {:print "$at(140,42397,42398)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

    // label L20 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L20:

    // drop($t9) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L19 at <internal>:1:1+10
    goto L19;

}

// fun fungible_asset::metadata_from_asset [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:507:5+96
procedure {:inline 1} $1_fungible_asset_metadata_from_asset(_$t0: $1_fungible_asset_FungibleAsset) returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $t0: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[fa]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:507:5+1
    assume {:print "$at(140,21312,21313)"} true;
    assume {:print "$track_local(27,37,0):", $t0} $t0 == $t0;

    // $t1 := get_field<fungible_asset::FungibleAsset>.metadata($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:508:9+11
    assume {:print "$at(140,21391,21402)"} true;
    $t1 := $t0->$metadata;

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:508:9+11
    assume {:print "$track_return(27,37,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:509:5+1
    assume {:print "$at(140,21407,21408)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:509:5+1
    assume {:print "$at(140,21407,21408)"} true;
    $ret0 := $t1;
    return;

}

// fun fungible_asset::mint_internal [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:767:5+271
procedure {:inline 1} $1_fungible_asset_mint_internal(_$t0: $1_object_Object'$1_fungible_asset_Metadata', _$t1: int) returns ($ret0: $1_fungible_asset_FungibleAsset)
{
    // declare local variables
    var $t2: int;
    var $t3: $1_fungible_asset_FungibleAsset;
    var $t0: $1_object_Object'$1_fungible_asset_Metadata';
    var $t1: int;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[metadata]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:767:5+1
    assume {:print "$at(140,32328,32329)"} true;
    assume {:print "$track_local(27,39,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:767:5+1
    assume {:print "$track_local(27,39,1):", $t1} $t1 == $t1;

    // fungible_asset::increase_supply<fungible_asset::Metadata>($t0, $t1) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:771:9+34
    assume {:print "$at(140,32483,32517)"} true;
    call $1_fungible_asset_increase_supply'$1_fungible_asset_Metadata'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(140,32483,32517)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(27,39):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := pack fungible_asset::FungibleAsset($t0, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:772:9+66
    assume {:print "$at(140,32527,32593)"} true;
    $t3 := $1_fungible_asset_FungibleAsset($t0, $t1);

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:772:9+66
    assume {:print "$track_return(27,39,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:776:5+1
    assume {:print "$at(140,32598,32599)"} true;
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:776:5+1
    assume {:print "$at(140,32598,32599)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:776:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:776:5+1
    assume {:print "$at(140,32598,32599)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun fungible_asset::store_exists [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:491:5+88
procedure {:inline 1} $1_fungible_asset_store_exists(_$t0: int) returns ($ret0: bool)
{
    // declare local variables
    var $t1: bool;
    var $t0: int;
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[store]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:491:5+1
    assume {:print "$at(140,20733,20734)"} true;
    assume {:print "$track_local(27,51,0):", $t0} $t0 == $t0;

    // $t1 := exists<fungible_asset::FungibleStore>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:497:9+6
    assume {:print "$at(140,20959,20965)"} true;
    $t1 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t0);

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:497:9+28
    assume {:print "$track_return(27,51,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:493:5+1
    assume {:print "$at(140,20820,20821)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:493:5+1
    assume {:print "$at(140,20820,20821)"} true;
    $ret0 := $t1;
    return;

}

// fun fungible_asset::store_metadata<fungible_asset::FungibleStore> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:513:5+147
procedure {:inline 1} $1_fungible_asset_store_metadata'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore') returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: $1_fungible_asset_FungibleStore;
    var $t8: $1_object_Object'$1_fungible_asset_Metadata';
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[store]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:513:5+1
    assume {:print "$at(140,21473,21474)"} true;
    assume {:print "$track_local(27,52,0):", $t0} $t0 == $t0;

    // $t2 := object::object_address<#0>($t0) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1061:26+29
    assume {:print "$at(140,44087,44116)"} true;
    call $t2 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(140,44087,44116)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(27,52):", $t3} $t3 == $t3;
        goto L4;
    }

    // trace_local[store_addr#252]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1061:13+10
    assume {:print "$track_local(27,52,1):", $t2} $t2 == $t2;

    // $t4 := exists<fungible_asset::FungibleStore>($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:17+6
    assume {:print "$at(140,44134,44140)"} true;
    $t4 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t2);

    // if ($t4) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    assume {:print "$at(140,44126,44213)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:69+25
L0:

    // $t5 := 23 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:69+25
    assume {:print "$at(140,44186,44211)"} true;
    $t5 := 23;
    assume $IsValid'u64'($t5);

    // $t6 := error::not_found($t5) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:52+43
    call $t6 := $1_error_not_found($t5);
    if ($abort_flag) {
        assume {:print "$at(140,44169,44212)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(27,52):", $t3} $t3 == $t3;
        goto L4;
    }

    // trace_abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    assume {:print "$at(140,44126,44213)"} true;
    assume {:print "$track_abort(27,52):", $t6} $t6 == $t6;

    // $t3 := move($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    $t3 := $t6;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1062:9+87
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1063:38+10
    assume {:print "$at(140,44252,44262)"} true;
L2:

    // $t7 := get_global<fungible_asset::FungibleStore>($t2) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:1063:9+13
    assume {:print "$at(140,44223,44236)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t2)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t2);
    }
    if ($abort_flag) {
        assume {:print "$at(140,44223,44236)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(27,52):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t8 := get_field<fungible_asset::FungibleStore>.metadata($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:514:9+38
    assume {:print "$at(140,21576,21614)"} true;
    $t8 := $t7->$metadata;

    // trace_return[0]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:514:9+38
    assume {:print "$track_return(27,52,0):", $t8} $t8 == $t8;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:515:5+1
    assume {:print "$at(140,21619,21620)"} true;
L3:

    // return $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:515:5+1
    assume {:print "$at(140,21619,21620)"} true;
    $ret0 := $t8;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:515:5+1
L4:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:515:5+1
    assume {:print "$at(140,21619,21620)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun fungible_asset::withdraw_internal [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:966:5+1102
procedure {:inline 1} $1_fungible_asset_withdraw_internal(_$t0: int, _$t1: int) returns ($ret0: $1_fungible_asset_FungibleAsset)
{
    // declare local variables
    var $t2: bool;
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: $Mutation ($1_fungible_asset_FungibleStore);
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation ($1_fungible_asset_FungibleStore);
    var $t10: $1_object_Object'$1_fungible_asset_Metadata';
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: bool;
    var $t17: $Mutation ($1_fungible_asset_ConcurrentFungibleBalance);
    var $t18: $Mutation ($1_aggregator_v2_Aggregator'u64');
    var $t19: bool;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: int;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: $Mutation (int);
    var $t30: $1_fungible_asset_Withdraw;
    var $t31: $1_fungible_asset_FungibleAsset;
    var $t0: int;
    var $t1: int;
    var $temp_0'$1_aggregator_v2_Aggregator'u64'': $1_aggregator_v2_Aggregator'u64';
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleStore': $1_fungible_asset_FungibleStore;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[store_addr]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:966:5+1
    assume {:print "$at(140,40120,40121)"} true;
    assume {:print "$track_local(27,62,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:966:5+1
    assume {:print "$track_local(27,62,1):", $t1} $t1 == $t1;

    // $t5 := exists<fungible_asset::FungibleStore>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:970:17+6
    assume {:print "$at(140,40297,40303)"} true;
    $t5 := $ResourceExists($1_fungible_asset_FungibleStore_$memory, $t0);

    // if ($t5) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:970:9+87
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:970:9+87
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:970:9+87
    assume {:print "$at(140,40289,40376)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:970:69+25
L0:

    // $t6 := 23 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:970:69+25
    assume {:print "$at(140,40349,40374)"} true;
    $t6 := 23;
    assume $IsValid'u64'($t6);

    // $t7 := error::not_found($t6) on_abort goto L19 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:970:52+43
    call $t7 := $1_error_not_found($t6);
    if ($abort_flag) {
        assume {:print "$at(140,40332,40375)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(27,62):", $t8} $t8 == $t8;
        goto L19;
    }

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:970:9+87
    assume {:print "$at(140,40289,40376)"} true;
    assume {:print "$track_abort(27,62):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:970:9+87
    $t8 := $t7;

    // goto L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:970:9+87
    goto L19;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:972:54+10
    assume {:print "$at(140,40432,40442)"} true;
L2:

    // $t9 := borrow_global<fungible_asset::FungibleStore>($t0) on_abort goto L19 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:972:21+17
    assume {:print "$at(140,40399,40416)"} true;
    if (!$ResourceExists($1_fungible_asset_FungibleStore_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_fungible_asset_FungibleStore_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(140,40399,40416)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(27,62):", $t8} $t8 == $t8;
        goto L19;
    }

    // trace_local[store]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:972:13+5
    $temp_0'$1_fungible_asset_FungibleStore' := $Dereference($t9);
    assume {:print "$track_local(27,62,4):", $temp_0'$1_fungible_asset_FungibleStore'} $temp_0'$1_fungible_asset_FungibleStore' == $temp_0'$1_fungible_asset_FungibleStore';

    // $t10 := get_field<fungible_asset::FungibleStore>.metadata($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:973:24+14
    assume {:print "$at(140,40468,40482)"} true;
    $t10 := $Dereference($t9)->$metadata;

    // trace_local[metadata]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:973:13+8
    assume {:print "$track_local(27,62,3):", $t10} $t10 == $t10;

    // $t11 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:974:23+1
    assume {:print "$at(140,40506,40507)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // $t12 := !=($t1, $t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:974:20+2
    $t12 := !$IsEqual'u64'($t1, $t11);

    // if ($t12) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:974:9+680
    if ($t12) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:975:17+5
    assume {:print "$at(140,40527,40532)"} true;
L4:

    // $t13 := get_field<fungible_asset::FungibleStore>.balance($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:975:17+13
    assume {:print "$at(140,40527,40540)"} true;
    $t13 := $Dereference($t9)->$balance;

    // $t14 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:975:34+1
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // $t15 := ==($t13, $t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:975:31+2
    $t15 := $IsEqual'u64'($t13, $t14);

    // if ($t15) goto L6 else goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:975:17+75
    if ($t15) { goto L6; } else { goto L5; }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:975:81+10
L6:

    // $t2 := exists<fungible_asset::ConcurrentFungibleBalance>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:503:9+6
    assume {:print "$at(140,21214,21220)"} true;
    $t2 := $ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0);

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:975:17+75
    assume {:print "$at(140,40527,40602)"} true;
    goto L7;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:975:17+75
L5:

    // $t16 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:975:17+75
    assume {:print "$at(140,40527,40602)"} true;
    $t16 := false;
    assume $IsValid'bool'($t16);

    // $t2 := $t16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:975:17+75
    $t2 := $t16;

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:975:17+75
L7:

    // if ($t2) goto L9 else goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:975:13+562
    assume {:print "$at(140,40523,41085)"} true;
    if ($t2) { goto L9; } else { goto L8; }

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:976:17+79
    assume {:print "$at(140,40622,40701)"} true;
L9:

    // drop($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:976:17+79
    assume {:print "$at(140,40622,40701)"} true;

    // $t17 := borrow_global<fungible_asset::ConcurrentFungibleBalance>($t0) on_abort goto L19 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:976:40+17
    if (!$ResourceExists($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t17 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(140,40645,40662)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(27,62):", $t8} $t8 == $t8;
        goto L19;
    }

    // $t18 := borrow_field<fungible_asset::ConcurrentFungibleBalance>.balance($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:978:44+29
    assume {:print "$at(140,40771,40800)"} true;
    $t18 := $ChildMutation($t17, 0, $Dereference($t17)->$balance);

    // $t19 := opaque begin: aggregator_v2::try_sub<u64>($t18, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:978:21+61

    // $t20 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:978:21+61
    havoc $t20;

    // if ($t20) goto L22 else goto L20 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:978:21+61
    if ($t20) { goto L22; } else { goto L20; }

    // label L21 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:978:21+61
L21:

    // trace_abort($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:978:21+61
    assume {:print "$at(140,40748,40809)"} true;
    assume {:print "$track_abort(27,62):", $t8} $t8 == $t8;

    // goto L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:978:21+61
    goto L19;

    // label L20 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:978:21+61
L20:

    // $t18 := havoc[mut]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:978:21+61
    assume {:print "$at(140,40748,40809)"} true;
    havoc $temp_0'$1_aggregator_v2_Aggregator'u64'';
    $t18 := $UpdateMutation($t18, $temp_0'$1_aggregator_v2_Aggregator'u64'');

    // assume WellFormed($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:978:21+61
    assume $IsValid'$1_aggregator_v2_Aggregator'u64''($Dereference($t18));

    // assume WellFormed($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:978:21+61
    assume $IsValid'bool'($t19);

    // $t19 := opaque end: aggregator_v2::try_sub<u64>($t18, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:978:21+61

    // write_back[Reference($t17).balance (aggregator_v2::Aggregator<u64>)]($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:978:21+61
    $t17 := $UpdateMutation($t17, $Update'$1_fungible_asset_ConcurrentFungibleBalance'_balance($Dereference($t17), $Dereference($t18)));

    // write_back[fungible_asset::ConcurrentFungibleBalance@]($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:978:21+61
    $1_fungible_asset_ConcurrentFungibleBalance_$memory := $ResourceUpdate($1_fungible_asset_ConcurrentFungibleBalance_$memory, $GlobalLocationAddress($t17),
        $Dereference($t17));

    // if ($t19) goto L11 else goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:977:17+176
    assume {:print "$at(140,40719,40895)"} true;
    if ($t19) { goto L11; } else { goto L10; }

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:977:17+176
L11:

    // goto L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:977:17+176
    assume {:print "$at(140,40719,40895)"} true;
    goto L12;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:979:45+21
    assume {:print "$at(140,40855,40876)"} true;
L10:

    // $t21 := 4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:979:45+21
    assume {:print "$at(140,40855,40876)"} true;
    $t21 := 4;
    assume $IsValid'u64'($t21);

    // $t22 := error::invalid_argument($t21) on_abort goto L19 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:979:21+46
    call $t22 := $1_error_invalid_argument($t21);
    if ($abort_flag) {
        assume {:print "$at(140,40831,40877)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(27,62):", $t8} $t8 == $t8;
        goto L19;
    }

    // trace_abort($t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:977:17+176
    assume {:print "$at(140,40719,40895)"} true;
    assume {:print "$track_abort(27,62):", $t22} $t22 == $t22;

    // $t8 := move($t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:977:17+176
    $t8 := $t22;

    // goto L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:977:17+176
    goto L19;

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:980:18+1
    assume {:print "$at(140,40895,40896)"} true;
L12:

    // goto L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:980:18+1
    assume {:print "$at(140,40895,40896)"} true;
    goto L13;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:982:25+5
    assume {:print "$at(140,40942,40947)"} true;
L8:

    // $t23 := get_field<fungible_asset::FungibleStore>.balance($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:982:25+13
    assume {:print "$at(140,40942,40955)"} true;
    $t23 := $Dereference($t9)->$balance;

    // $t24 := >=($t23, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:982:39+2
    call $t24 := $Ge($t23, $t1);

    // if ($t24) goto L15 else goto L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:982:17+80
    if ($t24) { goto L15; } else { goto L14; }

    // label L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:982:17+80
L15:

    // goto L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:982:17+80
    assume {:print "$at(140,40934,41014)"} true;
    goto L16;

    // label L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:982:17+80
L14:

    // drop($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:982:17+80
    assume {:print "$at(140,40934,41014)"} true;

    // $t25 := 4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:982:74+21
    $t25 := 4;
    assume $IsValid'u64'($t25);

    // $t26 := error::invalid_argument($t25) on_abort goto L19 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:982:50+46
    call $t26 := $1_error_invalid_argument($t25);
    if ($abort_flag) {
        assume {:print "$at(140,40967,41013)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(27,62):", $t8} $t8 == $t8;
        goto L19;
    }

    // trace_abort($t26) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:982:17+80
    assume {:print "$at(140,40934,41014)"} true;
    assume {:print "$track_abort(27,62):", $t26} $t26 == $t26;

    // $t8 := move($t26) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:982:17+80
    $t8 := $t26;

    // goto L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:982:17+80
    goto L19;

    // label L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:983:33+5
    assume {:print "$at(140,41048,41053)"} true;
L16:

    // $t27 := get_field<fungible_asset::FungibleStore>.balance($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:983:33+13
    assume {:print "$at(140,41048,41061)"} true;
    $t27 := $Dereference($t9)->$balance;

    // $t28 := -($t27, $t1) on_abort goto L19 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:983:47+1
    call $t28 := $Sub($t27, $t1);
    if ($abort_flag) {
        assume {:print "$at(140,41062,41063)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(27,62):", $t8} $t8 == $t8;
        goto L19;
    }

    // $t29 := borrow_field<fungible_asset::FungibleStore>.balance($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:983:17+13
    $t29 := $ChildMutation($t9, 1, $Dereference($t9)->$balance);

    // write_ref($t29, $t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:983:17+38
    $t29 := $UpdateMutation($t29, $t28);

    // write_back[Reference($t9).balance (u64)]($t29) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:983:17+38
    $t9 := $UpdateMutation($t9, $Update'$1_fungible_asset_FungibleStore'_balance($Dereference($t9), $Dereference($t29)));

    // write_back[fungible_asset::FungibleStore@]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:983:17+38
    $1_fungible_asset_FungibleStore_$memory := $ResourceUpdate($1_fungible_asset_FungibleStore_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // label L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:986:53+10
    assume {:print "$at(140,41140,41150)"} true;
L13:

    // $t30 := pack fungible_asset::Withdraw($t0, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:986:35+38
    assume {:print "$at(140,41122,41160)"} true;
    $t30 := $1_fungible_asset_Withdraw($t0, $t1);

    // opaque begin: event::emit<fungible_asset::Withdraw>($t30) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:986:13+61

    // opaque end: event::emit<fungible_asset::Withdraw>($t30) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:986:13+61

    // goto L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:986:74+1
    goto L17;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:974:9+680
    assume {:print "$at(140,40492,41172)"} true;
L3:

    // drop($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:974:9+680
    assume {:print "$at(140,40492,41172)"} true;

    // label L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:988:25+8
    assume {:print "$at(140,41198,41206)"} true;
L17:

    // $t31 := pack fungible_asset::FungibleAsset($t10, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:988:9+34
    assume {:print "$at(140,41182,41216)"} true;
    $t31 := $1_fungible_asset_FungibleAsset($t10, $t1);

    // trace_return[0]($t31) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:988:9+34
    assume {:print "$track_return(27,62,0):", $t31} $t31 == $t31;

    // label L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:989:5+1
    assume {:print "$at(140,41221,41222)"} true;
L18:

    // return $t31 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:989:5+1
    assume {:print "$at(140,41221,41222)"} true;
    $ret0 := $t31;
    return;

    // label L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:989:5+1
L19:

    // abort($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/fungible_asset.move:989:5+1
    assume {:print "$at(140,41221,41222)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

    // label L22 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L22:

    // drop($t17) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L21 at <internal>:1:1+10
    goto L21;

}

// struct dispatchable_fungible_asset::TransferRefStore at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:36:5+73
datatype $1_dispatchable_fungible_asset_TransferRefStore {
    $1_dispatchable_fungible_asset_TransferRefStore($transfer_ref: $1_fungible_asset_TransferRef)
}
function {:inline} $Update'$1_dispatchable_fungible_asset_TransferRefStore'_transfer_ref(s: $1_dispatchable_fungible_asset_TransferRefStore, x: $1_fungible_asset_TransferRef): $1_dispatchable_fungible_asset_TransferRefStore {
    $1_dispatchable_fungible_asset_TransferRefStore(x)
}
function $IsValid'$1_dispatchable_fungible_asset_TransferRefStore'(s: $1_dispatchable_fungible_asset_TransferRefStore): bool {
    $IsValid'$1_fungible_asset_TransferRef'(s->$transfer_ref)
}
function {:inline} $IsEqual'$1_dispatchable_fungible_asset_TransferRefStore'(s1: $1_dispatchable_fungible_asset_TransferRefStore, s2: $1_dispatchable_fungible_asset_TransferRefStore): bool {
    s1 == s2
}
var $1_dispatchable_fungible_asset_TransferRefStore_$memory: $Memory $1_dispatchable_fungible_asset_TransferRefStore;

// fun dispatchable_fungible_asset::deposit<fungible_asset::FungibleStore> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:96:5+794
procedure {:inline 1} $1_dispatchable_fungible_asset_deposit'$1_fungible_asset_FungibleStore'(_$t0: $1_object_Object'$1_fungible_asset_FungibleStore', _$t1: $1_fungible_asset_FungibleAsset) returns ()
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: $1_fungible_asset_FungibleAsset;
    var $t4: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t5: $1_function_info_FunctionInfo;
    var $t6: $1_option_Option'$1_function_info_FunctionInfo';
    var $t7: int;
    var $t8: bool;
    var $t9: int;
    var $t10: $1_option_Option'$1_function_info_FunctionInfo';
    var $t11: bool;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: $1_function_info_FunctionInfo;
    var $t16: bool;
    var $t17: $1_object_Object'$1_fungible_asset_Metadata';
    var $t18: int;
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: $1_dispatchable_fungible_asset_TransferRefStore;
    var $t23: $1_fungible_asset_TransferRef;
    var $t24: bool;
    var $t25: int;
    var $t0: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t1: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_function_info_FunctionInfo': $1_function_info_FunctionInfo;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_option_Option'$1_function_info_FunctionInfo'': $1_option_Option'$1_function_info_FunctionInfo';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[store]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:96:5+1
    assume {:print "$at(132,4052,4053)"} true;
    assume {:print "$track_local(28,0,0):", $t0} $t0 == $t0;

    // trace_local[fa]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:96:5+1
    assume {:print "$track_local(28,0,1):", $t1} $t1 == $t1;

    // $t8 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:97:53+5
    assume {:print "$at(132,4196,4201)"} true;
    $t8 := false;
    assume $IsValid'bool'($t8);

    // fungible_asset::deposit_sanity_check<#0>($t0, $t8) on_abort goto L10 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:97:9+50
    call $1_fungible_asset_deposit_sanity_check'$1_fungible_asset_FungibleStore'($t0, $t8);
    if ($abort_flag) {
        assume {:print "$at(132,4152,4202)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(28,0):", $t9} $t9 == $t9;
        goto L10;
    }

    // $t10 := fungible_asset::deposit_dispatch_function<#0>($t0) on_abort goto L10 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:98:24+48
    assume {:print "$at(132,4227,4275)"} true;
    call $t10 := $1_fungible_asset_deposit_dispatch_function'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(132,4227,4275)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(28,0):", $t9} $t9 == $t9;
        goto L10;
    }

    // trace_local[func_opt]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:98:13+8
    assume {:print "$track_local(28,0,6):", $t10} $t10 == $t10;

    // $t11 := opaque begin: option::is_some<function_info::FunctionInfo>($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:99:13+26
    assume {:print "$at(132,4289,4315)"} true;

    // assume WellFormed($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:99:13+26
    assume $IsValid'bool'($t11);

    // assume Eq<bool>($t11, option::spec_is_some<function_info::FunctionInfo>($t10)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:99:13+26
    assume $IsEqual'bool'($t11, $1_option_spec_is_some'$1_function_info_FunctionInfo'($t10));

    // $t11 := opaque end: option::is_some<function_info::FunctionInfo>($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:99:13+26

    // if ($t11) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:99:9+555
    if ($t11) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:101:17+47
    assume {:print "$at(132,4356,4403)"} true;
L1:

    // $t12 := features::dispatchable_fungible_asset_enabled() on_abort goto L10 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:101:17+47
    assume {:print "$at(132,4356,4403)"} true;
    call $t12 := $1_features_dispatchable_fungible_asset_enabled();
    if ($abort_flag) {
        assume {:print "$at(132,4356,4403)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(28,0):", $t9} $t9 == $t9;
        goto L10;
    }

    // if ($t12) goto L3 else goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:100:13+134
    assume {:print "$at(132,4331,4465)"} true;
    if ($t12) { goto L3; } else { goto L2; }

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:100:13+134
L3:

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:100:13+134
    assume {:print "$at(132,4331,4465)"} true;
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:102:32+14
    assume {:print "$at(132,4436,4450)"} true;
L2:

    // $t13 := 3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:102:32+14
    assume {:print "$at(132,4436,4450)"} true;
    $t13 := 3;
    assume $IsValid'u64'($t13);

    // $t14 := error::aborted($t13) on_abort goto L10 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:102:17+30
    call $t14 := $1_error_aborted($t13);
    if ($abort_flag) {
        assume {:print "$at(132,4421,4451)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(28,0):", $t9} $t9 == $t9;
        goto L10;
    }

    // trace_abort($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:100:13+134
    assume {:print "$at(132,4331,4465)"} true;
    assume {:print "$track_abort(28,0):", $t14} $t14 == $t14;

    // $t9 := move($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:100:13+134
    $t9 := $t14;

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:100:13+134
    goto L10;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:104:39+9
    assume {:print "$at(132,4505,4514)"} true;
L4:

    // $t15 := opaque begin: option::borrow<function_info::FunctionInfo>($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:104:24+25
    assume {:print "$at(132,4490,4515)"} true;

    // assume Identical($t16, option::spec_is_none<function_info::FunctionInfo>($t10)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:104:24+25
    assume ($t16 == $1_option_spec_is_none'$1_function_info_FunctionInfo'($t10));

    // if ($t16) goto L12 else goto L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:104:24+25
    if ($t16) { goto L12; } else { goto L11; }

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:104:24+25
L12:

    // assume And(option::spec_is_none<function_info::FunctionInfo>($t10), Eq(262145, $t9)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:104:24+25
    assume {:print "$at(132,4490,4515)"} true;
    assume ($1_option_spec_is_none'$1_function_info_FunctionInfo'($t10) && $IsEqual'num'(262145, $t9));

    // trace_abort($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:104:24+25
    assume {:print "$at(132,4490,4515)"} true;
    assume {:print "$track_abort(28,0):", $t9} $t9 == $t9;

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:104:24+25
    goto L10;

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:104:24+25
L11:

    // assume WellFormed($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:104:24+25
    assume {:print "$at(132,4490,4515)"} true;
    assume $IsValid'$1_function_info_FunctionInfo'($t15);

    // assume Eq<function_info::FunctionInfo>($t15, option::spec_borrow<function_info::FunctionInfo>($t10)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:104:24+25
    assume $IsEqual'$1_function_info_FunctionInfo'($t15, $1_option_spec_borrow'$1_function_info_FunctionInfo'($t10));

    // $t15 := opaque end: option::borrow<function_info::FunctionInfo>($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:104:24+25

    // trace_local[func]($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:104:17+4
    assume {:print "$track_local(28,0,5):", $t15} $t15 == $t15;

    // function_info::load_module_from_function($t15) on_abort goto L10 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:105:13+46
    assume {:print "$at(132,4529,4575)"} true;
    call $1_function_info_load_module_from_function($t15);
    if ($abort_flag) {
        assume {:print "$at(132,4529,4575)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(28,0):", $t9} $t9 == $t9;
        goto L10;
    }

    // $t17 := fungible_asset::store_metadata<#0>($t0) on_abort goto L10 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:167:14+40
    assume {:print "$at(132,6920,6960)"} true;
    call $t17 := $1_fungible_asset_store_metadata'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(132,6920,6960)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(28,0):", $t9} $t9 == $t9;
        goto L10;
    }

    // $t18 := object::object_address<fungible_asset::Metadata>($t17) on_abort goto L10 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:166:29+87
    assume {:print "$at(132,6883,6970)"} true;
    call $t18 := $1_object_object_address'$1_fungible_asset_Metadata'($t17);
    if ($abort_flag) {
        assume {:print "$at(132,6883,6970)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(28,0):", $t9} $t9 == $t9;
        goto L10;
    }

    // trace_local[metadata_addr#175]($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:166:13+13
    assume {:print "$track_local(28,0,7):", $t18} $t18 == $t18;

    // $t19 := exists<dispatchable_fungible_asset::TransferRefStore>($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:170:13+6
    assume {:print "$at(132,7001,7007)"} true;
    $t19 := $ResourceExists($1_dispatchable_fungible_asset_TransferRefStore_$memory, $t18);

    // if ($t19) goto L6 else goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:169:9+118
    assume {:print "$at(132,6980,7098)"} true;
    if ($t19) { goto L6; } else { goto L5; }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:169:9+118
L6:

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:169:9+118
    assume {:print "$at(132,6980,7098)"} true;
    goto L7;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:169:9+118
L5:

    // $t20 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:171:30+16
    assume {:print "$at(132,7071,7087)"} true;
    $t20 := 1;
    assume $IsValid'u64'($t20);

    // $t21 := error::not_found($t20) on_abort goto L10 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:171:13+34
    call $t21 := $1_error_not_found($t20);
    if ($abort_flag) {
        assume {:print "$at(132,7054,7088)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(28,0):", $t9} $t9 == $t9;
        goto L10;
    }

    // trace_abort($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:169:9+118
    assume {:print "$at(132,6980,7098)"} true;
    assume {:print "$track_abort(28,0):", $t21} $t21 == $t21;

    // $t9 := move($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:169:9+118
    $t9 := $t21;

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:169:9+118
    goto L10;

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:107:17+5
    assume {:print "$at(132,4627,4632)"} true;
L7:

    // $t22 := get_global<dispatchable_fungible_asset::TransferRefStore>($t18) on_abort goto L10 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:173:10+13
    assume {:print "$at(132,7109,7122)"} true;
    if (!$ResourceExists($1_dispatchable_fungible_asset_TransferRefStore_$memory, $t18)) {
        call $ExecFailureAbort();
    } else {
        $t22 := $ResourceValue($1_dispatchable_fungible_asset_TransferRefStore_$memory, $t18);
    }
    if ($abort_flag) {
        assume {:print "$at(132,7109,7122)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(28,0):", $t9} $t9 == $t9;
        goto L10;
    }

    // $t23 := get_field<dispatchable_fungible_asset::TransferRefStore>.transfer_ref($t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:173:9+60
    $t23 := $t22->$transfer_ref;

    // opaque begin: dispatchable_fungible_asset::dispatchable_deposit<#0>($t0, $t1, $t23, $t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:106:13+143
    assume {:print "$at(132,4589,4732)"} true;

    // $t24 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:106:13+143
    havoc $t24;

    // if ($t24) goto L14 else goto L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:106:13+143
    if ($t24) { goto L14; } else { goto L13; }

    // label L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:106:13+143
L14:

    // trace_abort($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:106:13+143
    assume {:print "$at(132,4589,4732)"} true;
    assume {:print "$track_abort(28,0):", $t9} $t9 == $t9;

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:106:13+143
    goto L10;

    // label L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:106:13+143
L13:

    // opaque end: dispatchable_fungible_asset::dispatchable_deposit<#0>($t0, $t1, $t23, $t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:106:13+143
    assume {:print "$at(132,4589,4732)"} true;

    // goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:99:9+555
    assume {:print "$at(132,4285,4840)"} true;
    goto L8;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:113:69+6
    assume {:print "$at(132,4818,4824)"} true;
L0:

    // $t25 := object::object_address<#0>($t0) on_abort goto L10 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:113:46+30
    assume {:print "$at(132,4795,4825)"} true;
    call $t25 := $1_object_object_address'$1_fungible_asset_FungibleStore'($t0);
    if ($abort_flag) {
        assume {:print "$at(132,4795,4825)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(28,0):", $t9} $t9 == $t9;
        goto L10;
    }

    // fungible_asset::deposit_internal($t25, $t1) on_abort goto L10 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:113:13+68
    call $1_fungible_asset_deposit_internal($t25, $t1);
    if ($abort_flag) {
        assume {:print "$at(132,4762,4830)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(28,0):", $t9} $t9 == $t9;
        goto L10;
    }

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:99:9+555
    assume {:print "$at(132,4285,4840)"} true;
L8:

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:115:5+1
    assume {:print "$at(132,4845,4846)"} true;
L9:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:115:5+1
    assume {:print "$at(132,4845,4846)"} true;
    return;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:115:5+1
L10:

    // abort($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/dispatchable_fungible_asset.move:115:5+1
    assume {:print "$at(132,4845,4846)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// struct primary_fungible_store::DeriveRefPod at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:27:5+75
datatype $1_primary_fungible_store_DeriveRefPod {
    $1_primary_fungible_store_DeriveRefPod($metadata_derive_ref: $1_object_DeriveRef)
}
function {:inline} $Update'$1_primary_fungible_store_DeriveRefPod'_metadata_derive_ref(s: $1_primary_fungible_store_DeriveRefPod, x: $1_object_DeriveRef): $1_primary_fungible_store_DeriveRefPod {
    $1_primary_fungible_store_DeriveRefPod(x)
}
function $IsValid'$1_primary_fungible_store_DeriveRefPod'(s: $1_primary_fungible_store_DeriveRefPod): bool {
    $IsValid'$1_object_DeriveRef'(s->$metadata_derive_ref)
}
function {:inline} $IsEqual'$1_primary_fungible_store_DeriveRefPod'(s1: $1_primary_fungible_store_DeriveRefPod, s2: $1_primary_fungible_store_DeriveRefPod): bool {
    s1 == s2
}
var $1_primary_fungible_store_DeriveRefPod_$memory: $Memory $1_primary_fungible_store_DeriveRefPod;

// fun primary_fungible_store::deposit [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:165:5+266
procedure {:inline 1} $1_primary_fungible_store_deposit(_$t0: int, _$t1: $1_fungible_asset_FungibleAsset) returns ()
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: $1_object_Object'$1_fungible_asset_Metadata';
    var $t4: int;
    var $t5: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t0: int;
    var $t1: $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:165:5+1
    assume {:print "$at(159,7833,7834)"} true;
    assume {:print "$track_local(29,4,0):", $t0} $t0 == $t0;

    // trace_local[fa]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:165:5+1
    assume {:print "$track_local(29,4,1):", $t1} $t1 == $t1;

    // $t3 := fungible_asset::asset_metadata($t1) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:166:24+35
    assume {:print "$at(159,7934,7969)"} true;
    call $t3 := $1_fungible_asset_asset_metadata($t1);
    if ($abort_flag) {
        assume {:print "$at(159,7934,7969)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,4):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[metadata]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:166:13+8
    assume {:print "$track_local(29,4,2):", $t3} $t3 == $t3;

    // $t5 := primary_fungible_store::ensure_primary_store_exists<fungible_asset::Metadata>($t0, $t3) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:167:21+44
    assume {:print "$at(159,7991,8035)"} true;
    call $t5 := $1_primary_fungible_store_ensure_primary_store_exists'$1_fungible_asset_Metadata'($t0, $t3);
    if ($abort_flag) {
        assume {:print "$at(159,7991,8035)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,4):", $t4} $t4 == $t4;
        goto L2;
    }

    // dispatchable_fungible_asset::deposit<fungible_asset::FungibleStore>($t5, $t1) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:168:9+47
    assume {:print "$at(159,8045,8092)"} true;
    call $1_dispatchable_fungible_asset_deposit'$1_fungible_asset_FungibleStore'($t5, $t1);
    if ($abort_flag) {
        assume {:print "$at(159,8045,8092)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,4):", $t4} $t4 == $t4;
        goto L2;
    }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:169:5+1
    assume {:print "$at(159,8098,8099)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:169:5+1
    assume {:print "$at(159,8098,8099)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:169:5+1
L2:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:169:5+1
    assume {:print "$at(159,8098,8099)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun primary_fungible_store::create_primary_store<fungible_asset::Metadata> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:72:5+746
procedure {:inline 1} $1_primary_fungible_store_create_primary_store'$1_fungible_asset_Metadata'(_$t0: int, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t2: $1_object_ConstructorRef;
    var $t3: $1_object_TransferRef;
    var $t4: $1_object_ConstructorRef;
    var $t5: $1_object_DeriveRef;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $1_object_Object'$1_fungible_asset_Metadata';
    var $t10: $1_primary_fungible_store_DeriveRefPod;
    var $t11: $1_object_DeriveRef;
    var $t12: int;
    var $t13: $1_object_ConstructorRef;
    var $t14: $1_object_TransferRef;
    var $t15: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t0: int;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_DeriveRef': $1_object_DeriveRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner_addr]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:72:5+1
    assume {:print "$at(159,3443,3444)"} true;
    assume {:print "$track_local(29,2,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:72:5+1
    assume {:print "$track_local(29,2,1):", $t1} $t1 == $t1;

    // $t7 := object::object_address<#0>($t1) on_abort goto L2 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:76:29+33
    assume {:print "$at(159,3623,3656)"} true;
    call $t7 := $1_object_object_address'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(159,3623,3656)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[metadata_addr]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:76:13+13
    assume {:print "$track_local(29,2,6):", $t7} $t7 == $t7;

    // $t9 := object::address_to_object<fungible_asset::Metadata>($t7) on_abort goto L2 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:77:9+50
    assume {:print "$at(159,3666,3716)"} true;
    call $t9 := $1_object_address_to_object'$1_fungible_asset_Metadata'($t7);
    if ($abort_flag) {
        assume {:print "$at(159,3666,3716)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // drop($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:77:9+50

    // $t10 := get_global<primary_fungible_store::DeriveRefPod>($t7) on_abort goto L2 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:78:27+13
    assume {:print "$at(159,3744,3757)"} true;
    if (!$ResourceExists($1_primary_fungible_store_DeriveRefPod_$memory, $t7)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(159,3744,3757)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t11 := get_field<primary_fungible_store::DeriveRefPod>.metadata_derive_ref($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:78:26+63
    $t11 := $t10->$metadata_derive_ref;

    // trace_local[derive_ref]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:78:13+10
    assume {:print "$track_local(29,2,5):", $t11} $t11 == $t11;

    // assume Identical($t12, object::spec_create_user_derived_object_address($t0, select object::DeriveRef.self<object::DeriveRef>($t11))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.spec.move:177:9+89
    assume {:print "$at(157,7509,7598)"} true;
    assume ($t12 == $1_object_spec_create_user_derived_object_address($t0, $t11->$self));

    // $t13 := object::create_user_derived_object($t0, $t11) on_abort goto L2 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:79:32+58
    assume {:print "$at(159,3839,3897)"} true;
    call $t13 := $1_object_create_user_derived_object($t0, $t11);
    if ($abort_flag) {
        assume {:print "$at(159,3839,3897)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_local[constructor_ref]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:79:13+15
    assume {:print "$track_local(29,2,4):", $t13} $t13 == $t13;

    // $t14 := object::generate_transfer_ref($t13) on_abort goto L2 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:81:29+46
    assume {:print "$at(159,4015,4061)"} true;
    call $t14 := $1_object_generate_transfer_ref($t13);
    if ($abort_flag) {
        assume {:print "$at(159,4015,4061)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // object::disable_ungated_transfer($t14) on_abort goto L2 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:82:9+46
    assume {:print "$at(159,4071,4117)"} true;
    call $1_object_disable_ungated_transfer($t14);
    if ($abort_flag) {
        assume {:print "$at(159,4071,4117)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // $t15 := fungible_asset::create_store<#0>($t13, $t1) on_abort goto L2 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:84:9+55
    assume {:print "$at(159,4128,4183)"} true;
    call $t15 := $1_fungible_asset_create_store'$1_fungible_asset_Metadata'($t13, $t1);
    if ($abort_flag) {
        assume {:print "$at(159,4128,4183)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(29,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // trace_return[0]($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:84:9+55
    assume {:print "$track_return(29,2,0):", $t15} $t15 == $t15;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:85:5+1
    assume {:print "$at(159,4188,4189)"} true;
L1:

    // return $t15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:85:5+1
    assume {:print "$at(159,4188,4189)"} true;
    $ret0 := $t15;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:85:5+1
L2:

    // abort($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:85:5+1
    assume {:print "$at(159,4188,4189)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun primary_fungible_store::create_primary_store_enabled_fungible_asset [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:34:5+694
procedure {:inline 1} $1_primary_fungible_store_create_primary_store_enabled_fungible_asset(_$t0: $1_object_ConstructorRef, _$t1: $1_option_Option'u128', _$t2: $1_string_String, _$t3: $1_string_String, _$t4: int, _$t5: $1_string_String, _$t6: $1_string_String) returns ()
{
    // declare local variables
    var $t7: $signer;
    var $t8: $1_object_Object'$1_fungible_asset_Metadata';
    var $t9: int;
    var $t10: $signer;
    var $t11: $1_object_DeriveRef;
    var $t12: $1_primary_fungible_store_DeriveRefPod;
    var $t0: $1_object_ConstructorRef;
    var $t1: $1_option_Option'u128';
    var $t2: $1_string_String;
    var $t3: $1_string_String;
    var $t4: int;
    var $t5: $1_string_String;
    var $t6: $1_string_String;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_option_Option'u128'': $1_option_Option'u128';
    var $temp_0'$1_string_String': $1_string_String;
    var $temp_0'u8': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;
    $t6 := _$t6;

    // bytecode translation starts here
    // trace_local[constructor_ref]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:34:5+1
    assume {:print "$at(159,2145,2146)"} true;
    assume {:print "$track_local(29,3,0):", $t0} $t0 == $t0;

    // trace_local[maximum_supply]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:34:5+1
    assume {:print "$track_local(29,3,1):", $t1} $t1 == $t1;

    // trace_local[name]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:34:5+1
    assume {:print "$track_local(29,3,2):", $t2} $t2 == $t2;

    // trace_local[symbol]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:34:5+1
    assume {:print "$track_local(29,3,3):", $t3} $t3 == $t3;

    // trace_local[decimals]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:34:5+1
    assume {:print "$track_local(29,3,4):", $t4} $t4 == $t4;

    // trace_local[icon_uri]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:34:5+1
    assume {:print "$track_local(29,3,5):", $t5} $t5 == $t5;

    // trace_local[project_uri]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:34:5+1
    assume {:print "$track_local(29,3,6):", $t6} $t6 == $t6;

    // $t8 := fungible_asset::add_fungibility($t0, $t1, $t2, $t3, $t4, $t5, $t6) on_abort goto L2 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:43:9+206
    assume {:print "$at(159,2420,2626)"} true;
    call $t8 := $1_fungible_asset_add_fungibility($t0, $t1, $t2, $t3, $t4, $t5, $t6);
    if ($abort_flag) {
        assume {:print "$at(159,2420,2626)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,3):", $t9} $t9 == $t9;
        goto L2;
    }

    // drop($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:43:9+206

    // $t10 := object::generate_signer($t0) on_abort goto L2 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:52:29+40
    assume {:print "$at(159,2656,2696)"} true;
    call $t10 := $1_object_generate_signer($t0);
    if ($abort_flag) {
        assume {:print "$at(159,2656,2696)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,3):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t11 := object::generate_derive_ref($t0) on_abort goto L2 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:54:34+44
    assume {:print "$at(159,2776,2820)"} true;
    call $t11 := $1_object_generate_derive_ref($t0);
    if ($abort_flag) {
        assume {:print "$at(159,2776,2820)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,3):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t12 := pack primary_fungible_store::DeriveRefPod($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:53:31+103
    assume {:print "$at(159,2728,2831)"} true;
    $t12 := $1_primary_fungible_store_DeriveRefPod($t11);

    // move_to<primary_fungible_store::DeriveRefPod>($t12, $t10) on_abort goto L2 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:53:9+7
    if ($ResourceExists($1_primary_fungible_store_DeriveRefPod_$memory, $t10->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_primary_fungible_store_DeriveRefPod_$memory := $ResourceUpdate($1_primary_fungible_store_DeriveRefPod_$memory, $t10->$addr, $t12);
    }
    if ($abort_flag) {
        assume {:print "$at(159,2706,2713)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(29,3):", $t9} $t9 == $t9;
        goto L2;
    }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:56:5+1
    assume {:print "$at(159,2838,2839)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:56:5+1
    assume {:print "$at(159,2838,2839)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:56:5+1
L2:

    // abort($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:56:5+1
    assume {:print "$at(159,2838,2839)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun primary_fungible_store::ensure_primary_store_exists<fungible_asset::Metadata> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:59:5+407
procedure {:inline 1} $1_primary_fungible_store_ensure_primary_store_exists'$1_fungible_asset_Metadata'(_$t0: int, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t2: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t0: int;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:59:5+1
    assume {:print "$at(159,2946,2947)"} true;
    assume {:print "$track_local(29,6,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:59:5+1
    assume {:print "$track_local(29,6,1):", $t1} $t1 == $t1;

    // $t4 := primary_fungible_store::primary_store_address<#0>($t0, $t1) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:63:26+38
    assume {:print "$at(159,3125,3163)"} true;
    call $t4 := $1_primary_fungible_store_primary_store_address'$1_fungible_asset_Metadata'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(159,3125,3163)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,6):", $t5} $t5 == $t5;
        goto L4;
    }

    // trace_local[store_addr]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:63:13+10
    assume {:print "$track_local(29,6,3):", $t4} $t4 == $t4;

    // $t6 := fungible_asset::store_exists($t4) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:64:13+40
    assume {:print "$at(159,3177,3217)"} true;
    call $t6 := $1_fungible_asset_store_exists($t4);
    if ($abort_flag) {
        assume {:print "$at(159,3177,3217)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,6):", $t5} $t5 == $t5;
        goto L4;
    }

    // if ($t6) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:64:9+174
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:65:39+10
    assume {:print "$at(159,3259,3269)"} true;
L1:

    // $t2 := object::address_to_object<fungible_asset::FungibleStore>($t4) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:65:13+37
    assume {:print "$at(159,3233,3270)"} true;
    call $t2 := $1_object_address_to_object'$1_fungible_asset_FungibleStore'($t4);
    if ($abort_flag) {
        assume {:print "$at(159,3233,3270)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,6):", $t5} $t5 == $t5;
        goto L4;
    }

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:64:9+174
    assume {:print "$at(159,3173,3347)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:67:34+5
    assume {:print "$at(159,3321,3326)"} true;
L0:

    // $t2 := primary_fungible_store::create_primary_store<#0>($t0, $t1) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:67:13+37
    assume {:print "$at(159,3300,3337)"} true;
    call $t2 := $1_primary_fungible_store_create_primary_store'$1_fungible_asset_Metadata'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(159,3300,3337)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(29,6):", $t5} $t5 == $t5;
        goto L4;
    }

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:64:9+174
    assume {:print "$at(159,3173,3347)"} true;
L2:

    // trace_return[0]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:64:9+174
    assume {:print "$at(159,3173,3347)"} true;
    assume {:print "$track_return(29,6,0):", $t2} $t2 == $t2;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:69:5+1
    assume {:print "$at(159,3352,3353)"} true;
L3:

    // return $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:69:5+1
    assume {:print "$at(159,3352,3353)"} true;
    $ret0 := $t2;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:69:5+1
L4:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:69:5+1
    assume {:print "$at(159,3352,3353)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun primary_fungible_store::primary_store<fungible_asset::Metadata> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:96:5+216
procedure {:inline 1} $1_primary_fungible_store_primary_store'$1_fungible_asset_Metadata'(_$t0: int, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: $1_object_Object'$1_fungible_asset_FungibleStore')
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t0: int;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_FungibleStore'': $1_object_Object'$1_fungible_asset_FungibleStore';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:96:5+1
    assume {:print "$at(159,4583,4584)"} true;
    assume {:print "$track_local(29,12,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:96:5+1
    assume {:print "$track_local(29,12,1):", $t1} $t1 == $t1;

    // $t2 := primary_fungible_store::primary_store_address<#0>($t0, $t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:97:21+38
    assume {:print "$at(159,4698,4736)"} true;
    call $t2 := $1_primary_fungible_store_primary_store_address'$1_fungible_asset_Metadata'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(159,4698,4736)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(29,12):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := object::address_to_object<fungible_asset::FungibleStore>($t2) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:98:9+47
    assume {:print "$at(159,4746,4793)"} true;
    call $t4 := $1_object_address_to_object'$1_fungible_asset_FungibleStore'($t2);
    if ($abort_flag) {
        assume {:print "$at(159,4746,4793)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(29,12):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:98:9+47
    assume {:print "$track_return(29,12,0):", $t4} $t4 == $t4;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:99:5+1
    assume {:print "$at(159,4798,4799)"} true;
L1:

    // return $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:99:5+1
    assume {:print "$at(159,4798,4799)"} true;
    $ret0 := $t4;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:99:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:99:5+1
    assume {:print "$at(159,4798,4799)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun primary_fungible_store::primary_store_address<fungible_asset::Metadata> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:89:5+230
procedure {:inline 1} $1_primary_fungible_store_primary_store_address'$1_fungible_asset_Metadata'(_$t0: int, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: int)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t0: int;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[owner]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:89:5+1
    assume {:print "$at(159,4275,4276)"} true;
    assume {:print "$track_local(29,13,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:89:5+1
    assume {:print "$track_local(29,13,1):", $t1} $t1 == $t1;

    // $t3 := object::object_address<#0>($t1) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:90:29+33
    assume {:print "$at(159,4392,4425)"} true;
    call $t3 := $1_object_object_address'$1_fungible_asset_Metadata'($t1);
    if ($abort_flag) {
        assume {:print "$at(159,4392,4425)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(29,13):", $t4} $t4 == $t4;
        goto L2;
    }

    // trace_local[metadata_addr]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:90:13+13
    assume {:print "$track_local(29,13,2):", $t3} $t3 == $t3;

    // $t5 := opaque begin: object::create_user_derived_object_address($t0, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:91:9+64
    assume {:print "$at(159,4435,4499)"} true;

    // assume WellFormed($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:91:9+64
    assume $IsValid'address'($t5);

    // assume Eq<address>($t5, object::spec_create_user_derived_object_address($t0, $t3)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:91:9+64
    assume $IsEqual'address'($t5, $1_object_spec_create_user_derived_object_address($t0, $t3));

    // $t5 := opaque end: object::create_user_derived_object_address($t0, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:91:9+64

    // trace_return[0]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:91:9+64
    assume {:print "$track_return(29,13,0):", $t5} $t5 == $t5;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:92:5+1
    assume {:print "$at(159,4504,4505)"} true;
L1:

    // return $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:92:5+1
    assume {:print "$at(159,4504,4505)"} true;
    $ret0 := $t5;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:92:5+1
L2:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:92:5+1
    assume {:print "$at(159,4504,4505)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun primary_fungible_store::primary_store_exists<fungible_asset::Metadata> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:103:5+171
procedure {:inline 1} $1_primary_fungible_store_primary_store_exists'$1_fungible_asset_Metadata'(_$t0: int, _$t1: $1_object_Object'$1_fungible_asset_Metadata') returns ($ret0: bool)
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t0: int;
    var $t1: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'address': int;
    var $temp_0'bool': bool;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[account]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:103:5+1
    assume {:print "$at(159,4882,4883)"} true;
    assume {:print "$track_local(29,14,0):", $t0} $t0 == $t0;

    // trace_local[metadata]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:103:5+1
    assume {:print "$track_local(29,14,1):", $t1} $t1 == $t1;

    // $t2 := primary_fungible_store::primary_store_address<#0>($t0, $t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:104:38+40
    assume {:print "$at(159,5006,5046)"} true;
    call $t2 := $1_primary_fungible_store_primary_store_address'$1_fungible_asset_Metadata'($t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(159,5006,5046)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(29,14):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := fungible_asset::store_exists($t2) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:104:9+70
    call $t4 := $1_fungible_asset_store_exists($t2);
    if ($abort_flag) {
        assume {:print "$at(159,4977,5047)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(29,14):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:104:9+70
    assume {:print "$track_return(29,14,0):", $t4} $t4 == $t4;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:105:5+1
    assume {:print "$at(159,5052,5053)"} true;
L1:

    // return $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:105:5+1
    assume {:print "$at(159,5052,5053)"} true;
    $ret0 := $t4;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:105:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/primary_fungible_store.move:105:5+1
    assume {:print "$at(159,5052,5053)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:72:10+234
function {:inline} $1_coin_spec_fun_supply_tracked'$1_aptos_coin_AptosCoin'(val: int, supply: $1_option_Option'$1_optional_aggregator_OptionalAggregator'): bool {
    ($1_option_spec_is_some'$1_optional_aggregator_OptionalAggregator'(supply) ==> $IsEqual'u64'(val, $1_optional_aggregator_optional_aggregator_value($1_option_spec_borrow'$1_optional_aggregator_OptionalAggregator'(supply))))
}

// struct coin::DepositEvent at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:202:5+64
datatype $1_coin_DepositEvent {
    $1_coin_DepositEvent($amount: int)
}
function {:inline} $Update'$1_coin_DepositEvent'_amount(s: $1_coin_DepositEvent, x: int): $1_coin_DepositEvent {
    $1_coin_DepositEvent(x)
}
function $IsValid'$1_coin_DepositEvent'(s: $1_coin_DepositEvent): bool {
    $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_coin_DepositEvent'(s1: $1_coin_DepositEvent, s2: $1_coin_DepositEvent): bool {
    s1 == s2
}

// struct coin::WithdrawEvent at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:207:5+65
datatype $1_coin_WithdrawEvent {
    $1_coin_WithdrawEvent($amount: int)
}
function {:inline} $Update'$1_coin_WithdrawEvent'_amount(s: $1_coin_WithdrawEvent, x: int): $1_coin_WithdrawEvent {
    $1_coin_WithdrawEvent(x)
}
function $IsValid'$1_coin_WithdrawEvent'(s: $1_coin_WithdrawEvent): bool {
    $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_coin_WithdrawEvent'(s1: $1_coin_WithdrawEvent, s2: $1_coin_WithdrawEvent): bool {
    s1 == s2
}

// struct coin::BurnCapability<aptos_coin::AptosCoin> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:238:5+58
datatype $1_coin_BurnCapability'$1_aptos_coin_AptosCoin' {
    $1_coin_BurnCapability'$1_aptos_coin_AptosCoin'($dummy_field: bool)
}
function {:inline} $Update'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''_dummy_field(s: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin', x: bool): $1_coin_BurnCapability'$1_aptos_coin_AptosCoin' {
    $1_coin_BurnCapability'$1_aptos_coin_AptosCoin'(x)
}
function $IsValid'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(s: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(s1: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin', s2: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}

// struct coin::Coin<aptos_coin::AptosCoin> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:120:5+112
datatype $1_coin_Coin'$1_aptos_coin_AptosCoin' {
    $1_coin_Coin'$1_aptos_coin_AptosCoin'($value: int)
}
function {:inline} $Update'$1_coin_Coin'$1_aptos_coin_AptosCoin''_value(s: $1_coin_Coin'$1_aptos_coin_AptosCoin', x: int): $1_coin_Coin'$1_aptos_coin_AptosCoin' {
    $1_coin_Coin'$1_aptos_coin_AptosCoin'(x)
}
function $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s: $1_coin_Coin'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'u64'(s->$value)
}
function {:inline} $IsEqual'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s1: $1_coin_Coin'$1_aptos_coin_AptosCoin', s2: $1_coin_Coin'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}

// struct coin::CoinConversionMap at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:241:5+111
datatype $1_coin_CoinConversionMap {
    $1_coin_CoinConversionMap($coin_to_fungible_asset_map: Table int ($1_object_Object'$1_fungible_asset_Metadata'))
}
function {:inline} $Update'$1_coin_CoinConversionMap'_coin_to_fungible_asset_map(s: $1_coin_CoinConversionMap, x: Table int ($1_object_Object'$1_fungible_asset_Metadata')): $1_coin_CoinConversionMap {
    $1_coin_CoinConversionMap(x)
}
function $IsValid'$1_coin_CoinConversionMap'(s: $1_coin_CoinConversionMap): bool {
    $IsValid'$1_table_Table'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata'''(s->$coin_to_fungible_asset_map)
}
function {:inline} $IsEqual'$1_coin_CoinConversionMap'(s1: $1_coin_CoinConversionMap, s2: $1_coin_CoinConversionMap): bool {
    s1 == s2
}
var $1_coin_CoinConversionMap_$memory: $Memory $1_coin_CoinConversionMap;

// struct coin::CoinDeposit at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:171:5+116
datatype $1_coin_CoinDeposit {
    $1_coin_CoinDeposit($coin_type: $1_string_String, $account: int, $amount: int)
}
function {:inline} $Update'$1_coin_CoinDeposit'_coin_type(s: $1_coin_CoinDeposit, x: $1_string_String): $1_coin_CoinDeposit {
    $1_coin_CoinDeposit(x, s->$account, s->$amount)
}
function {:inline} $Update'$1_coin_CoinDeposit'_account(s: $1_coin_CoinDeposit, x: int): $1_coin_CoinDeposit {
    $1_coin_CoinDeposit(s->$coin_type, x, s->$amount)
}
function {:inline} $Update'$1_coin_CoinDeposit'_amount(s: $1_coin_CoinDeposit, x: int): $1_coin_CoinDeposit {
    $1_coin_CoinDeposit(s->$coin_type, s->$account, x)
}
function $IsValid'$1_coin_CoinDeposit'(s: $1_coin_CoinDeposit): bool {
    $IsValid'$1_string_String'(s->$coin_type)
      && $IsValid'address'(s->$account)
      && $IsValid'u64'(s->$amount)
}
function {:inline} $IsEqual'$1_coin_CoinDeposit'(s1: $1_coin_CoinDeposit, s2: $1_coin_CoinDeposit): bool {
    $IsEqual'$1_string_String'(s1->$coin_type, s2->$coin_type)
    && $IsEqual'address'(s1->$account, s2->$account)
    && $IsEqual'u64'(s1->$amount, s2->$amount)}

// struct coin::CoinInfo<aptos_coin::AptosCoin> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:155:5+548
datatype $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'($name: $1_string_String, $symbol: $1_string_String, $decimals: int, $supply: $1_option_Option'$1_optional_aggregator_OptionalAggregator')
}
function {:inline} $Update'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''_name(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', x: $1_string_String): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'(x, s->$symbol, s->$decimals, s->$supply)
}
function {:inline} $Update'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''_symbol(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', x: $1_string_String): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'(s->$name, x, s->$decimals, s->$supply)
}
function {:inline} $Update'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''_decimals(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', x: int): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'(s->$name, s->$symbol, x, s->$supply)
}
function {:inline} $Update'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''_supply(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', x: $1_option_Option'$1_optional_aggregator_OptionalAggregator'): $1_coin_CoinInfo'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'(s->$name, s->$symbol, s->$decimals, x)
}
function $IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(s: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'$1_string_String'(s->$name)
      && $IsValid'$1_string_String'(s->$symbol)
      && $IsValid'u8'(s->$decimals)
      && $IsValid'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(s->$supply)
}
function {:inline} $IsEqual'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''(s1: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin', s2: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'): bool {
    $IsEqual'$1_string_String'(s1->$name, s2->$name)
    && $IsEqual'$1_string_String'(s1->$symbol, s2->$symbol)
    && $IsEqual'u8'(s1->$decimals, s2->$decimals)
    && $IsEqual'$1_option_Option'$1_optional_aggregator_OptionalAggregator''(s1->$supply, s2->$supply)}
var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory: $Memory $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';

// struct coin::CoinStore<aptos_coin::AptosCoin> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:138:5+206
datatype $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'($coin: $1_coin_Coin'$1_aptos_coin_AptosCoin', $frozen: bool, $deposit_events: $1_event_EventHandle'$1_coin_DepositEvent', $withdraw_events: $1_event_EventHandle'$1_coin_WithdrawEvent')
}
function {:inline} $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_coin(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', x: $1_coin_Coin'$1_aptos_coin_AptosCoin'): $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'(x, s->$frozen, s->$deposit_events, s->$withdraw_events)
}
function {:inline} $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_frozen(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', x: bool): $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'(s->$coin, x, s->$deposit_events, s->$withdraw_events)
}
function {:inline} $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_deposit_events(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', x: $1_event_EventHandle'$1_coin_DepositEvent'): $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'(s->$coin, s->$frozen, x, s->$withdraw_events)
}
function {:inline} $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_withdraw_events(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', x: $1_event_EventHandle'$1_coin_WithdrawEvent'): $1_coin_CoinStore'$1_aptos_coin_AptosCoin' {
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'(s->$coin, s->$frozen, s->$deposit_events, x)
}
function $IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(s: $1_coin_CoinStore'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'$1_coin_Coin'$1_aptos_coin_AptosCoin''(s->$coin)
      && $IsValid'bool'(s->$frozen)
      && $IsValid'$1_event_EventHandle'$1_coin_DepositEvent''(s->$deposit_events)
      && $IsValid'$1_event_EventHandle'$1_coin_WithdrawEvent''(s->$withdraw_events)
}
function {:inline} $IsEqual'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''(s1: $1_coin_CoinStore'$1_aptos_coin_AptosCoin', s2: $1_coin_CoinStore'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}
var $1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory: $Memory $1_coin_CoinStore'$1_aptos_coin_AptosCoin';

// struct coin::MigrationFlag at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:229:5+31
datatype $1_coin_MigrationFlag {
    $1_coin_MigrationFlag($dummy_field: bool)
}
function {:inline} $Update'$1_coin_MigrationFlag'_dummy_field(s: $1_coin_MigrationFlag, x: bool): $1_coin_MigrationFlag {
    $1_coin_MigrationFlag(x)
}
function $IsValid'$1_coin_MigrationFlag'(s: $1_coin_MigrationFlag): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_coin_MigrationFlag'(s1: $1_coin_MigrationFlag, s2: $1_coin_MigrationFlag): bool {
    s1 == s2
}
var $1_coin_MigrationFlag_$memory: $Memory $1_coin_MigrationFlag;

// struct coin::MintCapability<aptos_coin::AptosCoin> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:232:5+58
datatype $1_coin_MintCapability'$1_aptos_coin_AptosCoin' {
    $1_coin_MintCapability'$1_aptos_coin_AptosCoin'($dummy_field: bool)
}
function {:inline} $Update'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''_dummy_field(s: $1_coin_MintCapability'$1_aptos_coin_AptosCoin', x: bool): $1_coin_MintCapability'$1_aptos_coin_AptosCoin' {
    $1_coin_MintCapability'$1_aptos_coin_AptosCoin'(x)
}
function $IsValid'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(s: $1_coin_MintCapability'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(s1: $1_coin_MintCapability'$1_aptos_coin_AptosCoin', s2: $1_coin_MintCapability'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}

// struct coin::PairCreation at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:222:5+122
datatype $1_coin_PairCreation {
    $1_coin_PairCreation($coin_type: $1_type_info_TypeInfo, $fungible_asset_metadata_address: int)
}
function {:inline} $Update'$1_coin_PairCreation'_coin_type(s: $1_coin_PairCreation, x: $1_type_info_TypeInfo): $1_coin_PairCreation {
    $1_coin_PairCreation(x, s->$fungible_asset_metadata_address)
}
function {:inline} $Update'$1_coin_PairCreation'_fungible_asset_metadata_address(s: $1_coin_PairCreation, x: int): $1_coin_PairCreation {
    $1_coin_PairCreation(s->$coin_type, x)
}
function $IsValid'$1_coin_PairCreation'(s: $1_coin_PairCreation): bool {
    $IsValid'$1_type_info_TypeInfo'(s->$coin_type)
      && $IsValid'address'(s->$fungible_asset_metadata_address)
}
function {:inline} $IsEqual'$1_coin_PairCreation'(s1: $1_coin_PairCreation, s2: $1_coin_PairCreation): bool {
    $IsEqual'$1_type_info_TypeInfo'(s1->$coin_type, s2->$coin_type)
    && $IsEqual'address'(s1->$fungible_asset_metadata_address, s2->$fungible_asset_metadata_address)}

// struct coin::PairedCoinType at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:247:5+61
datatype $1_coin_PairedCoinType {
    $1_coin_PairedCoinType($type: $1_type_info_TypeInfo)
}
function {:inline} $Update'$1_coin_PairedCoinType'_type(s: $1_coin_PairedCoinType, x: $1_type_info_TypeInfo): $1_coin_PairedCoinType {
    $1_coin_PairedCoinType(x)
}
function $IsValid'$1_coin_PairedCoinType'(s: $1_coin_PairedCoinType): bool {
    $IsValid'$1_type_info_TypeInfo'(s->$type)
}
function {:inline} $IsEqual'$1_coin_PairedCoinType'(s1: $1_coin_PairedCoinType, s2: $1_coin_PairedCoinType): bool {
    $IsEqual'$1_type_info_TypeInfo'(s1->$type, s2->$type)}
var $1_coin_PairedCoinType_$memory: $Memory $1_coin_PairedCoinType;

// struct coin::PairedFungibleAssetRefs at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:253:5+171
datatype $1_coin_PairedFungibleAssetRefs {
    $1_coin_PairedFungibleAssetRefs($mint_ref_opt: $1_option_Option'$1_fungible_asset_MintRef', $transfer_ref_opt: $1_option_Option'$1_fungible_asset_TransferRef', $burn_ref_opt: $1_option_Option'$1_fungible_asset_BurnRef')
}
function {:inline} $Update'$1_coin_PairedFungibleAssetRefs'_mint_ref_opt(s: $1_coin_PairedFungibleAssetRefs, x: $1_option_Option'$1_fungible_asset_MintRef'): $1_coin_PairedFungibleAssetRefs {
    $1_coin_PairedFungibleAssetRefs(x, s->$transfer_ref_opt, s->$burn_ref_opt)
}
function {:inline} $Update'$1_coin_PairedFungibleAssetRefs'_transfer_ref_opt(s: $1_coin_PairedFungibleAssetRefs, x: $1_option_Option'$1_fungible_asset_TransferRef'): $1_coin_PairedFungibleAssetRefs {
    $1_coin_PairedFungibleAssetRefs(s->$mint_ref_opt, x, s->$burn_ref_opt)
}
function {:inline} $Update'$1_coin_PairedFungibleAssetRefs'_burn_ref_opt(s: $1_coin_PairedFungibleAssetRefs, x: $1_option_Option'$1_fungible_asset_BurnRef'): $1_coin_PairedFungibleAssetRefs {
    $1_coin_PairedFungibleAssetRefs(s->$mint_ref_opt, s->$transfer_ref_opt, x)
}
function $IsValid'$1_coin_PairedFungibleAssetRefs'(s: $1_coin_PairedFungibleAssetRefs): bool {
    $IsValid'$1_option_Option'$1_fungible_asset_MintRef''(s->$mint_ref_opt)
      && $IsValid'$1_option_Option'$1_fungible_asset_TransferRef''(s->$transfer_ref_opt)
      && $IsValid'$1_option_Option'$1_fungible_asset_BurnRef''(s->$burn_ref_opt)
}
function {:inline} $IsEqual'$1_coin_PairedFungibleAssetRefs'(s1: $1_coin_PairedFungibleAssetRefs, s2: $1_coin_PairedFungibleAssetRefs): bool {
    $IsEqual'$1_option_Option'$1_fungible_asset_MintRef''(s1->$mint_ref_opt, s2->$mint_ref_opt)
    && $IsEqual'$1_option_Option'$1_fungible_asset_TransferRef''(s1->$transfer_ref_opt, s2->$transfer_ref_opt)
    && $IsEqual'$1_option_Option'$1_fungible_asset_BurnRef''(s1->$burn_ref_opt, s2->$burn_ref_opt)}
var $1_coin_PairedFungibleAssetRefs_$memory: $Memory $1_coin_PairedFungibleAssetRefs;

// struct coin::supply<aptos_coin::AptosCoin> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:63:9+29
datatype $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin' {
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'($v: int)
}
function {:inline} $Update'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''_v(s: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin', x: int): $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin' {
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(x)
}
function $IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(s: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'num'(s->$v)
}
function {:inline} $IsEqual'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''(s1: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin', s2: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}
var $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory: $Memory $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';

// struct coin::aggregate_supply<aptos_coin::AptosCoin> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:64:9+39
datatype $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin' {
    $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'($v: int)
}
function {:inline} $Update'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''_v(s: $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin', x: int): $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin' {
    $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'(x)
}
function $IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(s: $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'): bool {
    $IsValid'num'(s->$v)
}
function {:inline} $IsEqual'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''(s1: $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin', s2: $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'): bool {
    s1 == s2
}
var $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory: $Memory $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin';

// fun coin::extract<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:970:5+434
procedure {:inline 1} $1_coin_extract'$1_aptos_coin_AptosCoin'(_$t0: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin'), _$t1: int) returns ($ret0: $1_coin_Coin'$1_aptos_coin_AptosCoin', $ret1: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin'))
{
    // declare local variables
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $t8: int;
    var $t9: $Mutation ($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin');
    var $t10: int;
    var $t11: int;
    var $t12: $Mutation (int);
    var $t13: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $t14: int;
    var $t15: $Mutation ($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin');
    var $t16: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t0: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin');
    var $t1: int;
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[coin]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:970:5+1
    assume {:print "$at(106,41222,41223)"} true;
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(30,20,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // trace_local[amount]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:970:5+1
    assume {:print "$track_local(30,20,1):", $t1} $t1 == $t1;

    // $t2 := get_field<coin::Coin<#0>>.value($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:971:17+10
    assume {:print "$at(106,41325,41335)"} true;
    $t2 := $Dereference($t0)->$value;

    // $t3 := >=($t2, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:971:28+2
    call $t3 := $Ge($t2, $t1);

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:971:9+77
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:971:9+77
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:971:9+77
    assume {:print "$at(106,41317,41394)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:971:9+77
L0:

    // drop($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:971:9+77
    assume {:print "$at(106,41317,41394)"} true;

    // $t4 := 6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:971:63+21
    $t4 := 6;
    assume $IsValid'u64'($t4);

    // $t5 := error::invalid_argument($t4) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:971:39+46
    call $t5 := $1_error_invalid_argument($t4);
    if ($abort_flag) {
        assume {:print "$at(106,41347,41393)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(30,20):", $t6} $t6 == $t6;
        goto L4;
    }

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:971:9+77
    assume {:print "$at(106,41317,41394)"} true;
    assume {:print "$track_abort(30,20):", $t5} $t5 == $t5;

    // $t6 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:971:9+77
    $t6 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:971:9+77
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:972:9+81
    assume {:print "$at(106,41404,41485)"} true;
L2:

    // assume Identical($t7, pack coin::Ghost$supply<#0>(Sub(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), $t1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:973:13+52
    assume {:print "$at(106,41423,41475)"} true;
    assume ($t7 == $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v - $t1)));

    // assume Identical($t8, 0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:973:13+52
    assume ($t8 == 0);

    // $t9 := borrow_global<coin::Ghost$supply<#0>>($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:973:13+52
    if (!$ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t8));
    }

    // write_ref($t9, $t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:973:13+52
    $t9 := $UpdateMutation($t9, $t7);

    // write_back[coin::Ghost$supply<#0>@]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:973:13+52
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // $t10 := get_field<coin::Coin<#0>>.value($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:975:22+10
    assume {:print "$at(106,41508,41518)"} true;
    $t10 := $Dereference($t0)->$value;

    // $t11 := -($t10, $t1) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:975:33+1
    call $t11 := $Sub($t10, $t1);
    if ($abort_flag) {
        assume {:print "$at(106,41519,41520)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(30,20):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t12 := borrow_field<coin::Coin<#0>>.value($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:975:9+10
    $t12 := $ChildMutation($t0, 0, $Dereference($t0)->$value);

    // write_ref($t12, $t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:975:9+32
    $t12 := $UpdateMutation($t12, $t11);

    // write_back[Reference($t0).value (u64)]($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:975:9+32
    $t0 := $UpdateMutation($t0, $Update'$1_coin_Coin'$1_aptos_coin_AptosCoin''_value($Dereference($t0), $Dereference($t12)));

    // trace_local[coin]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:975:9+32
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(30,20,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // assume Identical($t13, pack coin::Ghost$supply<#0>(Add(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), $t1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:977:13+52
    assume {:print "$at(106,41556,41608)"} true;
    assume ($t13 == $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v + $t1)));

    // assume Identical($t14, 0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:977:13+52
    assume ($t14 == 0);

    // $t15 := borrow_global<coin::Ghost$supply<#0>>($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:977:13+52
    if (!$ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t14)) {
        call $ExecFailureAbort();
    } else {
        $t15 := $Mutation($Global($t14), EmptyVec(), $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t14));
    }

    // write_ref($t15, $t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:977:13+52
    $t15 := $UpdateMutation($t15, $t13);

    // write_back[coin::Ghost$supply<#0>@]($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:977:13+52
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t15),
        $Dereference($t15));

    // $t16 := pack coin::Coin<#0>($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:979:9+22
    assume {:print "$at(106,41628,41650)"} true;
    $t16 := $1_coin_Coin'$1_aptos_coin_AptosCoin'($t1);

    // trace_return[0]($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:979:9+22
    assume {:print "$track_return(30,20,0):", $t16} $t16 == $t16;

    // trace_local[coin]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:979:9+22
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(30,20,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:980:5+1
    assume {:print "$at(106,41655,41656)"} true;
L3:

    // return $t16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:980:5+1
    assume {:print "$at(106,41655,41656)"} true;
    $ret0 := $t16;
    $ret1 := $t0;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:980:5+1
L4:

    // abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:980:5+1
    assume {:print "$at(106,41655,41656)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun coin::burn<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:851:5+135
procedure {:inline 1} $1_coin_burn'$1_aptos_coin_AptosCoin'(_$t0: $1_coin_Coin'$1_aptos_coin_AptosCoin', _$t1: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin') returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t0: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t1: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';
    var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$modifies: [int]bool;
    var $temp_0'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin'': $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:249:9+58
    assume {:print "$at(107,11521,11579)"} true;
    assume ($t2 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // assume Identical($t3, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:205:9+58
    assume {:print "$at(107,10157,10215)"} true;
    assume ($t3 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // assume Identical($t4, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:187:9+58
    assume {:print "$at(107,9351,9409)"} true;
    assume ($t4 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // assume Identical($t5, select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global<coin::CoinInfo<#0>>($t4))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:188:9+59
    assume {:print "$at(107,9418,9477)"} true;
    assume ($t5 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t4)->$supply);

    // trace_local[coin]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:851:5+1
    assume {:print "$at(106,35816,35817)"} true;
    assume {:print "$track_local(30,2,0):", $t0} $t0 == $t0;

    // trace_local[_cap]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:851:5+1
    assume {:print "$track_local(30,2,1):", $t1} $t1 == $t1;

    // assume Identical($t6, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:260:9+58
    assume {:print "$at(107,11994,12052)"} true;
    assume ($t6 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t7 := coin::burn_internal<#0>($t0) on_abort goto L2 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:852:9+19
    assume {:print "$at(106,35925,35944)"} true;
    call $t7 := $1_coin_burn_internal'$1_aptos_coin_AptosCoin'($t0);
    if ($abort_flag) {
        assume {:print "$at(106,35925,35944)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,2):", $t8} $t8 == $t8;
        goto L2;
    }

    // drop($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:852:9+19

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:853:5+1
    assume {:print "$at(106,35950,35951)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:853:5+1
    assume {:print "$at(106,35950,35951)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:853:5+1
L2:

    // abort($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:853:5+1
    assume {:print "$at(106,35950,35951)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun coin::name<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:799:5+142
procedure {:inline 1} $1_coin_name'$1_aptos_coin_AptosCoin'() returns ($ret0: $1_string_String)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';
    var $t3: int;
    var $t4: $1_string_String;
    var $temp_0'$1_string_String': $1_string_String;
    var $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#79: $Memory $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#80: $Memory $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin';
    var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#81: $Memory $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';

    // bytecode translation starts here
    // assume Identical($t0, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:205:9+58
    assume {:print "$at(107,10157,10215)"} true;
    assume ($t0 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t1 := opaque begin: coin::coin_address<#0>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:800:43+24
    assume {:print "$at(106,33792,33816)"} true;

    // @81 := save_mem(coin::CoinInfo<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:800:43+24
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#81 := $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory;

    // @79 := save_mem(coin::supply<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:800:43+24
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#79 := $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory;

    // @80 := save_mem(coin::aggregate_supply<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:800:43+24
    $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#80 := $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory;

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:800:43+24
    assume $IsValid'address'($t1);

    // assume Implies(coin::spec_fun_supply_tracked[]<#0>(Add(select coin::Ghost$supply.v<#0>(global[@79]<coin::Ghost$supply<#0>>(0x0)), select coin::Ghost$aggregate_supply.v<#0>(global[@80]<coin::Ghost$aggregate_supply<#0>>(0x0))), select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global[@81]<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of[]<#0>())))), coin::spec_fun_supply_tracked<#0>(Add(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), select coin::Ghost$aggregate_supply.v<#0>(global<coin::Ghost$aggregate_supply<#0>>(0x0))), select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>()))))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:800:43+24
    assume ($1_coin_spec_fun_supply_tracked'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#79, 0)->$v + $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#80, 0)->$v), $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#81, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply) ==> $1_coin_spec_fun_supply_tracked'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v + $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v), $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply));

    // assume Eq<address>($t1, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:800:43+24
    assume $IsEqual'address'($t1, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t1 := opaque end: coin::coin_address<#0>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:800:43+24

    // $t2 := get_global<coin::CoinInfo<#0>>($t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:800:9+13
    if (!$ResourceExists($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(106,33758,33771)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(30,44):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := get_field<coin::CoinInfo<#0>>.name($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:800:9+64
    $t4 := $t2->$name;

    // trace_return[0]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:800:9+64
    assume {:print "$track_return(30,44,0):", $t4} $t4 == $t4;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:801:5+1
    assume {:print "$at(106,33827,33828)"} true;
L1:

    // return $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:801:5+1
    assume {:print "$at(106,33827,33828)"} true;
    $ret0 := $t4;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:801:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:801:5+1
    assume {:print "$at(106,33827,33828)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::symbol<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:805:5+146
procedure {:inline 1} $1_coin_symbol'$1_aptos_coin_AptosCoin'() returns ($ret0: $1_string_String)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';
    var $t3: int;
    var $t4: $1_string_String;
    var $temp_0'$1_string_String': $1_string_String;
    var $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#73: $Memory $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#74: $Memory $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin';
    var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#75: $Memory $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';

    // bytecode translation starts here
    // assume Identical($t0, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:205:9+58
    assume {:print "$at(107,10157,10215)"} true;
    assume ($t0 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t1 := opaque begin: coin::coin_address<#0>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:806:43+24
    assume {:print "$at(106,34033,34057)"} true;

    // @75 := save_mem(coin::CoinInfo<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:806:43+24
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#75 := $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory;

    // @73 := save_mem(coin::supply<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:806:43+24
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#73 := $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory;

    // @74 := save_mem(coin::aggregate_supply<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:806:43+24
    $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#74 := $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory;

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:806:43+24
    assume $IsValid'address'($t1);

    // assume Implies(coin::spec_fun_supply_tracked[]<#0>(Add(select coin::Ghost$supply.v<#0>(global[@73]<coin::Ghost$supply<#0>>(0x0)), select coin::Ghost$aggregate_supply.v<#0>(global[@74]<coin::Ghost$aggregate_supply<#0>>(0x0))), select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global[@75]<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of[]<#0>())))), coin::spec_fun_supply_tracked<#0>(Add(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), select coin::Ghost$aggregate_supply.v<#0>(global<coin::Ghost$aggregate_supply<#0>>(0x0))), select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>()))))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:806:43+24
    assume ($1_coin_spec_fun_supply_tracked'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#73, 0)->$v + $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#74, 0)->$v), $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#75, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply) ==> $1_coin_spec_fun_supply_tracked'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v + $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v), $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply));

    // assume Eq<address>($t1, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:806:43+24
    assume $IsEqual'address'($t1, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t1 := opaque end: coin::coin_address<#0>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:806:43+24

    // $t2 := get_global<coin::CoinInfo<#0>>($t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:806:9+13
    if (!$ResourceExists($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(106,33999,34012)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(30,55):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := get_field<coin::CoinInfo<#0>>.symbol($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:806:9+66
    $t4 := $t2->$symbol;

    // trace_return[0]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:806:9+66
    assume {:print "$track_return(30,55,0):", $t4} $t4 == $t4;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:807:5+1
    assume {:print "$at(106,34070,34071)"} true;
L1:

    // return $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:807:5+1
    assume {:print "$at(106,34070,34071)"} true;
    $ret0 := $t4;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:807:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:807:5+1
    assume {:print "$at(106,34070,34071)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::decimals<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:813:5+138
procedure {:inline 1} $1_coin_decimals'$1_aptos_coin_AptosCoin'() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';
    var $t3: int;
    var $t4: int;
    var $temp_0'u8': int;
    var $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#67: $Memory $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#68: $Memory $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin';
    var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#69: $Memory $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';

    // bytecode translation starts here
    // assume Identical($t0, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:205:9+58
    assume {:print "$at(107,10157,10215)"} true;
    assume ($t0 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t1 := opaque begin: coin::coin_address<#0>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:814:43+24
    assume {:print "$at(106,34402,34426)"} true;

    // @69 := save_mem(coin::CoinInfo<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:814:43+24
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#69 := $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory;

    // @67 := save_mem(coin::supply<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:814:43+24
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#67 := $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory;

    // @68 := save_mem(coin::aggregate_supply<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:814:43+24
    $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#68 := $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory;

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:814:43+24
    assume $IsValid'address'($t1);

    // assume Implies(coin::spec_fun_supply_tracked[]<#0>(Add(select coin::Ghost$supply.v<#0>(global[@67]<coin::Ghost$supply<#0>>(0x0)), select coin::Ghost$aggregate_supply.v<#0>(global[@68]<coin::Ghost$aggregate_supply<#0>>(0x0))), select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global[@69]<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of[]<#0>())))), coin::spec_fun_supply_tracked<#0>(Add(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), select coin::Ghost$aggregate_supply.v<#0>(global<coin::Ghost$aggregate_supply<#0>>(0x0))), select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>()))))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:814:43+24
    assume ($1_coin_spec_fun_supply_tracked'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#67, 0)->$v + $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#68, 0)->$v), $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#69, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply) ==> $1_coin_spec_fun_supply_tracked'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v + $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v), $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply));

    // assume Eq<address>($t1, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:814:43+24
    assume $IsEqual'address'($t1, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t1 := opaque end: coin::coin_address<#0>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:814:43+24

    // $t2 := get_global<coin::CoinInfo<#0>>($t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:814:9+13
    if (!$ResourceExists($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(106,34368,34381)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(30,12):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := get_field<coin::CoinInfo<#0>>.decimals($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:814:9+68
    $t4 := $t2->$decimals;

    // trace_return[0]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:814:9+68
    assume {:print "$track_return(30,12,0):", $t4} $t4 == $t4;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:815:5+1
    assume {:print "$at(106,34441,34442)"} true;
L1:

    // return $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:815:5+1
    assume {:print "$at(106,34441,34442)"} true;
    $ret0 := $t4;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:815:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:815:5+1
    assume {:print "$at(106,34441,34442)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun coin::burn_from<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:860:5+1107
procedure {:inline 1} $1_coin_burn_from'$1_aptos_coin_AptosCoin'(_$t0: int, _$t1: int, _$t2: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin') returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation ($1_option_Option'$1_fungible_asset_BurnRef');
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $t14: $1_object_Object'$1_fungible_asset_Metadata';
    var $t15: int;
    var $t16: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $t17: int;
    var $t18: int;
    var $t19: $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $t20: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t21: $1_optional_aggregator_OptionalAggregator;
    var $t22: int;
    var $t23: int;
    var $t24: bool;
    var $t25: bool;
    var $t26: $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $t27: int;
    var $t28: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t29: int;
    var $t30: bool;
    var $t31: int;
    var $t32: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $t33: bool;
    var $t34: $1_object_Object'$1_fungible_asset_Metadata';
    var $t35: bool;
    var $t36: bool;
    var $t37: int;
    var $t38: int;
    var $t39: int;
    var $t40: bool;
    var $t41: $Mutation ($1_coin_CoinStore'$1_aptos_coin_AptosCoin');
    var $t42: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin');
    var $t43: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t44: int;
    var $t45: int;
    var $t46: int;
    var $t47: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t48: int;
    var $t49: bool;
    var $t50: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $t51: bool;
    var $t52: int;
    var $t53: int;
    var $t54: $1_object_Object'$1_fungible_asset_Metadata';
    var $t55: bool;
    var $t56: int;
    var $t57: bool;
    var $t58: int;
    var $t59: int;
    var $t60: $Mutation ($1_coin_PairedFungibleAssetRefs);
    var $t61: $Mutation ($1_option_Option'$1_fungible_asset_BurnRef');
    var $t62: $1_option_Option'$1_fungible_asset_BurnRef';
    var $t63: bool;
    var $t64: int;
    var $t65: int;
    var $t66: $1_option_Option'$1_fungible_asset_BurnRef';
    var $t67: $1_fungible_asset_BurnRef;
    var $t68: bool;
    var $t69: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $t70: $1_object_Object'$1_fungible_asset_Metadata';
    var $t71: bool;
    var $t72: $1_object_Object'$1_fungible_asset_FungibleStore';
    var $t0: int;
    var $t1: int;
    var $t2: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';
    var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$modifies: [int]bool;
    var $1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$modifies: [int]bool;
    var $temp_0'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin'': $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_option_Option'$1_fungible_asset_BurnRef'': $1_option_Option'$1_fungible_asset_BurnRef';
    var $temp_0'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata''': $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // bytecode translation starts here
    // assume Identical($t18, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:271:9+58
    assume {:print "$at(107,12303,12361)"} true;
    assume ($t18 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // assume Identical($t19, global<coin::CoinStore<#0>>($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:272:9+59
    assume {:print "$at(107,12370,12429)"} true;
    assume ($t19 == $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0));

    // assume Identical($t20, select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global<coin::CoinInfo<#0>>($t18))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:283:9+59
    assume {:print "$at(107,12858,12917)"} true;
    assume ($t20 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t18)->$supply);

    // assume Identical($t21, option::spec_borrow<optional_aggregator::OptionalAggregator>($t20)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:284:9+52
    assume {:print "$at(107,12926,12978)"} true;
    assume ($t21 == $1_option_spec_borrow'$1_optional_aggregator_OptionalAggregator'($t20));

    // assume Identical($t22, optional_aggregator::optional_aggregator_value($t21)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:285:9+72
    assume {:print "$at(107,12987,13059)"} true;
    assume ($t22 == $1_optional_aggregator_optional_aggregator_value($t21));

    // trace_local[account_addr]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:860:5+1
    assume {:print "$at(106,36312,36313)"} true;
    assume {:print "$track_local(30,3,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:860:5+1
    assume {:print "$track_local(30,3,1):", $t1} $t1 == $t1;

    // trace_local[burn_cap]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:860:5+1
    assume {:print "$track_local(30,3,2):", $t2} $t2 == $t2;

    // $t23 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:866:23+1
    assume {:print "$at(106,36663,36664)"} true;
    $t23 := 0;
    assume $IsValid'u64'($t23);

    // $t24 := ==($t1, $t23) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:866:20+2
    $t24 := $IsEqual'u64'($t1, $t23);

    // if ($t24) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:866:9+47
    if ($t24) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:867:13+6
    assume {:print "$at(106,36680,36686)"} true;
L1:

    // goto L28 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:867:13+6
    assume {:print "$at(106,36680,36686)"} true;
    goto L28;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:871:13+12
    assume {:print "$at(106,36806,36818)"} true;
L0:

    // trace_local[amount#110]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:648:9+6
    assume {:print "$at(106,27434,27440)"} true;
    assume {:print "$track_local(30,3,8):", $t1} $t1 == $t1;

    // trace_local[account_addr#109]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:647:9+12
    assume {:print "$at(106,27403,27415)"} true;
    assume {:print "$track_local(30,3,7):", $t0} $t0 == $t0;

    // trace_local[owner#113]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:756:39+5
    assume {:print "$at(106,32145,32150)"} true;
    assume {:print "$track_local(30,3,17):", $t0} $t0 == $t0;

    // $t25 := exists<coin::CoinStore<#0>>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:757:13+6
    assume {:print "$at(106,32180,32186)"} true;
    $t25 := $ResourceExists($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0);

    // if ($t25) goto L3 else goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:757:9+147
    if ($t25) { goto L3; } else { goto L2; }

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:758:48+5
    assume {:print "$at(106,32265,32270)"} true;
L3:

    // $t26 := get_global<coin::CoinStore<#0>>($t0) on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:758:13+13
    assume {:print "$at(106,32230,32243)"} true;
    if (!$ResourceExists($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t26 := $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(106,32230,32243)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // $t28 := get_field<coin::CoinStore<#0>>.coin($t26) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:758:13+46
    $t28 := $t26->$coin;

    // $t3 := get_field<coin::Coin<#0>>.value($t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:758:13+52
    $t3 := $t28->$value;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:757:9+147
    assume {:print "$at(106,32176,32323)"} true;
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:760:13+1
    assume {:print "$at(106,32312,32313)"} true;
L2:

    // $t29 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:760:13+1
    assume {:print "$at(106,32312,32313)"} true;
    $t29 := 0;
    assume $IsValid'u64'($t29);

    // $t3 := $t29 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:757:9+147
    assume {:print "$at(106,32176,32323)"} true;
    $t3 := $t29;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:757:9+147
L4:

    // trace_local[coin_balance#111]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:650:13+12
    assume {:print "$at(106,27478,27490)"} true;
    assume {:print "$track_local(30,3,11):", $t3} $t3 == $t3;

    // $t30 := >=($t3, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:651:26+2
    assume {:print "$at(106,27556,27558)"} true;
    call $t30 := $Ge($t3, $t1);

    // if ($t30) goto L6 else goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:651:9+460
    if ($t30) { goto L6; } else { goto L5; }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:652:14+6
    assume {:print "$at(106,27582,27588)"} true;
L6:

    // $t31 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:652:22+1
    assume {:print "$at(106,27590,27591)"} true;
    $t31 := 0;
    assume $IsValid'u64'($t31);

    // $t6 := $t31 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:651:9+460
    assume {:print "$at(106,27539,27999)"} true;
    $t6 := $t31;

    // $t5 := $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:651:9+460
    $t5 := $t1;

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:651:9+460
    goto L7;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:654:28+27
    assume {:print "$at(106,27637,27664)"} true;
L5:

    // $t32 := coin::paired_metadata<#0>() on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:654:28+27
    assume {:print "$at(106,27637,27664)"} true;
    call $t32 := $1_coin_paired_metadata'$1_aptos_coin_AptosCoin'();
    if ($abort_flag) {
        assume {:print "$at(106,27637,27664)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // trace_local[metadata#112]($t32) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:654:17+8
    assume {:print "$track_local(30,3,13):", $t32} $t32 == $t32;

    // $t33 := opaque begin: option::is_some<object::Object<fungible_asset::Metadata>>($t32) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:655:17+26
    assume {:print "$at(106,27682,27708)"} true;

    // assume WellFormed($t33) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:655:17+26
    assume $IsValid'bool'($t33);

    // assume Eq<bool>($t33, option::spec_is_some<object::Object<fungible_asset::Metadata>>($t32)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:655:17+26
    assume $IsEqual'bool'($t33, $1_option_spec_is_some'$1_object_Object'$1_fungible_asset_Metadata''($t32));

    // $t33 := opaque end: option::is_some<object::Object<fungible_asset::Metadata>>($t32) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:655:17+26

    // if ($t33) goto L9 else goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:655:17+166
    if ($t33) { goto L9; } else { goto L8; }

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:656:17+12
    assume {:print "$at(106,27774,27786)"} true;
L9:

    // $t34 := opaque begin: option::destroy_some<object::Object<fungible_asset::Metadata>>($t32) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:657:17+30
    assume {:print "$at(106,27804,27834)"} true;

    // assume Identical($t35, option::spec_is_none<object::Object<fungible_asset::Metadata>>($t32)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:657:17+30
    assume ($t35 == $1_option_spec_is_none'$1_object_Object'$1_fungible_asset_Metadata''($t32));

    // if ($t35) goto L31 else goto L30 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:657:17+30
    if ($t35) { goto L31; } else { goto L30; }

    // label L31 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:657:17+30
L31:

    // assume And(option::spec_is_none<object::Object<fungible_asset::Metadata>>($t32), Eq(262145, $t27)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:657:17+30
    assume {:print "$at(106,27804,27834)"} true;
    assume ($1_option_spec_is_none'$1_object_Object'$1_fungible_asset_Metadata''($t32) && $IsEqual'num'(262145, $t27));

    // trace_abort($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:657:17+30
    assume {:print "$at(106,27804,27834)"} true;
    assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;

    // goto L29 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:657:17+30
    goto L29;

    // label L30 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:657:17+30
L30:

    // assume WellFormed($t34) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:657:17+30
    assume {:print "$at(106,27804,27834)"} true;
    assume $IsValid'$1_object_Object'$1_fungible_asset_Metadata''($t34);

    // assume Eq<object::Object<fungible_asset::Metadata>>($t34, option::spec_borrow<object::Object<fungible_asset::Metadata>>($t32)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:657:17+30
    assume $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t34, $1_option_spec_borrow'$1_object_Object'$1_fungible_asset_Metadata''($t32));

    // $t34 := opaque end: option::destroy_some<object::Object<fungible_asset::Metadata>>($t32) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:657:17+30

    // $t4 := primary_fungible_store::primary_store_exists<fungible_asset::Metadata>($t0, $t34) on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:655:47+136
    assume {:print "$at(106,27712,27848)"} true;
    call $t4 := $1_primary_fungible_store_primary_store_exists'$1_fungible_asset_Metadata'($t0, $t34);
    if ($abort_flag) {
        assume {:print "$at(106,27712,27848)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:655:17+166
    goto L10;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:655:17+166
L8:

    // $t36 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:655:17+166
    assume {:print "$at(106,27682,27848)"} true;
    $t36 := false;
    assume $IsValid'bool'($t36);

    // $t4 := $t36 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:655:17+166
    $t4 := $t36;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:655:17+166
L10:

    // if ($t4) goto L12 else goto L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:655:13+311
    assume {:print "$at(106,27678,27989)"} true;
    if ($t4) { goto L12; } else { goto L11; }

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:655:13+311
L12:

    // goto L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:655:13+311
    assume {:print "$at(106,27678,27989)"} true;
    goto L13;

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:661:17+52
    assume {:print "$at(106,27937,27989)"} true;
L11:

    // $t37 := 6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:661:47+21
    assume {:print "$at(106,27967,27988)"} true;
    $t37 := 6;
    assume $IsValid'u64'($t37);

    // $t38 := error::invalid_argument($t37) on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:661:23+46
    call $t38 := $1_error_invalid_argument($t37);
    if ($abort_flag) {
        assume {:print "$at(106,27943,27989)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // trace_abort($t38) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:661:17+52
    assume {:print "$at(106,27937,27989)"} true;
    assume {:print "$track_abort(30,3):", $t38} $t38 == $t38;

    // $t27 := move($t38) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:661:17+52
    $t27 := $t38;

    // goto L29 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:661:17+52
    goto L29;

    // label L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:659:18+12
    assume {:print "$at(106,27867,27879)"} true;
L13:

    // $t6 := -($t1, $t3) on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:659:39+1
    assume {:print "$at(106,27888,27889)"} true;
    call $t6 := $Sub($t1, $t3);
    if ($abort_flag) {
        assume {:print "$at(106,27888,27889)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // $t5 := $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:651:9+460
    assume {:print "$at(106,27539,27999)"} true;
    $t5 := $t3;

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:651:9+460
L7:

    // trace_local[fa_amount_to_burn]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:870:35+17
    assume {:print "$at(106,36733,36750)"} true;
    assume {:print "$track_local(30,3,12):", $t6} $t6 == $t6;

    // trace_local[coin_amount_to_burn]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:870:14+19
    assume {:print "$track_local(30,3,10):", $t5} $t5 == $t5;

    // $t39 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:874:35+1
    assume {:print "$at(106,36884,36885)"} true;
    $t39 := 0;
    assume $IsValid'u64'($t39);

    // $t40 := >($t5, $t39) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:874:33+1
    call $t40 := $Gt($t5, $t39);

    // if ($t40) goto L15 else goto L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:874:9+248
    if ($t40) { goto L15; } else { goto L14; }

    // label L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:875:69+12
    assume {:print "$at(106,36957,36969)"} true;
L15:

    // $t41 := borrow_global<coin::CoinStore<#0>>($t0) on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:875:30+17
    assume {:print "$at(106,36918,36935)"} true;
    if (!$ResourceExists($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t41 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(106,36918,36935)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // $t42 := borrow_field<coin::CoinStore<#0>>.coin($t41) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:876:40+20
    assume {:print "$at(106,37011,37031)"} true;
    $t42 := $ChildMutation($t41, 0, $Dereference($t41)->$coin);

    // $t43 := coin::extract<#0>($t42, $t5) on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:876:32+50
    call $t43,$t42 := $1_coin_extract'$1_aptos_coin_AptosCoin'($t42, $t5);
    if ($abort_flag) {
        assume {:print "$at(106,37003,37053)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // write_back[Reference($t41).coin (coin::Coin<#0>)]($t42) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:876:32+50
    $t41 := $UpdateMutation($t41, $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_coin($Dereference($t41), $Dereference($t42)));

    // write_back[coin::CoinStore<#0>@]($t41) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:876:32+50
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t41),
        $Dereference($t41));

    // assume Identical($t44, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:249:9+58
    assume {:print "$at(107,11521,11579)"} true;
    assume ($t44 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // assume Identical($t45, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:205:9+58
    assume {:print "$at(107,10157,10215)"} true;
    assume ($t45 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // assume Identical($t46, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:187:9+58
    assume {:print "$at(107,9351,9409)"} true;
    assume ($t46 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // assume Identical($t47, select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global<coin::CoinInfo<#0>>($t46))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:188:9+59
    assume {:print "$at(107,9418,9477)"} true;
    assume ($t47 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t46)->$supply);

    // coin::burn<#0>($t43, $t2) on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:877:13+28
    assume {:print "$at(106,37067,37095)"} true;
    call $1_coin_burn'$1_aptos_coin_AptosCoin'($t43, $t2);
    if ($abort_flag) {
        assume {:print "$at(106,37067,37095)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // label L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:879:13+17
    assume {:print "$at(106,37120,37137)"} true;
L14:

    // $t48 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:879:33+1
    assume {:print "$at(106,37140,37141)"} true;
    $t48 := 0;
    assume $IsValid'u64'($t48);

    // $t49 := >($t6, $t48) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:879:31+1
    call $t49 := $Gt($t6, $t48);

    // if ($t49) goto L17 else goto L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:879:9+296
    if ($t49) { goto L17; } else { goto L16; }

    // label L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:881:40+8
    assume {:print "$at(106,37223,37231)"} true;
L17:

    // $t50 := coin::paired_metadata<#0>() on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:406:28+27
    assume {:print "$at(106,15651,15678)"} true;
    call $t50 := $1_coin_paired_metadata'$1_aptos_coin_AptosCoin'();
    if ($abort_flag) {
        assume {:print "$at(106,15651,15678)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // trace_local[metadata_opt#118]($t50) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:406:13+12
    assume {:print "$track_local(30,3,16):", $t50} $t50 == $t50;

    // $t51 := opaque begin: option::is_some<object::Object<fungible_asset::Metadata>>($t50) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:17+30
    assume {:print "$at(106,15696,15726)"} true;

    // assume WellFormed($t51) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:17+30
    assume $IsValid'bool'($t51);

    // assume Eq<bool>($t51, option::spec_is_some<object::Object<fungible_asset::Metadata>>($t50)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:17+30
    assume $IsEqual'bool'($t51, $1_option_spec_is_some'$1_object_Object'$1_fungible_asset_Metadata''($t50));

    // $t51 := opaque end: option::is_some<object::Object<fungible_asset::Metadata>>($t50) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:17+30

    // if ($t51) goto L19 else goto L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:9+81
    if ($t51) { goto L19; } else { goto L18; }

    // label L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:9+81
L19:

    // goto L20 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:9+81
    assume {:print "$at(106,15688,15769)"} true;
    goto L20;

    // label L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:66+22
L18:

    // $t52 := 16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:66+22
    assume {:print "$at(106,15745,15767)"} true;
    $t52 := 16;
    assume $IsValid'u64'($t52);

    // $t53 := error::not_found($t52) on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:49+40
    call $t53 := $1_error_not_found($t52);
    if ($abort_flag) {
        assume {:print "$at(106,15728,15768)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // trace_abort($t53) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:9+81
    assume {:print "$at(106,15688,15769)"} true;
    assume {:print "$track_abort(30,3):", $t53} $t53 == $t53;

    // $t27 := move($t53) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:9+81
    $t27 := $t53;

    // goto L29 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:9+81
    goto L29;

    // label L20 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:30+12
    assume {:print "$at(106,15800,15812)"} true;
L20:

    // $t54 := opaque begin: option::destroy_some<object::Object<fungible_asset::Metadata>>($t50) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    assume {:print "$at(106,15779,15813)"} true;

    // assume Identical($t55, option::spec_is_none<object::Object<fungible_asset::Metadata>>($t50)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    assume ($t55 == $1_option_spec_is_none'$1_object_Object'$1_fungible_asset_Metadata''($t50));

    // if ($t55) goto L33 else goto L32 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    if ($t55) { goto L33; } else { goto L32; }

    // label L33 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
L33:

    // assume And(option::spec_is_none<object::Object<fungible_asset::Metadata>>($t50), Eq(262145, $t27)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    assume {:print "$at(106,15779,15813)"} true;
    assume ($1_option_spec_is_none'$1_object_Object'$1_fungible_asset_Metadata''($t50) && $IsEqual'num'(262145, $t27));

    // trace_abort($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    assume {:print "$at(106,15779,15813)"} true;
    assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;

    // goto L29 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    goto L29;

    // label L32 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
L32:

    // assume WellFormed($t54) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    assume {:print "$at(106,15779,15813)"} true;
    assume $IsValid'$1_object_Object'$1_fungible_asset_Metadata''($t54);

    // assume Eq<object::Object<fungible_asset::Metadata>>($t54, option::spec_borrow<object::Object<fungible_asset::Metadata>>($t50)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    assume $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t54, $1_option_spec_borrow'$1_object_Object'$1_fungible_asset_Metadata''($t50));

    // $t54 := opaque end: option::destroy_some<object::Object<fungible_asset::Metadata>>($t50) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34

    // trace_local[metadata#115]($t54) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:533:13+8
    assume {:print "$at(106,22602,22610)"} true;
    assume {:print "$track_local(30,3,14):", $t54} $t54 == $t54;

    // $t56 := object::object_address<fungible_asset::Metadata>($t54) on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:534:29+25
    assume {:print "$at(106,22684,22709)"} true;
    call $t56 := $1_object_object_address'$1_fungible_asset_Metadata'($t54);
    if ($abort_flag) {
        assume {:print "$at(106,22684,22709)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // trace_local[metadata_addr#116]($t56) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:534:13+13
    assume {:print "$track_local(30,3,15):", $t56} $t56 == $t56;

    // $t57 := exists<coin::PairedFungibleAssetRefs>($t56) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:535:17+6
    assume {:print "$at(106,22727,22733)"} true;
    $t57 := $ResourceExists($1_coin_PairedFungibleAssetRefs_$memory, $t56);

    // if ($t57) goto L22 else goto L21 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:535:9+111
    if ($t57) { goto L22; } else { goto L21; }

    // label L22 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:535:9+111
L22:

    // goto L23 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:535:9+111
    assume {:print "$at(106,22719,22830)"} true;
    goto L23;

    // label L21 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:535:81+37
L21:

    // $t58 := 19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:535:81+37
    assume {:print "$at(106,22791,22828)"} true;
    $t58 := 19;
    assume $IsValid'u64'($t58);

    // $t59 := error::internal($t58) on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:535:65+54
    call $t59 := $1_error_internal($t58);
    if ($abort_flag) {
        assume {:print "$at(106,22775,22829)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // trace_abort($t59) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:535:9+111
    assume {:print "$at(106,22719,22830)"} true;
    assume {:print "$track_abort(30,3):", $t59} $t59 == $t59;

    // $t27 := move($t59) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:535:9+111
    $t27 := $t59;

    // goto L29 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:535:9+111
    goto L29;

    // label L23 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:536:76+13
    assume {:print "$at(106,22907,22920)"} true;
L23:

    // $t60 := borrow_global<coin::PairedFungibleAssetRefs>($t56) on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:536:33+17
    assume {:print "$at(106,22864,22881)"} true;
    if (!$ResourceExists($1_coin_PairedFungibleAssetRefs_$memory, $t56)) {
        call $ExecFailureAbort();
    } else {
        $t60 := $Mutation($Global($t56), EmptyVec(), $ResourceValue($1_coin_PairedFungibleAssetRefs_$memory, $t56));
    }
    if ($abort_flag) {
        assume {:print "$at(106,22864,22881)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // $t61 := borrow_field<coin::PairedFungibleAssetRefs>.burn_ref_opt($t60) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:536:28+75
    $t61 := $ChildMutation($t60, 2, $Dereference($t60)->$burn_ref_opt);

    // trace_local[burn_ref_opt#117]($t61) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:536:13+12
    $temp_0'$1_option_Option'$1_fungible_asset_BurnRef'' := $Dereference($t61);
    assume {:print "$track_local(30,3,9):", $temp_0'$1_option_Option'$1_fungible_asset_BurnRef''} $temp_0'$1_option_Option'$1_fungible_asset_BurnRef'' == $temp_0'$1_option_Option'$1_fungible_asset_BurnRef'';

    // $t62 := read_ref($t61) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:33+12
    assume {:print "$at(106,22968,22980)"} true;
    $t62 := $Dereference($t61);

    // $t63 := opaque begin: option::is_some<fungible_asset::BurnRef>($t62) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:17+29

    // assume WellFormed($t63) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:17+29
    assume $IsValid'bool'($t63);

    // assume Eq<bool>($t63, option::spec_is_some<fungible_asset::BurnRef>($t62)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:17+29
    assume $IsEqual'bool'($t63, $1_option_spec_is_some'$1_fungible_asset_BurnRef'($t62));

    // $t63 := opaque end: option::is_some<fungible_asset::BurnRef>($t62) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:17+29

    // if ($t63) goto L25 else goto L24 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:9+77
    if ($t63) { goto L25; } else { goto L24; }

    // label L25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:9+77
L25:

    // goto L26 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:9+77
    assume {:print "$at(106,22944,23021)"} true;
    goto L26;

    // label L24 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:9+77
L24:

    // pack_ref_deep($t60) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:9+77
    assume {:print "$at(106,22944,23021)"} true;

    // drop($t61) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:9+77

    // $t64 := 25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:65+19
    $t64 := 25;
    assume $IsValid'u64'($t64);

    // $t65 := error::not_found($t64) on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:48+37
    call $t65 := $1_error_not_found($t64);
    if ($abort_flag) {
        assume {:print "$at(106,22983,23020)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // trace_abort($t65) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:9+77
    assume {:print "$at(106,22944,23021)"} true;
    assume {:print "$track_abort(30,3):", $t65} $t65 == $t65;

    // $t27 := move($t65) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:9+77
    $t27 := $t65;

    // goto L29 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:537:9+77
    goto L29;

    // label L26 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:24+12
    assume {:print "$at(106,23046,23058)"} true;
L26:

    // $t66 := read_ref($t61) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:24+12
    assume {:print "$at(106,23046,23058)"} true;
    $t66 := $Dereference($t61);

    // pack_ref_deep($t60) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:24+12

    // $t67 := opaque begin: option::borrow<fungible_asset::BurnRef>($t66) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+28

    // assume Identical($t68, option::spec_is_none<fungible_asset::BurnRef>($t66)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+28
    assume ($t68 == $1_option_spec_is_none'$1_fungible_asset_BurnRef'($t66));

    // if ($t68) goto L35 else goto L34 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+28
    if ($t68) { goto L35; } else { goto L34; }

    // label L35 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+28
L35:

    // assume And(option::spec_is_none<fungible_asset::BurnRef>($t66), Eq(262145, $t27)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+28
    assume {:print "$at(106,23031,23059)"} true;
    assume ($1_option_spec_is_none'$1_fungible_asset_BurnRef'($t66) && $IsEqual'num'(262145, $t27));

    // trace_abort($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+28
    assume {:print "$at(106,23031,23059)"} true;
    assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;

    // goto L29 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+28
    goto L29;

    // label L34 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+28
L34:

    // assume WellFormed($t67) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+28
    assume {:print "$at(106,23031,23059)"} true;
    assume $IsValid'$1_fungible_asset_BurnRef'($t67);

    // assume Eq<fungible_asset::BurnRef>($t67, option::spec_borrow<fungible_asset::BurnRef>($t66)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+28
    assume $IsEqual'$1_fungible_asset_BurnRef'($t67, $1_option_spec_borrow'$1_fungible_asset_BurnRef'($t66));

    // $t67 := opaque end: option::borrow<fungible_asset::BurnRef>($t66) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:538:9+28

    // $t69 := coin::paired_metadata<#0>() on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:882:90+27
    assume {:print "$at(106,37323,37350)"} true;
    call $t69 := $1_coin_paired_metadata'$1_aptos_coin_AptosCoin'();
    if ($abort_flag) {
        assume {:print "$at(106,37323,37350)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // $t70 := opaque begin: option::destroy_some<object::Object<fungible_asset::Metadata>>($t69) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:882:69+49

    // assume Identical($t71, option::spec_is_none<object::Object<fungible_asset::Metadata>>($t69)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:882:69+49
    assume ($t71 == $1_option_spec_is_none'$1_object_Object'$1_fungible_asset_Metadata''($t69));

    // if ($t71) goto L37 else goto L36 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:882:69+49
    if ($t71) { goto L37; } else { goto L36; }

    // label L37 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:882:69+49
L37:

    // assume And(option::spec_is_none<object::Object<fungible_asset::Metadata>>($t69), Eq(262145, $t27)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:882:69+49
    assume {:print "$at(106,37302,37351)"} true;
    assume ($1_option_spec_is_none'$1_object_Object'$1_fungible_asset_Metadata''($t69) && $IsEqual'num'(262145, $t27));

    // trace_abort($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:882:69+49
    assume {:print "$at(106,37302,37351)"} true;
    assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;

    // goto L29 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:882:69+49
    goto L29;

    // label L36 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:882:69+49
L36:

    // assume WellFormed($t70) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:882:69+49
    assume {:print "$at(106,37302,37351)"} true;
    assume $IsValid'$1_object_Object'$1_fungible_asset_Metadata''($t70);

    // assume Eq<object::Object<fungible_asset::Metadata>>($t70, option::spec_borrow<object::Object<fungible_asset::Metadata>>($t69)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:882:69+49
    assume $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t70, $1_option_spec_borrow'$1_object_Object'$1_fungible_asset_Metadata''($t69));

    // $t70 := opaque end: option::destroy_some<object::Object<fungible_asset::Metadata>>($t69) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:882:69+49

    // $t72 := primary_fungible_store::primary_store<fungible_asset::Metadata>($t0, $t70) on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:882:17+102
    call $t72 := $1_primary_fungible_store_primary_store'$1_fungible_asset_Metadata'($t0, $t70);
    if ($abort_flag) {
        assume {:print "$at(106,37250,37352)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // fungible_asset::burn_from<fungible_asset::FungibleStore>($t67, $t72, $t6) on_abort goto L29 with $t27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:880:13+244
    assume {:print "$at(106,37157,37401)"} true;
    call $1_fungible_asset_burn_from'$1_fungible_asset_FungibleStore'($t67, $t72, $t6);
    if ($abort_flag) {
        assume {:print "$at(106,37157,37401)"} true;
        $t27 := $abort_code;
        assume {:print "$track_abort(30,3):", $t27} $t27 == $t27;
        goto L29;
    }

    // goto L27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:884:14+1
    assume {:print "$at(106,37401,37402)"} true;
    goto L27;

    // label L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:879:9+296
    assume {:print "$at(106,37116,37412)"} true;
L16:

    // label L27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:885:10+1
    assume {:print "$at(106,37412,37413)"} true;
L27:

    // label L28 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:886:5+1
    assume {:print "$at(106,37418,37419)"} true;
L28:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:886:5+1
    assume {:print "$at(106,37418,37419)"} true;
    return;

    // label L29 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:886:5+1
L29:

    // abort($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:886:5+1
    assume {:print "$at(106,37418,37419)"} true;
    $abort_code := $t27;
    $abort_flag := true;
    return;

}

// fun coin::burn_internal<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1260:5+574
procedure {:inline 1} $1_coin_burn_internal'$1_aptos_coin_AptosCoin'(_$t0: $1_coin_Coin'$1_aptos_coin_AptosCoin') returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: $Mutation ($1_option_Option'$1_optional_aggregator_OptionalAggregator');
    var $t3: int;
    var $t4: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $t5: int;
    var $t6: $Mutation ($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin');
    var $t7: int;
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: $Mutation ($1_coin_CoinInfo'$1_aptos_coin_AptosCoin');
    var $t12: int;
    var $t13: $Mutation ($1_option_Option'$1_optional_aggregator_OptionalAggregator');
    var $t14: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t15: bool;
    var $t16: $Mutation ($1_optional_aggregator_OptionalAggregator);
    var $t17: int;
    var $t0: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$modifies: [int]bool;
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'': $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $temp_0'u64': int;
    var $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#37: $Memory $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#38: $Memory $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin';
    var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#39: $Memory $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t3, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:260:9+58
    assume {:print "$at(107,11994,12052)"} true;
    assume ($t3 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // trace_local[coin]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1260:5+1
    assume {:print "$at(106,52435,52436)"} true;
    assume {:print "$track_local(30,4,0):", $t0} $t0 == $t0;

    // assume Identical($t4, pack coin::Ghost$supply<#0>(Sub(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), select coin::Coin.value<coin::Coin<#0>>($t0)))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1262:13+56
    assume {:print "$at(106,52537,52593)"} true;
    assume ($t4 == $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v - $t0->$value)));

    // assume Identical($t5, 0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1262:13+56
    assume ($t5 == 0);

    // $t6 := borrow_global<coin::Ghost$supply<#0>>($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1262:13+56
    if (!$ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $Mutation($Global($t5), EmptyVec(), $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t5));
    }

    // write_ref($t6, $t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1262:13+56
    $t6 := $UpdateMutation($t6, $t4);

    // write_back[coin::Ghost$supply<#0>@]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1262:13+56
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t6),
        $Dereference($t6));

    // $t7 := unpack coin::Coin<#0>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1264:13+22
    assume {:print "$at(106,52617,52639)"} true;
    $t7 := $t0->$value;

    // trace_local[amount]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1264:27+6
    assume {:print "$track_local(30,4,1):", $t7} $t7 == $t7;

    // $t8 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1265:23+1
    assume {:print "$at(106,52670,52671)"} true;
    $t8 := 0;
    assume $IsValid'u64'($t8);

    // $t9 := !=($t7, $t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1265:20+2
    $t9 := !$IsEqual'u64'($t7, $t8);

    // if ($t9) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1265:9+331
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1266:75+24
    assume {:print "$at(106,52749,52773)"} true;
L1:

    // $t10 := opaque begin: coin::coin_address<#0>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1266:75+24
    assume {:print "$at(106,52749,52773)"} true;

    // @39 := save_mem(coin::CoinInfo<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1266:75+24
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#39 := $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory;

    // @37 := save_mem(coin::supply<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1266:75+24
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#37 := $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory;

    // @38 := save_mem(coin::aggregate_supply<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1266:75+24
    $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#38 := $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory;

    // assume WellFormed($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1266:75+24
    assume $IsValid'address'($t10);

    // assume Implies(coin::spec_fun_supply_tracked[]<#0>(Add(select coin::Ghost$supply.v<#0>(global[@37]<coin::Ghost$supply<#0>>(0x0)), select coin::Ghost$aggregate_supply.v<#0>(global[@38]<coin::Ghost$aggregate_supply<#0>>(0x0))), select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global[@39]<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of[]<#0>())))), coin::spec_fun_supply_tracked<#0>(Add(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), select coin::Ghost$aggregate_supply.v<#0>(global<coin::Ghost$aggregate_supply<#0>>(0x0))), select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>()))))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1266:75+24
    assume ($1_coin_spec_fun_supply_tracked'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#37, 0)->$v + $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#38, 0)->$v), $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#39, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply) ==> $1_coin_spec_fun_supply_tracked'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v + $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v), $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply));

    // assume Eq<address>($t10, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1266:75+24
    assume $IsEqual'address'($t10, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t10 := opaque end: coin::coin_address<#0>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1266:75+24

    // $t11 := borrow_global<coin::CoinInfo<#0>>($t10) on_abort goto L5 with $t12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1266:37+17
    if (!$ResourceExists($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t10)) {
        call $ExecFailureAbort();
    } else {
        $t11 := $Mutation($Global($t10), EmptyVec(), $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t10));
    }
    if ($abort_flag) {
        assume {:print "$at(106,52711,52728)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(30,4):", $t12} $t12 == $t12;
        goto L5;
    }

    // $t13 := borrow_field<coin::CoinInfo<#0>>.supply($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1266:32+75
    $t13 := $ChildMutation($t11, 3, $Dereference($t11)->$supply);

    // trace_local[maybe_supply]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1266:17+12
    $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'' := $Dereference($t13);
    assume {:print "$track_local(30,4,2):", $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator''} $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'' == $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'';

    // $t14 := read_ref($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1267:33+12
    assume {:print "$at(106,52815,52827)"} true;
    $t14 := $Dereference($t13);

    // $t15 := opaque begin: option::is_some<optional_aggregator::OptionalAggregator>($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1267:17+29

    // assume WellFormed($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1267:17+29
    assume $IsValid'bool'($t15);

    // assume Eq<bool>($t15, option::spec_is_some<optional_aggregator::OptionalAggregator>($t14)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1267:17+29
    assume $IsEqual'bool'($t15, $1_option_spec_is_some'$1_optional_aggregator_OptionalAggregator'($t14));

    // $t15 := opaque end: option::is_some<optional_aggregator::OptionalAggregator>($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1267:17+29

    // if ($t15) goto L3 else goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1267:13+181
    if ($t15) { goto L3; } else { goto L2; }

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1268:49+12
    assume {:print "$at(106,52880,52892)"} true;
L3:

    // $t16 := option::borrow_mut<optional_aggregator::OptionalAggregator>($t13) on_abort goto L5 with $t12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1268:30+32
    assume {:print "$at(106,52861,52893)"} true;
    call $t16,$t13 := $1_option_borrow_mut'$1_optional_aggregator_OptionalAggregator'($t13);
    if ($abort_flag) {
        assume {:print "$at(106,52861,52893)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(30,4):", $t12} $t12 == $t12;
        goto L5;
    }

    // $t17 := (u128)($t7) on_abort goto L5 with $t12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1269:50+16
    assume {:print "$at(106,52944,52960)"} true;
    call $t17 := $CastU128($t7);
    if ($abort_flag) {
        assume {:print "$at(106,52944,52960)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(30,4):", $t12} $t12 == $t12;
        goto L5;
    }

    // optional_aggregator::sub($t16, $t17) on_abort goto L5 with $t12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1269:17+50
    call $t16 := $1_optional_aggregator_sub($t16, $t17);
    if ($abort_flag) {
        assume {:print "$at(106,52911,52961)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(30,4):", $t12} $t12 == $t12;
        goto L5;
    }

    // write_back[Reference($t13).vec (vector<optional_aggregator::OptionalAggregator>)/[]]($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1269:17+50
    $t13 := $UpdateMutation($t13, (var $$sel0 := $Dereference($t13)->$vec; $Update'$1_option_Option'$1_optional_aggregator_OptionalAggregator''_vec($Dereference($t13), UpdateVec($$sel0, ReadVec($t16->p, LenVec($t13->p) + 1), $Dereference($t16)))));

    // write_back[Reference($t11).supply (option::Option<optional_aggregator::OptionalAggregator>)]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1269:17+50
    $t11 := $UpdateMutation($t11, $Update'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''_supply($Dereference($t11), $Dereference($t13)));

    // pack_ref_deep($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1269:17+50

    // write_back[coin::CoinInfo<#0>@]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1269:17+50
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t11),
        $Dereference($t11));

    // goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1269:67+1
    goto L0;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1267:13+181
    assume {:print "$at(106,52795,52976)"} true;
L2:

    // pack_ref_deep($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1267:13+181
    assume {:print "$at(106,52795,52976)"} true;

    // drop($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1267:13+181

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1272:9+6
    assume {:print "$at(106,52997,53003)"} true;
L0:

    // trace_return[0]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1272:9+6
    assume {:print "$at(106,52997,53003)"} true;
    assume {:print "$track_return(30,4,0):", $t7} $t7 == $t7;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1273:5+1
    assume {:print "$at(106,53008,53009)"} true;
L4:

    // return $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1273:5+1
    assume {:print "$at(106,53008,53009)"} true;
    $ret0 := $t7;
    return;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1273:5+1
L5:

    // abort($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1273:5+1
    assume {:print "$at(106,53008,53009)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun coin::deposit<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:889:5+1322
procedure {:inline 1} $1_coin_deposit'$1_aptos_coin_AptosCoin'(_$t0: int, _$t1: $1_coin_Coin'$1_aptos_coin_AptosCoin') returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: bool;
    var $t4: bool;
    var $t5: $Mutation ($1_coin_CoinStore'$1_aptos_coin_AptosCoin');
    var $t6: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $t7: int;
    var $t8: $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $t9: bool;
    var $t10: $Mutation ($1_coin_CoinStore'$1_aptos_coin_AptosCoin');
    var $t11: int;
    var $t12: bool;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: bool;
    var $t17: $1_string_String;
    var $t18: int;
    var $t19: $1_coin_CoinDeposit;
    var $t20: $Mutation ($1_event_EventHandle'$1_coin_DepositEvent');
    var $t21: int;
    var $t22: $1_coin_DepositEvent;
    var $t23: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin');
    var $t24: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $t25: bool;
    var $t26: $1_object_Object'$1_fungible_asset_Metadata';
    var $t27: bool;
    var $t28: int;
    var $t29: bool;
    var $t30: bool;
    var $t31: bool;
    var $t32: bool;
    var $t33: bool;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: $1_fungible_asset_FungibleAsset;
    var $t0: int;
    var $t1: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$modifies: [int]bool;
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_coin_CoinStore'$1_aptos_coin_AptosCoin'': $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata''': $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $temp_0'address': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t8, global<coin::CoinStore<#0>>($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:336:9+59
    assume {:print "$at(107,14990,15049)"} true;
    assume ($t8 == $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0));

    // trace_local[account_addr]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:889:5+1
    assume {:print "$at(106,37506,37507)"} true;
    assume {:print "$track_local(30,13,0):", $t0} $t0 == $t0;

    // trace_local[coin]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:889:5+1
    assume {:print "$track_local(30,13,1):", $t1} $t1 == $t1;

    // $t9 := exists<coin::CoinStore<#0>>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:893:13+6
    assume {:print "$at(106,37664,37670)"} true;
    $t9 := $ResourceExists($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0);

    // if ($t9) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:893:9+1162
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:894:69+12
    assume {:print "$at(106,37777,37789)"} true;
L1:

    // $t10 := borrow_global<coin::CoinStore<#0>>($t0) on_abort goto L21 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:894:30+17
    assume {:print "$at(106,37738,37755)"} true;
    if (!$ResourceExists($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(106,37738,37755)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,13):", $t11} $t11 == $t11;
        goto L21;
    }

    // trace_local[coin_store]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:894:17+10
    $temp_0'$1_coin_CoinStore'$1_aptos_coin_AptosCoin'' := $Dereference($t10);
    assume {:print "$track_local(30,13,5):", $temp_0'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_CoinStore'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_CoinStore'$1_aptos_coin_AptosCoin'';

    // $t12 := get_field<coin::CoinStore<#0>>.frozen($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:896:18+17
    assume {:print "$at(106,37830,37847)"} true;
    $t12 := $Dereference($t10)->$frozen;

    // $t13 := !($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:896:17+1
    call $t13 := $Not($t12);

    // if ($t13) goto L3 else goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:895:13+109
    assume {:print "$at(106,37804,37913)"} true;
    if ($t13) { goto L3; } else { goto L2; }

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:895:13+109
L3:

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:895:13+109
    assume {:print "$at(106,37804,37913)"} true;
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:895:13+109
L2:

    // drop($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:895:13+109
    assume {:print "$at(106,37804,37913)"} true;

    // $t14 := 10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:897:42+7
    assume {:print "$at(106,37890,37897)"} true;
    $t14 := 10;
    assume $IsValid'u64'($t14);

    // $t15 := error::permission_denied($t14) on_abort goto L21 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:897:17+33
    call $t15 := $1_error_permission_denied($t14);
    if ($abort_flag) {
        assume {:print "$at(106,37865,37898)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,13):", $t11} $t11 == $t11;
        goto L21;
    }

    // trace_abort($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:895:13+109
    assume {:print "$at(106,37804,37913)"} true;
    assume {:print "$track_abort(30,13):", $t15} $t15 == $t15;

    // $t11 := move($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:895:13+109
    $t11 := $t15;

    // goto L21 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:895:13+109
    goto L21;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:899:17+47
    assume {:print "$at(106,37931,37978)"} true;
L4:

    // $t16 := features::module_event_migration_enabled() on_abort goto L21 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:899:17+47
    assume {:print "$at(106,37931,37978)"} true;
    call $t16 := $1_features_module_event_migration_enabled();
    if ($abort_flag) {
        assume {:print "$at(106,37931,37978)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,13):", $t11} $t11 == $t11;
        goto L21;
    }

    // if ($t16) goto L6 else goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:899:13+228
    if ($t16) { goto L6; } else { goto L5; }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:901:46+21
    assume {:print "$at(106,38056,38077)"} true;
L6:

    // $t17 := type_info::type_name<#0>() on_abort goto L21 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:901:46+21
    assume {:print "$at(106,38056,38077)"} true;
    $t17 := $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 97][6 := 112][7 := 116][8 := 111][9 := 115][10 := 95][11 := 99][12 := 111][13 := 105][14 := 110][15 := 58][16 := 58][17 := 65][18 := 112][19 := 116][20 := 111][21 := 115][22 := 67][23 := 111][24 := 105][25 := 110], 26));
    if ($abort_flag) {
        assume {:print "$at(106,38056,38077)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,13):", $t11} $t11 == $t11;
        goto L21;
    }

    // $t18 := get_field<coin::Coin<#0>>.value($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:901:100+10
    $t18 := $t1->$value;

    // $t19 := pack coin::CoinDeposit($t17, $t0, $t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:901:21+91
    $t19 := $1_coin_CoinDeposit($t17, $t0, $t18);

    // opaque begin: event::emit<coin::CoinDeposit>($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:900:17+142
    assume {:print "$at(106,37998,38140)"} true;

    // opaque end: event::emit<coin::CoinDeposit>($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:900:17+142

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:905:22+10
    assume {:print "$at(106,38223,38233)"} true;
L5:

    // $t20 := borrow_field<coin::CoinStore<#0>>.deposit_events($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:905:17+30
    assume {:print "$at(106,38218,38248)"} true;
    $t20 := $ChildMutation($t10, 2, $Dereference($t10)->$deposit_events);

    // $t21 := get_field<coin::Coin<#0>>.value($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:906:40+10
    assume {:print "$at(106,38289,38299)"} true;
    $t21 := $t1->$value;

    // $t22 := pack coin::DepositEvent($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:906:17+35
    $t22 := $1_coin_DepositEvent($t21);

    // opaque begin: event::emit_event<coin::DepositEvent>($t20, $t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:904:13+147
    assume {:print "$at(106,38169,38316)"} true;

    // opaque end: event::emit_event<coin::DepositEvent>($t20, $t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:904:13+147

    // write_back[Reference($t10).deposit_events (event::EventHandle<coin::DepositEvent>)]($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:904:13+147
    $t10 := $UpdateMutation($t10, $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_deposit_events($Dereference($t10), $Dereference($t20)));

    // $t23 := borrow_field<coin::CoinStore<#0>>.coin($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:908:19+20
    assume {:print "$at(106,38336,38356)"} true;
    $t23 := $ChildMutation($t10, 0, $Dereference($t10)->$coin);

    // coin::merge<#0>($t23, $t1) on_abort goto L21 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:908:13+33
    call $t23 := $1_coin_merge'$1_aptos_coin_AptosCoin'($t23, $t1);
    if ($abort_flag) {
        assume {:print "$at(106,38330,38363)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,13):", $t11} $t11 == $t11;
        goto L21;
    }

    // write_back[Reference($t10).coin (coin::Coin<#0>)]($t23) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:908:13+33
    $t10 := $UpdateMutation($t10, $Update'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''_coin($Dereference($t10), $Dereference($t23)));

    // write_back[coin::CoinStore<#0>@]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:908:13+33
    $1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:893:9+1162
    assume {:print "$at(106,37660,38822)"} true;
    goto L7;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:910:28+27
    assume {:print "$at(106,38409,38436)"} true;
L0:

    // $t24 := coin::paired_metadata<#0>() on_abort goto L21 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:910:28+27
    assume {:print "$at(106,38409,38436)"} true;
    call $t24 := $1_coin_paired_metadata'$1_aptos_coin_AptosCoin'();
    if ($abort_flag) {
        assume {:print "$at(106,38409,38436)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,13):", $t11} $t11 == $t11;
        goto L21;
    }

    // trace_local[metadata]($t24) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:910:17+8
    assume {:print "$track_local(30,13,6):", $t24} $t24 == $t24;

    // $t25 := opaque begin: option::is_some<object::Object<fungible_asset::Metadata>>($t24) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:911:17+26
    assume {:print "$at(106,38454,38480)"} true;

    // assume WellFormed($t25) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:911:17+26
    assume $IsValid'bool'($t25);

    // assume Eq<bool>($t25, option::spec_is_some<object::Object<fungible_asset::Metadata>>($t24)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:911:17+26
    assume $IsEqual'bool'($t25, $1_option_spec_is_some'$1_object_Object'$1_fungible_asset_Metadata''($t24));

    // $t25 := opaque end: option::is_some<object::Object<fungible_asset::Metadata>>($t24) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:911:17+26

    // if ($t25) goto L9 else goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:911:17+160
    if ($t25) { goto L9; } else { goto L8; }

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:912:17+12
    assume {:print "$at(106,38540,38552)"} true;
L9:

    // $t26 := opaque begin: option::destroy_some<object::Object<fungible_asset::Metadata>>($t24) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:913:17+30
    assume {:print "$at(106,38570,38600)"} true;

    // assume Identical($t27, option::spec_is_none<object::Object<fungible_asset::Metadata>>($t24)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:913:17+30
    assume ($t27 == $1_option_spec_is_none'$1_object_Object'$1_fungible_asset_Metadata''($t24));

    // if ($t27) goto L23 else goto L22 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:913:17+30
    if ($t27) { goto L23; } else { goto L22; }

    // label L23 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:913:17+30
L23:

    // assume And(option::spec_is_none<object::Object<fungible_asset::Metadata>>($t24), Eq(262145, $t11)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:913:17+30
    assume {:print "$at(106,38570,38600)"} true;
    assume ($1_option_spec_is_none'$1_object_Object'$1_fungible_asset_Metadata''($t24) && $IsEqual'num'(262145, $t11));

    // trace_abort($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:913:17+30
    assume {:print "$at(106,38570,38600)"} true;
    assume {:print "$track_abort(30,13):", $t11} $t11 == $t11;

    // goto L21 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:913:17+30
    goto L21;

    // label L22 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:913:17+30
L22:

    // assume WellFormed($t26) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:913:17+30
    assume {:print "$at(106,38570,38600)"} true;
    assume $IsValid'$1_object_Object'$1_fungible_asset_Metadata''($t26);

    // assume Eq<object::Object<fungible_asset::Metadata>>($t26, option::spec_borrow<object::Object<fungible_asset::Metadata>>($t24)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:913:17+30
    assume $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t26, $1_option_spec_borrow'$1_object_Object'$1_fungible_asset_Metadata''($t24));

    // $t26 := opaque end: option::destroy_some<object::Object<fungible_asset::Metadata>>($t24) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:913:17+30

    // $t28 := primary_fungible_store::primary_store_address<fungible_asset::Metadata>($t0, $t26) on_abort goto L21 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:926:37+82
    assume {:print "$at(106,39004,39086)"} true;
    call $t28 := $1_primary_fungible_store_primary_store_address'$1_fungible_asset_Metadata'($t0, $t26);
    if ($abort_flag) {
        assume {:print "$at(106,39004,39086)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,13):", $t11} $t11 == $t11;
        goto L21;
    }

    // trace_local[primary_store_address#141]($t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:926:13+21
    assume {:print "$track_local(30,13,7):", $t28} $t28 == $t28;

    // $t29 := fungible_asset::store_exists($t28) on_abort goto L21 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:927:9+51
    assume {:print "$at(106,39096,39147)"} true;
    call $t29 := $1_fungible_asset_store_exists($t28);
    if ($abort_flag) {
        assume {:print "$at(106,39096,39147)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,13):", $t11} $t11 == $t11;
        goto L21;
    }

    // if ($t29) goto L11 else goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:927:9+274
    if ($t29) { goto L11; } else { goto L10; }

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:929:13+56
    assume {:print "$at(106,39256,39312)"} true;
L11:

    // $t30 := features::new_accounts_default_to_fa_apt_store_enabled() on_abort goto L21 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:929:13+56
    assume {:print "$at(106,39256,39312)"} true;
    call $t30 := $1_features_new_accounts_default_to_fa_apt_store_enabled();
    if ($abort_flag) {
        assume {:print "$at(106,39256,39312)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,13):", $t11} $t11 == $t11;
        goto L21;
    }

    // if ($t30) goto L13 else goto L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:927:64+219
    assume {:print "$at(106,39151,39370)"} true;
    if ($t30) { goto L13; } else { goto L12; }

    // label L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:927:64+219
L13:

    // $t31 := true at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:927:64+219
    assume {:print "$at(106,39151,39370)"} true;
    $t31 := true;
    assume $IsValid'bool'($t31);

    // $t2 := $t31 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:927:64+219
    $t2 := $t31;

    // goto L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:927:64+219
    goto L14;

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:929:95+21
    assume {:print "$at(106,39338,39359)"} true;
L12:

    // $t2 := exists<coin::MigrationFlag>($t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:929:73+6
    assume {:print "$at(106,39316,39322)"} true;
    $t2 := $ResourceExists($1_coin_MigrationFlag_$memory, $t28);

    // label L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:927:64+219
    assume {:print "$at(106,39151,39370)"} true;
L14:

    // $t3 := $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:927:9+274
    assume {:print "$at(106,39096,39370)"} true;
    $t3 := $t2;

    // goto L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:927:9+274
    goto L15;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:927:9+274
L10:

    // $t32 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:927:9+274
    assume {:print "$at(106,39096,39370)"} true;
    $t32 := false;
    assume $IsValid'bool'($t32);

    // $t3 := $t32 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:927:9+274
    $t3 := $t32;

    // label L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:927:9+274
L15:

    // $t4 := $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:911:17+160
    assume {:print "$at(106,38454,38614)"} true;
    $t4 := $t3;

    // goto L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:911:17+160
    goto L16;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:911:17+160
L8:

    // $t33 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:911:17+160
    assume {:print "$at(106,38454,38614)"} true;
    $t33 := false;
    assume $IsValid'bool'($t33);

    // $t4 := $t33 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:911:17+160
    $t4 := $t33;

    // label L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:911:17+160
L16:

    // if ($t4) goto L18 else goto L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:911:13+361
    assume {:print "$at(106,38450,38811)"} true;
    if ($t4) { goto L18; } else { goto L17; }

    // label L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:911:13+361
L18:

    // goto L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:911:13+361
    assume {:print "$at(106,38450,38811)"} true;
    goto L19;

    // label L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:917:40+25
    assume {:print "$at(106,38771,38796)"} true;
L17:

    // $t34 := 5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:917:40+25
    assume {:print "$at(106,38771,38796)"} true;
    $t34 := 5;
    assume $IsValid'u64'($t34);

    // $t35 := error::not_found($t34) on_abort goto L21 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:917:23+43
    call $t35 := $1_error_not_found($t34);
    if ($abort_flag) {
        assume {:print "$at(106,38754,38797)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,13):", $t11} $t11 == $t11;
        goto L21;
    }

    // trace_abort($t35) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:917:17+49
    assume {:print "$at(106,38748,38797)"} true;
    assume {:print "$track_abort(30,13):", $t35} $t35 == $t35;

    // $t11 := move($t35) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:917:17+49
    $t11 := $t35;

    // goto L21 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:917:17+49
    goto L21;

    // label L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:915:49+12
    assume {:print "$at(106,38666,38678)"} true;
L19:

    // assume Identical($t36, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:318:9+58
    assume {:print "$at(107,14383,14441)"} true;
    assume ($t36 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t37 := coin::coin_to_fungible_asset<#0>($t1) on_abort goto L21 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:915:63+28
    assume {:print "$at(106,38680,38708)"} true;
    call $t37 := $1_coin_coin_to_fungible_asset'$1_aptos_coin_AptosCoin'($t1);
    if ($abort_flag) {
        assume {:print "$at(106,38680,38708)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,13):", $t11} $t11 == $t11;
        goto L21;
    }

    // primary_fungible_store::deposit($t0, $t37) on_abort goto L21 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:915:17+75
    call $1_primary_fungible_store_deposit($t0, $t37);
    if ($abort_flag) {
        assume {:print "$at(106,38634,38709)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,13):", $t11} $t11 == $t11;
        goto L21;
    }

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:893:9+1162
    assume {:print "$at(106,37660,38822)"} true;
L7:

    // label L20 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:920:5+1
    assume {:print "$at(106,38827,38828)"} true;
L20:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:920:5+1
    assume {:print "$at(106,38827,38828)"} true;
    return;

    // label L21 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:920:5+1
L21:

    // abort($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:920:5+1
    assume {:print "$at(106,38827,38828)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun coin::merge<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1108:5+469
procedure {:inline 1} $1_coin_merge'$1_aptos_coin_AptosCoin'(_$t0: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin'), _$t1: $1_coin_Coin'$1_aptos_coin_AptosCoin') returns ($ret0: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin'))
{
    // declare local variables
    var $t2: int;
    var $t3: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $t4: int;
    var $t5: $Mutation ($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin');
    var $t6: int;
    var $t7: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $t8: int;
    var $t9: $Mutation ($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin');
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $Mutation (int);
    var $t0: $Mutation ($1_coin_Coin'$1_aptos_coin_AptosCoin');
    var $t1: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[dst_coin]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1108:5+1
    assume {:print "$at(106,46682,46683)"} true;
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(30,39,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // trace_local[source_coin]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1108:5+1
    assume {:print "$track_local(30,39,1):", $t1} $t1 == $t1;

    // assume Le(Add(select coin::Coin.value<coin::Coin<#0>>($t0), select coin::Coin.value<coin::Coin<#0>>($t1)), 18446744073709551615) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1110:13+53
    assume {:print "$at(106,46798,46851)"} true;
    assume (($Dereference($t0)->$value + $t1->$value) <= 18446744073709551615);

    // assume Identical($t3, pack coin::Ghost$supply<#0>(Sub(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), select coin::Coin.value<coin::Coin<#0>>($t1)))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1113:13+63
    assume {:print "$at(106,46890,46953)"} true;
    assume ($t3 == $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v - $t1->$value)));

    // assume Identical($t4, 0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1113:13+63
    assume ($t4 == 0);

    // $t5 := borrow_global<coin::Ghost$supply<#0>>($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1113:13+63
    if (!$ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $Mutation($Global($t4), EmptyVec(), $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t4));
    }

    // write_ref($t5, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1113:13+63
    $t5 := $UpdateMutation($t5, $t3);

    // write_back[coin::Ghost$supply<#0>@]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1113:13+63
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t5),
        $Dereference($t5));

    // $t6 := unpack coin::Coin<#0>($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1115:13+14
    assume {:print "$at(106,46977,46991)"} true;
    $t6 := $t1->$value;

    // trace_local[value]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1115:20+5
    assume {:print "$track_local(30,39,2):", $t6} $t6 == $t6;

    // assume Identical($t7, pack coin::Ghost$supply<#0>(Add(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), $t6))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1117:13+51
    assume {:print "$at(106,47034,47085)"} true;
    assume ($t7 == $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v + $t6)));

    // assume Identical($t8, 0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1117:13+51
    assume ($t8 == 0);

    // $t9 := borrow_global<coin::Ghost$supply<#0>>($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1117:13+51
    if (!$ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t8));
    }

    // write_ref($t9, $t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1117:13+51
    $t9 := $UpdateMutation($t9, $t7);

    // write_back[coin::Ghost$supply<#0>@]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1117:13+51
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // $t10 := get_field<coin::Coin<#0>>.value($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1119:26+14
    assume {:print "$at(106,47122,47136)"} true;
    $t10 := $Dereference($t0)->$value;

    // $t11 := +($t10, $t6) on_abort goto L2 with $t12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1119:41+1
    call $t11 := $AddU64($t10, $t6);
    if ($abort_flag) {
        assume {:print "$at(106,47137,47138)"} true;
        $t12 := $abort_code;
        assume {:print "$track_abort(30,39):", $t12} $t12 == $t12;
        goto L2;
    }

    // $t13 := borrow_field<coin::Coin<#0>>.value($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1119:9+14
    $t13 := $ChildMutation($t0, 0, $Dereference($t0)->$value);

    // write_ref($t13, $t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1119:9+39
    $t13 := $UpdateMutation($t13, $t11);

    // write_back[Reference($t0).value (u64)]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1119:9+39
    $t0 := $UpdateMutation($t0, $Update'$1_coin_Coin'$1_aptos_coin_AptosCoin''_value($Dereference($t0), $Dereference($t13)));

    // trace_local[dst_coin]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1119:9+39
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(30,39,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // trace_local[dst_coin]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1119:48+1
    $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' := $Dereference($t0);
    assume {:print "$track_local(30,39,0):", $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin''} $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'' == $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1120:5+1
    assume {:print "$at(106,47150,47151)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1120:5+1
    assume {:print "$at(106,47150,47151)"} true;
    $ret0 := $t0;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1120:5+1
L2:

    // abort($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1120:5+1
    assume {:print "$at(106,47150,47151)"} true;
    $abort_code := $t12;
    $abort_flag := true;
    return;

}

// fun coin::mint<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1125:5+176
procedure {:inline 1} $1_coin_mint'$1_aptos_coin_AptosCoin'(_$t0: int, _$t1: $1_coin_MintCapability'$1_aptos_coin_AptosCoin') returns ($ret0: $1_coin_Coin'$1_aptos_coin_AptosCoin')
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t5: int;
    var $t0: int;
    var $t1: $1_coin_MintCapability'$1_aptos_coin_AptosCoin';
    var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$modifies: [int]bool;
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_coin_MintCapability'$1_aptos_coin_AptosCoin'': $1_coin_MintCapability'$1_aptos_coin_AptosCoin';
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:103:9+58
    assume {:print "$at(107,5935,5993)"} true;
    assume ($t2 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // trace_local[amount]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1125:5+1
    assume {:print "$at(106,47320,47321)"} true;
    assume {:print "$track_local(30,42,0):", $t0} $t0 == $t0;

    // trace_local[_cap]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1125:5+1
    assume {:print "$track_local(30,42,1):", $t1} $t1 == $t1;

    // assume Identical($t3, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:108:9+58
    assume {:print "$at(107,6085,6143)"} true;
    assume ($t3 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t4 := coin::mint_internal<#0>($t0) on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1129:9+31
    assume {:print "$at(106,47459,47490)"} true;
    call $t4 := $1_coin_mint_internal'$1_aptos_coin_AptosCoin'($t0);
    if ($abort_flag) {
        assume {:print "$at(106,47459,47490)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,42):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1129:9+31
    assume {:print "$track_return(30,42,0):", $t4} $t4 == $t4;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1130:5+1
    assume {:print "$at(106,47495,47496)"} true;
L1:

    // return $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1130:5+1
    assume {:print "$at(106,47495,47496)"} true;
    $ret0 := $t4;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1130:5+1
L2:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1130:5+1
    assume {:print "$at(106,47495,47496)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun coin::mint_internal<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1232:5+1216
procedure {:inline 1} $1_coin_mint_internal'$1_aptos_coin_AptosCoin'(_$t0: int) returns ($ret0: $1_coin_Coin'$1_aptos_coin_AptosCoin')
{
    // declare local variables
    var $t1: $Mutation ($1_option_Option'$1_optional_aggregator_OptionalAggregator');
    var $t2: $Mutation ($1_optional_aggregator_OptionalAggregator);
    var $t3: int;
    var $t4: int;
    var $t5: bool;
    var $t6: int;
    var $t7: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t8: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t9: int;
    var $t10: $Mutation ($1_coin_CoinInfo'$1_aptos_coin_AptosCoin');
    var $t11: int;
    var $t12: $Mutation ($1_option_Option'$1_optional_aggregator_OptionalAggregator');
    var $t13: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t14: bool;
    var $t15: $Mutation ($1_optional_aggregator_OptionalAggregator);
    var $t16: int;
    var $t17: $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $t18: int;
    var $t19: $Mutation ($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin');
    var $t20: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t0: int;
    var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$modifies: [int]bool;
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'': $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $temp_0'$1_optional_aggregator_OptionalAggregator': $1_optional_aggregator_OptionalAggregator;
    var $temp_0'u64': int;
    var $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#52: $Memory $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#53: $Memory $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin';
    var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#54: $Memory $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t3, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:108:9+58
    assume {:print "$at(107,6085,6143)"} true;
    assume ($t3 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // trace_local[amount]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1232:5+1
    assume {:print "$at(106,51213,51214)"} true;
    assume {:print "$track_local(30,43,0):", $t0} $t0 == $t0;

    // $t4 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1233:23+1
    assume {:print "$at(106,51312,51313)"} true;
    $t4 := 0;
    assume $IsValid'u64'($t4);

    // $t5 := ==($t0, $t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1233:20+2
    $t5 := $IsEqual'u64'($t0, $t4);

    // if ($t5) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1233:9+103
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1235:24+1
    assume {:print "$at(106,51376,51377)"} true;
L1:

    // $t6 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1235:24+1
    assume {:print "$at(106,51376,51377)"} true;
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := pack coin::Coin<#0>($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1234:20+55
    assume {:print "$at(106,51336,51391)"} true;
    $t7 := $1_coin_Coin'$1_aptos_coin_AptosCoin'($t6);

    // trace_return[0]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1234:13+62
    assume {:print "$track_return(30,43,0):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1234:13+62
    $t8 := $t7;

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1234:13+62
    goto L5;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1239:71+24
    assume {:print "$at(106,51474,51498)"} true;
L0:

    // $t9 := opaque begin: coin::coin_address<#0>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1239:71+24
    assume {:print "$at(106,51474,51498)"} true;

    // @54 := save_mem(coin::CoinInfo<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1239:71+24
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#54 := $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory;

    // @52 := save_mem(coin::supply<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1239:71+24
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#52 := $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory;

    // @53 := save_mem(coin::aggregate_supply<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1239:71+24
    $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#53 := $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory;

    // assume WellFormed($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1239:71+24
    assume $IsValid'address'($t9);

    // assume Implies(coin::spec_fun_supply_tracked[]<#0>(Add(select coin::Ghost$supply.v<#0>(global[@52]<coin::Ghost$supply<#0>>(0x0)), select coin::Ghost$aggregate_supply.v<#0>(global[@53]<coin::Ghost$aggregate_supply<#0>>(0x0))), select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global[@54]<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of[]<#0>())))), coin::spec_fun_supply_tracked<#0>(Add(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), select coin::Ghost$aggregate_supply.v<#0>(global<coin::Ghost$aggregate_supply<#0>>(0x0))), select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>()))))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1239:71+24
    assume ($1_coin_spec_fun_supply_tracked'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#52, 0)->$v + $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#53, 0)->$v), $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#54, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply) ==> $1_coin_spec_fun_supply_tracked'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v + $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v), $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply));

    // assume Eq<address>($t9, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1239:71+24
    assume $IsEqual'address'($t9, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t9 := opaque end: coin::coin_address<#0>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1239:71+24

    // $t10 := borrow_global<coin::CoinInfo<#0>>($t9) on_abort goto L6 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1239:33+17
    if (!$ResourceExists($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t9)) {
        call $ExecFailureAbort();
    } else {
        $t10 := $Mutation($Global($t9), EmptyVec(), $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t9));
    }
    if ($abort_flag) {
        assume {:print "$at(106,51436,51453)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,43):", $t11} $t11 == $t11;
        goto L6;
    }

    // $t12 := borrow_field<coin::CoinInfo<#0>>.supply($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1239:28+75
    $t12 := $ChildMutation($t10, 3, $Dereference($t10)->$supply);

    // trace_local[maybe_supply]($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1239:13+12
    $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'' := $Dereference($t12);
    assume {:print "$track_local(30,43,1):", $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator''} $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'' == $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'';

    // $t13 := read_ref($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1240:29+12
    assume {:print "$at(106,51536,51548)"} true;
    $t13 := $Dereference($t12);

    // $t14 := opaque begin: option::is_some<optional_aggregator::OptionalAggregator>($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1240:13+29

    // assume WellFormed($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1240:13+29
    assume $IsValid'bool'($t14);

    // assume Eq<bool>($t14, option::spec_is_some<optional_aggregator::OptionalAggregator>($t13)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1240:13+29
    assume $IsEqual'bool'($t14, $1_option_spec_is_some'$1_optional_aggregator_OptionalAggregator'($t13));

    // $t14 := opaque end: option::is_some<optional_aggregator::OptionalAggregator>($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1240:13+29

    // if ($t14) goto L3 else goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1240:9+774
    if ($t14) { goto L3; } else { goto L2; }

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1241:45+12
    assume {:print "$at(106,51597,51609)"} true;
L3:

    // $t15 := option::borrow_mut<optional_aggregator::OptionalAggregator>($t12) on_abort goto L6 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1241:26+32
    assume {:print "$at(106,51578,51610)"} true;
    call $t15,$t12 := $1_option_borrow_mut'$1_optional_aggregator_OptionalAggregator'($t12);
    if ($abort_flag) {
        assume {:print "$at(106,51578,51610)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,43):", $t11} $t11 == $t11;
        goto L6;
    }

    // trace_local[supply]($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1241:17+6
    $temp_0'$1_optional_aggregator_OptionalAggregator' := $Dereference($t15);
    assume {:print "$track_local(30,43,2):", $temp_0'$1_optional_aggregator_OptionalAggregator'} $temp_0'$1_optional_aggregator_OptionalAggregator' == $temp_0'$1_optional_aggregator_OptionalAggregator';

    // assume Implies(optional_aggregator::$is_parallelizable(Freeze(false)($t15)), Le(Add(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator<optional_aggregator::OptionalAggregator>($t15))), $t0), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator<optional_aggregator::OptionalAggregator>($t15))))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1245:17+263
    assume {:print "$at(106,51754,52017)"} true;
    assume ($1_optional_aggregator_$is_parallelizable($Dereference($t15)) ==> (($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($Dereference($t15)->$aggregator)) + $t0) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($Dereference($t15)->$aggregator))));

    // assume Implies(Not(optional_aggregator::$is_parallelizable(Freeze(false)($t15))), Le(Add(select optional_aggregator::Integer.value<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer<optional_aggregator::OptionalAggregator>($t15))), $t0), select optional_aggregator::Integer.limit<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer<optional_aggregator::OptionalAggregator>($t15))))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1249:17+167
    assume {:print "$at(106,52034,52201)"} true;
    assume (!$1_optional_aggregator_$is_parallelizable($Dereference($t15)) ==> (($1_option_$borrow'$1_optional_aggregator_Integer'($Dereference($t15)->$integer)->$value + $t0) <= $1_option_$borrow'$1_optional_aggregator_Integer'($Dereference($t15)->$integer)->$limit));

    // $t16 := (u128)($t0) on_abort goto L6 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1252:46+16
    assume {:print "$at(106,52262,52278)"} true;
    call $t16 := $CastU128($t0);
    if ($abort_flag) {
        assume {:print "$at(106,52262,52278)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,43):", $t11} $t11 == $t11;
        goto L6;
    }

    // optional_aggregator::add($t15, $t16) on_abort goto L6 with $t11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1252:13+50
    call $t15 := $1_optional_aggregator_add($t15, $t16);
    if ($abort_flag) {
        assume {:print "$at(106,52229,52279)"} true;
        $t11 := $abort_code;
        assume {:print "$track_abort(30,43):", $t11} $t11 == $t11;
        goto L6;
    }

    // write_back[Reference($t12).vec (vector<optional_aggregator::OptionalAggregator>)/[]]($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1252:13+50
    $t12 := $UpdateMutation($t12, (var $$sel0 := $Dereference($t12)->$vec; $Update'$1_option_Option'$1_optional_aggregator_OptionalAggregator''_vec($Dereference($t12), UpdateVec($$sel0, ReadVec($t15->p, LenVec($t12->p) + 1), $Dereference($t15)))));

    // write_back[Reference($t10).supply (option::Option<optional_aggregator::OptionalAggregator>)]($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1252:13+50
    $t10 := $UpdateMutation($t10, $Update'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''_supply($Dereference($t10), $Dereference($t12)));

    // pack_ref_deep($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1252:13+50

    // write_back[coin::CoinInfo<#0>@]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1252:13+50
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t10),
        $Dereference($t10));

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1252:63+1
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1240:9+774
    assume {:print "$at(106,51516,52290)"} true;
L2:

    // pack_ref_deep($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1240:9+774
    assume {:print "$at(106,51516,52290)"} true;

    // drop($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1240:9+774

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1254:9+81
    assume {:print "$at(106,52300,52381)"} true;
L4:

    // assume Identical($t17, pack coin::Ghost$supply<#0>(Add(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), $t0))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1255:13+52
    assume {:print "$at(106,52319,52371)"} true;
    assume ($t17 == $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v + $t0)));

    // assume Identical($t18, 0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1255:13+52
    assume ($t18 == 0);

    // $t19 := borrow_global<coin::Ghost$supply<#0>>($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1255:13+52
    if (!$ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t18)) {
        call $ExecFailureAbort();
    } else {
        $t19 := $Mutation($Global($t18), EmptyVec(), $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $t18));
    }

    // write_ref($t19, $t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1255:13+52
    $t19 := $UpdateMutation($t19, $t17);

    // write_back[coin::Ghost$supply<#0>@]($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1255:13+52
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory := $ResourceUpdate($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $GlobalLocationAddress($t19),
        $Dereference($t19));

    // $t20 := pack coin::Coin<#0>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1257:9+32
    assume {:print "$at(106,52391,52423)"} true;
    $t20 := $1_coin_Coin'$1_aptos_coin_AptosCoin'($t0);

    // trace_return[0]($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1257:9+32
    assume {:print "$track_return(30,43,0):", $t20} $t20 == $t20;

    // $t8 := move($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1257:9+32
    $t8 := $t20;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1258:5+1
    assume {:print "$at(106,52428,52429)"} true;
L5:

    // return $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1258:5+1
    assume {:print "$at(106,52428,52429)"} true;
    $ret0 := $t8;
    return;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1258:5+1
L6:

    // abort($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1258:5+1
    assume {:print "$at(106,52428,52429)"} true;
    $abort_code := $t11;
    $abort_flag := true;
    return;

}

// fun coin::coin_supply<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:834:5+494
procedure {:inline 1} $1_coin_coin_supply'$1_aptos_coin_AptosCoin'() returns ($ret0: $1_option_Option'u128')
{
    // declare local variables
    var $t0: $1_option_Option'u128';
    var $t1: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t2: int;
    var $t3: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t4: $1_optional_aggregator_OptionalAggregator;
    var $t5: int;
    var $t6: int;
    var $t7: $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';
    var $t8: int;
    var $t9: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t10: bool;
    var $t11: $1_optional_aggregator_OptionalAggregator;
    var $t12: bool;
    var $t13: int;
    var $temp_0'$1_option_Option'$1_optional_aggregator_OptionalAggregator'': $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $temp_0'$1_option_Option'u128'': $1_option_Option'u128';
    var $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#61: $Memory $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin';
    var $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#62: $Memory $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin';
    var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#63: $Memory $1_coin_CoinInfo'$1_aptos_coin_AptosCoin';

    // bytecode translation starts here
    // assume Identical($t2, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:229:9+63
    assume {:print "$at(107,10814,10877)"} true;
    assume ($t2 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // assume Identical($t3, select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global<coin::CoinInfo<#0>>($t2))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:232:9+64
    assume {:print "$at(107,10977,11041)"} true;
    assume ($t3 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t2)->$supply);

    // assume Identical($t4, option::spec_borrow<optional_aggregator::OptionalAggregator>($t3)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:233:9+47
    assume {:print "$at(107,11050,11097)"} true;
    assume ($t4 == $1_option_spec_borrow'$1_optional_aggregator_OptionalAggregator'($t3));

    // assume Identical($t5, optional_aggregator::optional_aggregator_value($t4)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:234:9+67
    assume {:print "$at(107,11106,11173)"} true;
    assume ($t5 == $1_optional_aggregator_optional_aggregator_value($t4));

    // $t6 := opaque begin: coin::coin_address<#0>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:835:63+24
    assume {:print "$at(106,35279,35303)"} true;

    // @63 := save_mem(coin::CoinInfo<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:835:63+24
    $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#63 := $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory;

    // @61 := save_mem(coin::supply<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:835:63+24
    $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#61 := $1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory;

    // @62 := save_mem(coin::aggregate_supply<#0>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:835:63+24
    $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#62 := $1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory;

    // assume WellFormed($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:835:63+24
    assume $IsValid'address'($t6);

    // assume Implies(coin::spec_fun_supply_tracked[]<#0>(Add(select coin::Ghost$supply.v<#0>(global[@61]<coin::Ghost$supply<#0>>(0x0)), select coin::Ghost$aggregate_supply.v<#0>(global[@62]<coin::Ghost$aggregate_supply<#0>>(0x0))), select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global[@63]<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of[]<#0>())))), coin::spec_fun_supply_tracked<#0>(Add(select coin::Ghost$supply.v<#0>(global<coin::Ghost$supply<#0>>(0x0)), select coin::Ghost$aggregate_supply.v<#0>(global<coin::Ghost$aggregate_supply<#0>>(0x0))), select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global<coin::CoinInfo<#0>>(select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>()))))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:835:63+24
    assume ($1_coin_spec_fun_supply_tracked'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory#61, 0)->$v + $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory#62, 0)->$v), $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory#63, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply) ==> $1_coin_spec_fun_supply_tracked'$1_aptos_coin_AptosCoin'(($ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v + $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0)->$v), $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address)->$supply));

    // assume Eq<address>($t6, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:835:63+24
    assume $IsEqual'address'($t6, $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t6 := opaque end: coin::coin_address<#0>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:835:63+24

    // $t7 := get_global<coin::CoinInfo<#0>>($t6) on_abort goto L4 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:835:29+13
    if (!$ResourceExists($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t6);
    }
    if ($abort_flag) {
        assume {:print "$at(106,35245,35258)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,6):", $t8} $t8 == $t8;
        goto L4;
    }

    // $t9 := get_field<coin::CoinInfo<#0>>.supply($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:835:28+67
    $t9 := $t7->$supply;

    // trace_local[maybe_supply]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:835:13+12
    assume {:print "$track_local(30,6,1):", $t9} $t9 == $t9;

    // $t10 := opaque begin: option::is_some<optional_aggregator::OptionalAggregator>($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:836:13+29
    assume {:print "$at(106,35325,35354)"} true;

    // assume WellFormed($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:836:13+29
    assume $IsValid'bool'($t10);

    // assume Eq<bool>($t10, option::spec_is_some<optional_aggregator::OptionalAggregator>($t9)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:836:13+29
    assume $IsEqual'bool'($t10, $1_option_spec_is_some'$1_optional_aggregator_OptionalAggregator'($t9));

    // $t10 := opaque end: option::is_some<optional_aggregator::OptionalAggregator>($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:836:13+29

    // if ($t10) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:836:9+315
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:838:41+12
    assume {:print "$at(106,35477,35489)"} true;
L1:

    // $t11 := opaque begin: option::borrow<optional_aggregator::OptionalAggregator>($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:838:26+28
    assume {:print "$at(106,35462,35490)"} true;

    // assume Identical($t12, option::spec_is_none<optional_aggregator::OptionalAggregator>($t9)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:838:26+28
    assume ($t12 == $1_option_spec_is_none'$1_optional_aggregator_OptionalAggregator'($t9));

    // if ($t12) goto L6 else goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:838:26+28
    if ($t12) { goto L6; } else { goto L5; }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:838:26+28
L6:

    // assume And(option::spec_is_none<optional_aggregator::OptionalAggregator>($t9), Eq(262145, $t8)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:838:26+28
    assume {:print "$at(106,35462,35490)"} true;
    assume ($1_option_spec_is_none'$1_optional_aggregator_OptionalAggregator'($t9) && $IsEqual'num'(262145, $t8));

    // trace_abort($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:838:26+28
    assume {:print "$at(106,35462,35490)"} true;
    assume {:print "$track_abort(30,6):", $t8} $t8 == $t8;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:838:26+28
    goto L4;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:838:26+28
L5:

    // assume And(WellFormed($t11), And(And(And(And(And(Iff(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($t11)), option::$is_none<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($t11))), Iff(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($t11)), option::$is_none<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($t11)))), Implies(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($t11)), Le(select optional_aggregator::Integer.value<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($t11))), select optional_aggregator::Integer.limit<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($t11)))))), Implies(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($t11)), Le(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($t11))), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($t11)))))), Le(Len<aggregator::Aggregator>(select option::Option.vec(select optional_aggregator::OptionalAggregator.aggregator($t11))), 1)), Le(Len<optional_aggregator::Integer>(select option::Option.vec(select optional_aggregator::OptionalAggregator.integer($t11))), 1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:838:26+28
    assume {:print "$at(106,35462,35490)"} true;
    assume ($IsValid'$1_optional_aggregator_OptionalAggregator'($t11) && (((((($1_option_$is_some'$1_aggregator_Aggregator'($t11->$aggregator) <==> $1_option_$is_none'$1_optional_aggregator_Integer'($t11->$integer)) && ($1_option_$is_some'$1_optional_aggregator_Integer'($t11->$integer) <==> $1_option_$is_none'$1_aggregator_Aggregator'($t11->$aggregator))) && ($1_option_$is_some'$1_optional_aggregator_Integer'($t11->$integer) ==> ($1_option_$borrow'$1_optional_aggregator_Integer'($t11->$integer)->$value <= $1_option_$borrow'$1_optional_aggregator_Integer'($t11->$integer)->$limit))) && ($1_option_$is_some'$1_aggregator_Aggregator'($t11->$aggregator) ==> ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($t11->$aggregator)) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($t11->$aggregator))))) && (LenVec($t11->$aggregator->$vec) <= 1)) && (LenVec($t11->$integer->$vec) <= 1)));

    // assume Eq<optional_aggregator::OptionalAggregator>($t11, option::spec_borrow<optional_aggregator::OptionalAggregator>($t9)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:838:26+28
    assume $IsEqual'$1_optional_aggregator_OptionalAggregator'($t11, $1_option_spec_borrow'$1_optional_aggregator_OptionalAggregator'($t9));

    // $t11 := opaque end: option::borrow<optional_aggregator::OptionalAggregator>($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:838:26+28

    // $t13 := optional_aggregator::read($t11) on_abort goto L4 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:839:25+33
    assume {:print "$at(106,35516,35549)"} true;
    call $t13 := $1_optional_aggregator_read($t11);
    if ($abort_flag) {
        assume {:print "$at(106,35516,35549)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(30,6):", $t8} $t8 == $t8;
        goto L4;
    }

    // $t0 := opaque begin: option::some<u128>($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:840:13+19
    assume {:print "$at(106,35563,35582)"} true;

    // assume And(WellFormed($t0), Le(Len<u128>(select option::Option.vec($t0)), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:840:13+19
    assume ($IsValid'$1_option_Option'u128''($t0) && (LenVec($t0->$vec) <= 1));

    // assume Eq<option::Option<u128>>($t0, option::spec_some<u128>($t13)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:840:13+19
    assume $IsEqual'$1_option_Option'u128''($t0, $1_option_spec_some'u128'($t13));

    // $t0 := opaque end: option::some<u128>($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:840:13+19

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:836:9+315
    assume {:print "$at(106,35321,35636)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:836:9+315
L0:

    // $t0 := opaque begin: option::none<u128>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:842:13+14
    assume {:print "$at(106,35612,35626)"} true;

    // assume And(WellFormed($t0), Le(Len<u128>(select option::Option.vec($t0)), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:842:13+14
    assume ($IsValid'$1_option_Option'u128''($t0) && (LenVec($t0->$vec) <= 1));

    // assume Eq<option::Option<u128>>($t0, option::spec_none<u128>()) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:842:13+14
    assume $IsEqual'$1_option_Option'u128''($t0, $1_option_spec_none'u128'());

    // $t0 := opaque end: option::none<u128>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:842:13+14

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:836:9+315
    assume {:print "$at(106,35321,35636)"} true;
L2:

    // trace_return[0]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:836:9+315
    assume {:print "$at(106,35321,35636)"} true;
    assume {:print "$track_return(30,6,0):", $t0} $t0 == $t0;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:844:5+1
    assume {:print "$at(106,35641,35642)"} true;
L3:

    // return $t0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:844:5+1
    assume {:print "$at(106,35641,35642)"} true;
    $ret0 := $t0;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:844:5+1
L4:

    // abort($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:844:5+1
    assume {:print "$at(106,35641,35642)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun coin::coin_to_fungible_asset<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:382:5+296
procedure {:inline 1} $1_coin_coin_to_fungible_asset'$1_aptos_coin_AptosCoin'(_$t0: $1_coin_Coin'$1_aptos_coin_AptosCoin') returns ($ret0: $1_fungible_asset_FungibleAsset)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t4: $1_object_Object'$1_fungible_asset_Metadata';
    var $t5: int;
    var $t6: int;
    var $t7: int;
    var $t8: $1_fungible_asset_FungibleAsset;
    var $t0: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$modifies: [int]bool;
    var $temp_0'$1_coin_Coin'$1_aptos_coin_AptosCoin'': $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_fungible_asset_FungibleAsset': $1_fungible_asset_FungibleAsset;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t3, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:318:9+58
    assume {:print "$at(107,14383,14441)"} true;
    assume ($t3 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // trace_local[coin]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:382:5+1
    assume {:print "$at(106,14471,14472)"} true;
    assume {:print "$track_local(30,7,0):", $t0} $t0 == $t0;

    // $t4 := coin::ensure_paired_metadata<#0>() on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:385:24+34
    assume {:print "$at(106,14628,14662)"} true;
    call $t4 := $1_coin_ensure_paired_metadata'$1_aptos_coin_AptosCoin'();
    if ($abort_flag) {
        assume {:print "$at(106,14628,14662)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,7):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[metadata]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:385:13+8
    assume {:print "$track_local(30,7,2):", $t4} $t4 == $t4;

    // assume Identical($t6, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:260:9+58
    assume {:print "$at(107,11994,12052)"} true;
    assume ($t6 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t7 := coin::burn_internal<#0>($t0) on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:386:22+19
    assume {:print "$at(106,14685,14704)"} true;
    call $t7 := $1_coin_burn_internal'$1_aptos_coin_AptosCoin'($t0);
    if ($abort_flag) {
        assume {:print "$at(106,14685,14704)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,7):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_local[amount]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:386:13+6
    assume {:print "$track_local(30,7,1):", $t7} $t7 == $t7;

    // $t8 := fungible_asset::mint_internal($t4, $t7) on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:387:9+47
    assume {:print "$at(106,14714,14761)"} true;
    call $t8 := $1_fungible_asset_mint_internal($t4, $t7);
    if ($abort_flag) {
        assume {:print "$at(106,14714,14761)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,7):", $t5} $t5 == $t5;
        goto L2;
    }

    // trace_return[0]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:387:9+47
    assume {:print "$track_return(30,7,0):", $t8} $t8 == $t8;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:388:5+1
    assume {:print "$at(106,14766,14767)"} true;
L1:

    // return $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:388:5+1
    assume {:print "$at(106,14766,14767)"} true;
    $ret0 := $t8;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:388:5+1
L2:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:388:5+1
    assume {:print "$at(106,14766,14767)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun coin::convert_and_take_paired_burn_ref<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:503:5+679
procedure {:inline 1} $1_coin_convert_and_take_paired_burn_ref'$1_aptos_coin_AptosCoin'(_$t0: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin') returns ($ret0: $1_fungible_asset_BurnRef)
{
    // declare local variables
    var $t1: $Mutation ($1_option_Option'$1_fungible_asset_BurnRef');
    var $t2: $1_object_Object'$1_fungible_asset_Metadata';
    var $t3: int;
    var $t4: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $t5: int;
    var $t6: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $t7: bool;
    var $t8: int;
    var $t9: int;
    var $t10: $1_object_Object'$1_fungible_asset_Metadata';
    var $t11: bool;
    var $t12: int;
    var $t13: bool;
    var $t14: int;
    var $t15: int;
    var $t16: $Mutation ($1_coin_PairedFungibleAssetRefs);
    var $t17: $Mutation ($1_option_Option'$1_fungible_asset_BurnRef');
    var $t18: $1_option_Option'$1_fungible_asset_BurnRef';
    var $t19: bool;
    var $t20: int;
    var $t21: int;
    var $t22: $1_fungible_asset_BurnRef;
    var $t23: $1_option_Option'$1_fungible_asset_BurnRef';
    var $t24: bool;
    var $t0: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin'': $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_fungible_asset_BurnRef': $1_fungible_asset_BurnRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_option_Option'$1_fungible_asset_BurnRef'': $1_option_Option'$1_fungible_asset_BurnRef';
    var $temp_0'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata''': $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $temp_0'address': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[burn_cap]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:503:5+1
    assume {:print "$at(106,21131,21132)"} true;
    assume {:print "$track_local(30,9,0):", $t0} $t0 == $t0;

    // coin::destroy_burn_cap<#0>($t0) on_abort goto L10 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:506:9+26
    assume {:print "$at(106,21306,21332)"} true;
    call $1_coin_destroy_burn_cap'$1_aptos_coin_AptosCoin'($t0);
    if ($abort_flag) {
        assume {:print "$at(106,21306,21332)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,9):", $t5} $t5 == $t5;
        goto L10;
    }

    // $t6 := coin::paired_metadata<#0>() on_abort goto L10 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:406:28+27
    assume {:print "$at(106,15651,15678)"} true;
    call $t6 := $1_coin_paired_metadata'$1_aptos_coin_AptosCoin'();
    if ($abort_flag) {
        assume {:print "$at(106,15651,15678)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,9):", $t5} $t5 == $t5;
        goto L10;
    }

    // trace_local[metadata_opt#124]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:406:13+12
    assume {:print "$track_local(30,9,4):", $t6} $t6 == $t6;

    // $t7 := opaque begin: option::is_some<object::Object<fungible_asset::Metadata>>($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:17+30
    assume {:print "$at(106,15696,15726)"} true;

    // assume WellFormed($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:17+30
    assume $IsValid'bool'($t7);

    // assume Eq<bool>($t7, option::spec_is_some<object::Object<fungible_asset::Metadata>>($t6)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:17+30
    assume $IsEqual'bool'($t7, $1_option_spec_is_some'$1_object_Object'$1_fungible_asset_Metadata''($t6));

    // $t7 := opaque end: option::is_some<object::Object<fungible_asset::Metadata>>($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:17+30

    // if ($t7) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:9+81
    if ($t7) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:9+81
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:9+81
    assume {:print "$at(106,15688,15769)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:66+22
L0:

    // $t8 := 16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:66+22
    assume {:print "$at(106,15745,15767)"} true;
    $t8 := 16;
    assume $IsValid'u64'($t8);

    // $t9 := error::not_found($t8) on_abort goto L10 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:49+40
    call $t9 := $1_error_not_found($t8);
    if ($abort_flag) {
        assume {:print "$at(106,15728,15768)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,9):", $t5} $t5 == $t5;
        goto L10;
    }

    // trace_abort($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:9+81
    assume {:print "$at(106,15688,15769)"} true;
    assume {:print "$track_abort(30,9):", $t9} $t9 == $t9;

    // $t5 := move($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:9+81
    $t5 := $t9;

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:407:9+81
    goto L10;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:30+12
    assume {:print "$at(106,15800,15812)"} true;
L2:

    // $t10 := opaque begin: option::destroy_some<object::Object<fungible_asset::Metadata>>($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    assume {:print "$at(106,15779,15813)"} true;

    // assume Identical($t11, option::spec_is_none<object::Object<fungible_asset::Metadata>>($t6)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    assume ($t11 == $1_option_spec_is_none'$1_object_Object'$1_fungible_asset_Metadata''($t6));

    // if ($t11) goto L12 else goto L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    if ($t11) { goto L12; } else { goto L11; }

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
L12:

    // assume And(option::spec_is_none<object::Object<fungible_asset::Metadata>>($t6), Eq(262145, $t5)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    assume {:print "$at(106,15779,15813)"} true;
    assume ($1_option_spec_is_none'$1_object_Object'$1_fungible_asset_Metadata''($t6) && $IsEqual'num'(262145, $t5));

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    assume {:print "$at(106,15779,15813)"} true;
    assume {:print "$track_abort(30,9):", $t5} $t5 == $t5;

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    goto L10;

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
L11:

    // assume WellFormed($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    assume {:print "$at(106,15779,15813)"} true;
    assume $IsValid'$1_object_Object'$1_fungible_asset_Metadata''($t10);

    // assume Eq<object::Object<fungible_asset::Metadata>>($t10, option::spec_borrow<object::Object<fungible_asset::Metadata>>($t6)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34
    assume $IsEqual'$1_object_Object'$1_fungible_asset_Metadata''($t10, $1_option_spec_borrow'$1_object_Object'$1_fungible_asset_Metadata''($t6));

    // $t10 := opaque end: option::destroy_some<object::Object<fungible_asset::Metadata>>($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:408:9+34

    // trace_local[metadata]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:507:13+8
    assume {:print "$at(106,21346,21354)"} true;
    assume {:print "$track_local(30,9,2):", $t10} $t10 == $t10;

    // $t12 := object::object_address<fungible_asset::Metadata>($t10) on_abort goto L10 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:508:29+25
    assume {:print "$at(106,21428,21453)"} true;
    call $t12 := $1_object_object_address'$1_fungible_asset_Metadata'($t10);
    if ($abort_flag) {
        assume {:print "$at(106,21428,21453)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,9):", $t5} $t5 == $t5;
        goto L10;
    }

    // trace_local[metadata_addr]($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:508:13+13
    assume {:print "$track_local(30,9,3):", $t12} $t12 == $t12;

    // $t13 := exists<coin::PairedFungibleAssetRefs>($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:509:17+6
    assume {:print "$at(106,21471,21477)"} true;
    $t13 := $ResourceExists($1_coin_PairedFungibleAssetRefs_$memory, $t12);

    // if ($t13) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:509:9+111
    if ($t13) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:509:9+111
L4:

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:509:9+111
    assume {:print "$at(106,21463,21574)"} true;
    goto L5;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:509:81+37
L3:

    // $t14 := 19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:509:81+37
    assume {:print "$at(106,21535,21572)"} true;
    $t14 := 19;
    assume $IsValid'u64'($t14);

    // $t15 := error::internal($t14) on_abort goto L10 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:509:65+54
    call $t15 := $1_error_internal($t14);
    if ($abort_flag) {
        assume {:print "$at(106,21519,21573)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,9):", $t5} $t5 == $t5;
        goto L10;
    }

    // trace_abort($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:509:9+111
    assume {:print "$at(106,21463,21574)"} true;
    assume {:print "$track_abort(30,9):", $t15} $t15 == $t15;

    // $t5 := move($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:509:9+111
    $t5 := $t15;

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:509:9+111
    goto L10;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:510:76+13
    assume {:print "$at(106,21651,21664)"} true;
L5:

    // $t16 := borrow_global<coin::PairedFungibleAssetRefs>($t12) on_abort goto L10 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:510:33+17
    assume {:print "$at(106,21608,21625)"} true;
    if (!$ResourceExists($1_coin_PairedFungibleAssetRefs_$memory, $t12)) {
        call $ExecFailureAbort();
    } else {
        $t16 := $Mutation($Global($t12), EmptyVec(), $ResourceValue($1_coin_PairedFungibleAssetRefs_$memory, $t12));
    }
    if ($abort_flag) {
        assume {:print "$at(106,21608,21625)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,9):", $t5} $t5 == $t5;
        goto L10;
    }

    // $t17 := borrow_field<coin::PairedFungibleAssetRefs>.burn_ref_opt($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:510:28+75
    $t17 := $ChildMutation($t16, 2, $Dereference($t16)->$burn_ref_opt);

    // trace_local[burn_ref_opt]($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:510:13+12
    $temp_0'$1_option_Option'$1_fungible_asset_BurnRef'' := $Dereference($t17);
    assume {:print "$track_local(30,9,1):", $temp_0'$1_option_Option'$1_fungible_asset_BurnRef''} $temp_0'$1_option_Option'$1_fungible_asset_BurnRef'' == $temp_0'$1_option_Option'$1_fungible_asset_BurnRef'';

    // $t18 := read_ref($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:33+12
    assume {:print "$at(106,21712,21724)"} true;
    $t18 := $Dereference($t17);

    // $t19 := opaque begin: option::is_some<fungible_asset::BurnRef>($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:17+29

    // assume WellFormed($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:17+29
    assume $IsValid'bool'($t19);

    // assume Eq<bool>($t19, option::spec_is_some<fungible_asset::BurnRef>($t18)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:17+29
    assume $IsEqual'bool'($t19, $1_option_spec_is_some'$1_fungible_asset_BurnRef'($t18));

    // $t19 := opaque end: option::is_some<fungible_asset::BurnRef>($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:17+29

    // if ($t19) goto L7 else goto L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:9+77
    if ($t19) { goto L7; } else { goto L6; }

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:9+77
L7:

    // goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:9+77
    assume {:print "$at(106,21688,21765)"} true;
    goto L8;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:9+77
L6:

    // pack_ref_deep($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:9+77
    assume {:print "$at(106,21688,21765)"} true;

    // drop($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:9+77

    // $t20 := 25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:65+19
    $t20 := 25;
    assume $IsValid'u64'($t20);

    // $t21 := error::not_found($t20) on_abort goto L10 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:48+37
    call $t21 := $1_error_not_found($t20);
    if ($abort_flag) {
        assume {:print "$at(106,21727,21764)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,9):", $t5} $t5 == $t5;
        goto L10;
    }

    // trace_abort($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:9+77
    assume {:print "$at(106,21688,21765)"} true;
    assume {:print "$track_abort(30,9):", $t21} $t21 == $t21;

    // $t5 := move($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:9+77
    $t5 := $t21;

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:511:9+77
    goto L10;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:25+12
    assume {:print "$at(106,21791,21803)"} true;
L8:

    // $t22 := opaque begin: option::extract<fungible_asset::BurnRef>($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    assume {:print "$at(106,21775,21804)"} true;

    // $t23 := read_ref($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    $t23 := $Dereference($t17);

    // assume Identical($t24, option::spec_is_none<fungible_asset::BurnRef>($t17)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    assume ($t24 == $1_option_spec_is_none'$1_fungible_asset_BurnRef'($Dereference($t17)));

    // if ($t24) goto L15 else goto L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    if ($t24) { goto L15; } else { goto L16; }

    // label L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
L14:

    // assume And(option::spec_is_none<fungible_asset::BurnRef>($t17), Eq(262145, $t5)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    assume {:print "$at(106,21775,21804)"} true;
    assume ($1_option_spec_is_none'$1_fungible_asset_BurnRef'($Dereference($t17)) && $IsEqual'num'(262145, $t5));

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    assume {:print "$at(106,21775,21804)"} true;
    assume {:print "$track_abort(30,9):", $t5} $t5 == $t5;

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    goto L10;

    // label L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
L13:

    // $t17 := havoc[mut]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    assume {:print "$at(106,21775,21804)"} true;
    havoc $temp_0'$1_option_Option'$1_fungible_asset_BurnRef'';
    $t17 := $UpdateMutation($t17, $temp_0'$1_option_Option'$1_fungible_asset_BurnRef'');

    // assume And(WellFormed($t17), Le(Len<fungible_asset::BurnRef>(select option::Option.vec($t17)), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    assume ($IsValid'$1_option_Option'$1_fungible_asset_BurnRef''($Dereference($t17)) && (LenVec($Dereference($t17)->$vec) <= 1));

    // assume WellFormed($t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    assume $IsValid'$1_fungible_asset_BurnRef'($t22);

    // assume Eq<fungible_asset::BurnRef>($t22, option::spec_borrow<fungible_asset::BurnRef>($t23)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    assume $IsEqual'$1_fungible_asset_BurnRef'($t22, $1_option_spec_borrow'$1_fungible_asset_BurnRef'($t23));

    // assume option::spec_is_none<fungible_asset::BurnRef>($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    assume $1_option_spec_is_none'$1_fungible_asset_BurnRef'($Dereference($t17));

    // $t22 := opaque end: option::extract<fungible_asset::BurnRef>($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29

    // write_back[Reference($t16).burn_ref_opt (option::Option<fungible_asset::BurnRef>)]($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    $t16 := $UpdateMutation($t16, $Update'$1_coin_PairedFungibleAssetRefs'_burn_ref_opt($Dereference($t16), $Dereference($t17)));

    // pack_ref_deep($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29

    // write_back[coin::PairedFungibleAssetRefs@]($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    $1_coin_PairedFungibleAssetRefs_$memory := $ResourceUpdate($1_coin_PairedFungibleAssetRefs_$memory, $GlobalLocationAddress($t16),
        $Dereference($t16));

    // trace_return[0]($t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:512:9+29
    assume {:print "$track_return(30,9,0):", $t22} $t22 == $t22;

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:513:5+1
    assume {:print "$at(106,21809,21810)"} true;
L9:

    // return $t22 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:513:5+1
    assume {:print "$at(106,21809,21810)"} true;
    $ret0 := $t22;
    return;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:513:5+1
L10:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:513:5+1
    assume {:print "$at(106,21809,21810)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

    // label L15 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L15:

    // drop($t16) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L14 at <internal>:1:1+10
    goto L14;

    // label L16 at <internal>:1:1+10
L16:

    // drop($t17) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L13 at <internal>:1:1+10
    goto L13;

}

// fun coin::destroy_burn_cap<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1228:5+133
procedure {:inline 1} $1_coin_destroy_burn_cap'$1_aptos_coin_AptosCoin'(_$t0: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin') returns ()
{
    // declare local variables
    var $t1: bool;
    var $t0: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin'': $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[burn_cap]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1228:5+1
    assume {:print "$at(106,51074,51075)"} true;
    assume {:print "$track_local(30,14,0):", $t0} $t0 == $t0;

    // $t1 := unpack coin::BurnCapability<#0>($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1229:13+27
    assume {:print "$at(106,51162,51189)"} true;
    $t1 := $t0->$dummy_field;

    // drop($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1229:13+27

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1230:5+1
    assume {:print "$at(106,51206,51207)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:1230:5+1
    assume {:print "$at(106,51206,51207)"} true;
    return;

}

// fun coin::ensure_paired_metadata<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:366:5+188
procedure {:inline 1} $1_coin_ensure_paired_metadata'$1_aptos_coin_AptosCoin'() returns ($ret0: $1_object_Object'$1_fungible_asset_Metadata')
{
    // declare local variables
    var $t0: $1_string_String;
    var $t1: $signer;
    var $t2: $signer;
    var $t3: $1_object_ConstructorRef;
    var $t4: $1_option_Option'u128';
    var $t5: $1_object_ConstructorRef;
    var $t6: $signer;
    var $t7: $1_fungible_asset_BurnRef;
    var $t8: bool;
    var $t9: $Mutation ($1_coin_CoinConversionMap);
    var $t10: $1_object_Object'$1_fungible_asset_Metadata';
    var $t11: $1_object_ConstructorRef;
    var $t12: $signer;
    var $t13: $1_fungible_asset_MintRef;
    var $t14: $1_option_Option'u128';
    var $t15: $1_fungible_asset_TransferRef;
    var $t16: $1_type_info_TypeInfo;
    var $t17: $1_type_info_TypeInfo;
    var $t18: bool;
    var $t19: int;
    var $t20: int;
    var $t21: int;
    var $t22: int;
    var $t23: bool;
    var $t24: int;
    var $t25: int;
    var $t26: int;
    var $t27: $Mutation ($1_coin_CoinConversionMap);
    var $t28: $1_type_info_TypeInfo;
    var $t29: Table int ($1_object_Object'$1_fungible_asset_Metadata');
    var $t30: bool;
    var $t31: bool;
    var $t32: $1_string_String;
    var $t33: Vec (int);
    var $t34: $1_string_String;
    var $t35: bool;
    var $t36: bool;
    var $t37: bool;
    var $t38: bool;
    var $t39: int;
    var $t40: int;
    var $t41: int;
    var $t42: int;
    var $t43: int;
    var $t44: $signer;
    var $t45: $1_string_String;
    var $t46: Vec (int);
    var $t47: int;
    var $t48: int;
    var $t49: int;
    var $t50: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t51: $1_optional_aggregator_OptionalAggregator;
    var $t52: int;
    var $t53: $1_option_Option'u128';
    var $t54: bool;
    var $t55: int;
    var $t56: bool;
    var $t57: int;
    var $t58: bool;
    var $t59: int;
    var $t60: $1_string_String;
    var $t61: int;
    var $t62: $1_string_String;
    var $t63: int;
    var $t64: int;
    var $t65: Vec (int);
    var $t66: $1_string_String;
    var $t67: Vec (int);
    var $t68: $1_string_String;
    var $t69: $signer;
    var $t70: $1_type_info_TypeInfo;
    var $t71: $1_coin_PairedCoinType;
    var $t72: $1_object_Object'$1_fungible_asset_Metadata';
    var $t73: $Mutation (Table int ($1_object_Object'$1_fungible_asset_Metadata'));
    var $t74: int;
    var $t75: $1_coin_PairCreation;
    var $t76: $1_fungible_asset_MintRef;
    var $t77: $1_fungible_asset_TransferRef;
    var $t78: $1_fungible_asset_BurnRef;
    var $t79: $1_option_Option'$1_fungible_asset_MintRef';
    var $t80: $1_option_Option'$1_fungible_asset_TransferRef';
    var $t81: $1_option_Option'$1_fungible_asset_BurnRef';
    var $t82: $1_coin_PairedFungibleAssetRefs;
    var $t83: Table int ($1_object_Object'$1_fungible_asset_Metadata');
    var $t84: $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_coin_CoinConversionMap': $1_coin_CoinConversionMap;
    var $temp_0'$1_fungible_asset_BurnRef': $1_fungible_asset_BurnRef;
    var $temp_0'$1_fungible_asset_MintRef': $1_fungible_asset_MintRef;
    var $temp_0'$1_fungible_asset_TransferRef': $1_fungible_asset_TransferRef;
    var $temp_0'$1_object_ConstructorRef': $1_object_ConstructorRef;
    var $temp_0'$1_object_Object'$1_fungible_asset_Metadata'': $1_object_Object'$1_fungible_asset_Metadata';
    var $temp_0'$1_option_Option'u128'': $1_option_Option'u128';
    var $temp_0'$1_type_info_TypeInfo': $1_type_info_TypeInfo;
    var $temp_0'bool': bool;
    var $temp_0'signer': $signer;

    // bytecode translation starts here
    // $t18 := features::coin_to_fungible_asset_migration_feature_enabled() on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:311:13+60
    assume {:print "$at(106,11046,11106)"} true;
    call $t18 := $1_features_coin_to_fungible_asset_migration_feature_enabled();
    if ($abort_flag) {
        assume {:print "$at(106,11046,11106)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // if ($t18) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:310:9+159
    assume {:print "$at(106,11025,11184)"} true;
    if ($t18) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:310:9+159
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:310:9+159
    assume {:print "$at(106,11025,11184)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:312:34+32
    assume {:print "$at(106,11141,11173)"} true;
L0:

    // $t20 := 26 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:312:34+32
    assume {:print "$at(106,11141,11173)"} true;
    $t20 := 26;
    assume $IsValid'u64'($t20);

    // $t21 := error::invalid_state($t20) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:312:13+54
    call $t21 := $1_error_invalid_state($t20);
    if ($abort_flag) {
        assume {:print "$at(106,11120,11174)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // trace_abort($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:310:9+159
    assume {:print "$at(106,11025,11184)"} true;
    assume {:print "$track_abort(30,19):", $t21} $t21 == $t21;

    // $t19 := move($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:310:9+159
    $t19 := $t21;

    // goto L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:310:9+159
    goto L18;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:314:43+16
    assume {:print "$at(106,11228,11244)"} true;
L2:

    // $t22 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:314:43+16
    assume {:print "$at(106,11228,11244)"} true;
    $t22 := 1;
    assume $IsValid'address'($t22);

    // $t23 := exists<coin::CoinConversionMap>($t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:314:17+6
    $t23 := $ResourceExists($1_coin_CoinConversionMap_$memory, $t22);

    // if ($t23) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:314:9+102
    if ($t23) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:314:9+102
L4:

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:314:9+102
    assume {:print "$at(106,11194,11296)"} true;
    goto L5;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:314:79+30
L3:

    // $t24 := 27 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:314:79+30
    assume {:print "$at(106,11264,11294)"} true;
    $t24 := 27;
    assume $IsValid'u64'($t24);

    // $t25 := error::not_found($t24) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:314:62+48
    call $t25 := $1_error_not_found($t24);
    if ($abort_flag) {
        assume {:print "$at(106,11247,11295)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // trace_abort($t25) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:314:9+102
    assume {:print "$at(106,11194,11296)"} true;
    assume {:print "$track_abort(30,19):", $t25} $t25 == $t25;

    // $t19 := move($t25) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:314:9+102
    $t19 := $t25;

    // goto L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:314:9+102
    goto L18;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:315:56+16
    assume {:print "$at(106,11353,11369)"} true;
L5:

    // $t26 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:315:56+16
    assume {:print "$at(106,11353,11369)"} true;
    $t26 := 1;
    assume $IsValid'address'($t26);

    // $t27 := borrow_global<coin::CoinConversionMap>($t26) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:315:19+17
    if (!$ResourceExists($1_coin_CoinConversionMap_$memory, $t26)) {
        call $ExecFailureAbort();
    } else {
        $t27 := $Mutation($Global($t26), EmptyVec(), $ResourceValue($1_coin_CoinConversionMap_$memory, $t26));
    }
    if ($abort_flag) {
        assume {:print "$at(106,11316,11333)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // trace_local[map#143]($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:315:13+3
    $temp_0'$1_coin_CoinConversionMap' := $Dereference($t27);
    assume {:print "$track_local(30,19,9):", $temp_0'$1_coin_CoinConversionMap'} $temp_0'$1_coin_CoinConversionMap' == $temp_0'$1_coin_CoinConversionMap';

    // $t28 := type_info::type_of<#0>() on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:316:20+30
    assume {:print "$at(106,11391,11421)"} true;
    if (!true) {
        call $ExecFailureAbort();
    }
    else {
        $t28 := $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9));
    }
    if ($abort_flag) {
        assume {:print "$at(106,11391,11421)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // trace_local[type#144]($t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:316:13+4
    assume {:print "$track_local(30,19,16):", $t28} $t28 == $t28;

    // $t29 := get_field<coin::CoinConversionMap>.coin_to_fungible_asset_map($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:317:30+31
    assume {:print "$at(106,11452,11483)"} true;
    $t29 := $Dereference($t27)->$coin_to_fungible_asset_map;

    // $t30 := table::contains<type_info::TypeInfo, object::Object<fungible_asset::Metadata>>($t29, $t28) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:317:14+54
    call $t30 := $1_table_contains'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''($t29, $t28);
    if ($abort_flag) {
        assume {:print "$at(106,11436,11490)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // $t31 := !($t30) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:317:13+1
    call $t31 := $Not($t30);

    // if ($t31) goto L7 else goto L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:317:9+2199
    if ($t31) { goto L7; } else { goto L6; }

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:306:9+32
    assume {:print "$at(106,10812,10844)"} true;
L7:

    // $t32 := type_info::type_name<#0>() on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:306:9+32
    assume {:print "$at(106,10812,10844)"} true;
    $t32 := $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 97][6 := 112][7 := 116][8 := 111][9 := 115][10 := 95][11 := 99][12 := 111][13 := 105][14 := 110][15 := 58][16 := 58][17 := 65][18 := 112][19 := 116][20 := 111][21 := 115][22 := 67][23 := 111][24 := 105][25 := 110], 26));
    if ($abort_flag) {
        assume {:print "$at(106,10812,10844)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // $t33 := [48, 120, 49, 58, 58, 97, 112, 116, 111, 115, 95, 99, 111, 105, 110, 58, 58, 65, 112, 116, 111, 115, 67, 111, 105, 110] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:306:58+29
    $t33 := ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(ConcatVec(MakeVec4(48, 120, 49, 58), MakeVec4(58, 97, 112, 116)), MakeVec4(111, 115, 95, 99)), MakeVec4(111, 105, 110, 58)), MakeVec4(58, 65, 112, 116)), MakeVec4(111, 115, 67, 111)), MakeVec2(105, 110));
    assume $IsValid'vec'u8''($t33);

    // $t34 := string::utf8($t33) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:306:45+43
    call $t34 := $1_string_utf8($t33);
    if ($abort_flag) {
        assume {:print "$at(106,10848,10891)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // $t35 := ==($t32, $t34) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:306:42+2
    $t35 := $IsEqual'$1_string_String'($t32, $t34);

    // trace_local[is_apt#145]($t35) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:318:17+6
    assume {:print "$at(106,11510,11516)"} true;
    assume {:print "$track_local(30,19,8):", $t35} $t35 == $t35;

    // $t36 := !($t35) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:319:21+1
    assume {:print "$at(106,11559,11560)"} true;
    call $t36 := $Not($t35);

    // $t37 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:367:66+5
    assume {:print "$at(106,13972,13977)"} true;
    $t37 := false;
    assume $IsValid'bool'($t37);

    // $t38 := ||($t36, $t37) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:319:29+2
    assume {:print "$at(106,11567,11569)"} true;
    call $t38 := $Or($t36, $t37);

    // if ($t38) goto L9 else goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:319:13+89
    if ($t38) { goto L9; } else { goto L8; }

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:319:13+89
L9:

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:319:13+89
    assume {:print "$at(106,11551,11640)"} true;
    goto L10;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:319:13+89
L8:

    // drop($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:319:13+89
    assume {:print "$at(106,11551,11640)"} true;

    // $t39 := 28 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:319:73+27
    $t39 := 28;
    assume $IsValid'u64'($t39);

    // $t40 := error::invalid_state($t39) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:319:52+49
    call $t40 := $1_error_invalid_state($t39);
    if ($abort_flag) {
        assume {:print "$at(106,11590,11639)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // trace_abort($t40) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:319:13+89
    assume {:print "$at(106,11551,11640)"} true;
    assume {:print "$track_abort(30,19):", $t40} $t40 == $t40;

    // $t19 := move($t40) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:319:13+89
    $t19 := $t40;

    // goto L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:319:13+89
    goto L18;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:321:21+6
    assume {:print "$at(106,11701,11707)"} true;
L10:

    // if ($t35) goto L12 else goto L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:321:17+380
    assume {:print "$at(106,11697,12077)"} true;
    if ($t35) { goto L12; } else { goto L11; }

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:322:61+16
    assume {:print "$at(106,11771,11787)"} true;
L12:

    // $t41 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:322:61+16
    assume {:print "$at(106,11771,11787)"} true;
    $t41 := 1;
    assume $IsValid'address'($t41);

    // $t42 := 0xa at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:322:79+21
    $t42 := 10;
    assume $IsValid'address'($t42);

    // $t3 := object::create_sticky_object_at_address($t41, $t42) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:322:21+80
    call $t3 := $1_object_create_sticky_object_at_address($t41, $t42);
    if ($abort_flag) {
        assume {:print "$at(106,11731,11811)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // goto L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:321:17+380
    assume {:print "$at(106,11697,12077)"} true;
    goto L13;

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:325:55+21
    assume {:print "$at(106,11940,11961)"} true;
L11:

    // $t43 := 0xa at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:325:55+21
    assume {:print "$at(106,11940,11961)"} true;
    $t43 := 10;
    assume $IsValid'address'($t43);

    // $t44 := opaque begin: create_signer::create_signer($t43) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:325:26+51

    // assume WellFormed($t44) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:325:26+51
    assume $IsValid'signer'($t44) && $1_signer_is_txn_signer($t44) && $1_signer_is_txn_signer_addr($t44->$addr);

    // assume Eq<address>(signer::$address_of($t44), $t43) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:325:26+51
    assume $IsEqual'address'($1_signer_$address_of($t44), $t43);

    // $t44 := opaque end: create_signer::create_signer($t43) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:325:26+51

    // $t45 := type_info::type_name<#0>() on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:326:41+32
    assume {:print "$at(106,12004,12036)"} true;
    $t45 := $1_string_String(Vec(DefaultVecMap()[0 := 48][1 := 120][2 := 49][3 := 58][4 := 58][5 := 97][6 := 112][7 := 116][8 := 111][9 := 115][10 := 95][11 := 99][12 := 111][13 := 105][14 := 110][15 := 58][16 := 58][17 := 65][18 := 112][19 := 116][20 := 111][21 := 115][22 := 67][23 := 111][24 := 105][25 := 110], 26));
    if ($abort_flag) {
        assume {:print "$at(106,12004,12036)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // $t46 := string::bytes($t45) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:326:26+48
    call $t46 := $1_string_bytes($t45);
    if ($abort_flag) {
        assume {:print "$at(106,11989,12037)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // assume Identical($t47, signer::$address_of($t44)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.spec.move:154:9+50
    assume {:print "$at(157,6577,6627)"} true;
    assume ($t47 == $1_signer_$address_of($t44));

    // assume Identical($t48, object::spec_create_object_address($t47, $t46)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/object.spec.move:155:9+65
    assume {:print "$at(157,6636,6701)"} true;
    assume ($t48 == $1_object_spec_create_object_address($t47, $t46));

    // $t3 := object::create_named_object($t44, $t46) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:324:21+202
    assume {:print "$at(106,11857,12059)"} true;
    call $t3 := $1_object_create_named_object($t44, $t46);
    if ($abort_flag) {
        assume {:print "$at(106,11857,12059)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // label L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:321:17+380
    assume {:print "$at(106,11697,12077)"} true;
L13:

    // trace_local[metadata_object_cref#146]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:320:17+20
    assume {:print "$at(106,11658,11678)"} true;
    assume {:print "$track_local(30,19,11):", $t3} $t3 == $t3;

    // assume Identical($t49, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:229:9+63
    assume {:print "$at(107,10814,10877)"} true;
    assume ($t49 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // assume Identical($t50, select coin::CoinInfo.supply<coin::CoinInfo<#0>>(global<coin::CoinInfo<#0>>($t49))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:232:9+64
    assume {:print "$at(107,10977,11041)"} true;
    assume ($t50 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t49)->$supply);

    // assume Identical($t51, option::spec_borrow<optional_aggregator::OptionalAggregator>($t50)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:233:9+47
    assume {:print "$at(107,11050,11097)"} true;
    assume ($t51 == $1_option_spec_borrow'$1_optional_aggregator_OptionalAggregator'($t50));

    // assume Identical($t52, optional_aggregator::optional_aggregator_value($t51)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:234:9+67
    assume {:print "$at(107,11106,11173)"} true;
    assume ($t52 == $1_optional_aggregator_optional_aggregator_value($t51));

    // $t53 := coin::coin_supply<#0>() on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:331:29+23
    assume {:print "$at(106,12227,12250)"} true;
    call $t53 := $1_coin_coin_supply'$1_aptos_coin_AptosCoin'();
    if ($abort_flag) {
        assume {:print "$at(106,12227,12250)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // trace_local[o#153]($t53) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:305:50+1
    assume {:print "$at(13,10190,10191)"} true;
    assume {:print "$track_local(30,19,14):", $t53} $t53 == $t53;

    // $t54 := opaque begin: option::is_some<u128>($t53) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:306:13+11
    assume {:print "$at(13,10272,10283)"} true;

    // assume WellFormed($t54) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:306:13+11
    assume $IsValid'bool'($t54);

    // assume Eq<bool>($t54, option::spec_is_some<u128>($t53)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:306:13+11
    assume $IsEqual'bool'($t54, $1_option_spec_is_some'u128'($t53));

    // $t54 := opaque end: option::is_some<u128>($t53) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:306:13+11

    // if ($t54) goto L15 else goto L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:306:9+130
    if ($t54) { goto L15; } else { goto L14; }

    // label L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:33+1
    assume {:print "$at(13,10319,10320)"} true;
L15:

    // $t55 := opaque begin: option::destroy_some<u128>($t53) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:20+15
    assume {:print "$at(13,10306,10321)"} true;

    // assume Identical($t56, option::spec_is_none<u128>($t53)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:20+15
    assume ($t56 == $1_option_spec_is_none'u128'($t53));

    // if ($t56) goto L23 else goto L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:20+15
    if ($t56) { goto L23; } else { goto L19; }

    // label L20 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:20+15
L20:

    // assume And(option::spec_is_none<u128>($t53), Eq(262145, $t19)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:20+15
    assume {:print "$at(13,10306,10321)"} true;
    assume ($1_option_spec_is_none'u128'($t53) && $IsEqual'num'(262145, $t19));

    // trace_abort($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:20+15
    assume {:print "$at(13,10306,10321)"} true;
    assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;

    // goto L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:20+15
    goto L18;

    // label L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:20+15
L19:

    // assume WellFormed($t55) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:20+15
    assume {:print "$at(13,10306,10321)"} true;
    assume $IsValid'u128'($t55);

    // assume Eq<u128>($t55, option::spec_borrow<u128>($t53)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:20+15
    assume $IsEqual'u128'($t55, $1_option_spec_borrow'u128'($t53));

    // $t55 := opaque end: option::destroy_some<u128>($t53) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:20+15

    // drop($t55) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:20+15

    // $t57 := 340282366920938463463374607431768211455 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:331:58+8
    assume {:print "$at(106,12256,12264)"} true;
    $t57 := 340282366920938463463374607431768211455;
    assume $IsValid'u128'($t57);

    // $t4 := opaque begin: option::some<u128>($t57) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:13+24
    assume {:print "$at(13,10299,10323)"} true;

    // assume And(WellFormed($t4), Le(Len<u128>(select option::Option.vec($t4)), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:13+24
    assume ($IsValid'$1_option_Option'u128''($t4) && (LenVec($t4->$vec) <= 1));

    // assume Eq<option::Option<u128>>($t4, option::spec_some<u128>($t57)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:13+24
    assume $IsEqual'$1_option_Option'u128''($t4, $1_option_spec_some'u128'($t57));

    // $t4 := opaque end: option::some<u128>($t57) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:307:13+24

    // goto L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:306:9+130
    assume {:print "$at(13,10268,10398)"} true;
    goto L16;

    // label L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:309:26+1
    assume {:print "$at(13,10366,10367)"} true;
L14:

    // opaque begin: option::destroy_none<u128>($t53) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:309:13+15
    assume {:print "$at(13,10353,10368)"} true;

    // assume Identical($t58, option::spec_is_some<u128>($t53)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:309:13+15
    assume ($t58 == $1_option_spec_is_some'u128'($t53));

    // if ($t58) goto L24 else goto L21 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:309:13+15
    if ($t58) { goto L24; } else { goto L21; }

    // label L22 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:309:13+15
L22:

    // assume And(option::spec_is_some<u128>($t53), Eq(262144, $t19)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:309:13+15
    assume {:print "$at(13,10353,10368)"} true;
    assume ($1_option_spec_is_some'u128'($t53) && $IsEqual'num'(262144, $t19));

    // trace_abort($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:309:13+15
    assume {:print "$at(13,10353,10368)"} true;
    assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;

    // goto L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:309:13+15
    goto L18;

    // label L21 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:309:13+15
L21:

    // opaque end: option::destroy_none<u128>($t53) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:309:13+15
    assume {:print "$at(13,10353,10368)"} true;

    // $t4 := opaque begin: option::none<u128>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:310:13+6
    assume {:print "$at(13,10382,10388)"} true;

    // assume And(WellFormed($t4), Le(Len<u128>(select option::Option.vec($t4)), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:310:13+6
    assume ($IsValid'$1_option_Option'u128''($t4) && (LenVec($t4->$vec) <= 1));

    // assume Eq<option::Option<u128>>($t4, option::spec_none<u128>()) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:310:13+6
    assume $IsEqual'$1_option_Option'u128''($t4, $1_option_spec_none'u128'());

    // $t4 := opaque end: option::none<u128>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/option.move:310:13+6

    // label L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:330:17+21
    assume {:print "$at(106,12176,12197)"} true;
L16:

    // assume Identical($t59, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:205:9+58
    assume {:print "$at(107,10157,10215)"} true;
    assume ($t59 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t60 := coin::name<#0>() on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:332:17+16
    assume {:print "$at(106,12283,12299)"} true;
    call $t60 := $1_coin_name'$1_aptos_coin_AptosCoin'();
    if ($abort_flag) {
        assume {:print "$at(106,12283,12299)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // assume Identical($t61, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:205:9+58
    assume {:print "$at(107,10157,10215)"} true;
    assume ($t61 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t62 := coin::symbol<#0>() on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:333:17+18
    assume {:print "$at(106,12317,12335)"} true;
    call $t62 := $1_coin_symbol'$1_aptos_coin_AptosCoin'();
    if ($abort_flag) {
        assume {:print "$at(106,12317,12335)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // assume Identical($t63, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<#0>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:205:9+58
    assume {:print "$at(107,10157,10215)"} true;
    assume ($t63 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t64 := coin::decimals<#0>() on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:334:17+20
    assume {:print "$at(106,12353,12373)"} true;
    call $t64 := $1_coin_decimals'$1_aptos_coin_AptosCoin'();
    if ($abort_flag) {
        assume {:print "$at(106,12353,12373)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // $t65 := [] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:335:30+3
    assume {:print "$at(106,12404,12407)"} true;
    $t65 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t65);

    // $t66 := string::utf8($t65) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:335:17+17
    call $t66 := $1_string_utf8($t65);
    if ($abort_flag) {
        assume {:print "$at(106,12391,12408)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // $t67 := [] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:336:30+3
    assume {:print "$at(106,12439,12442)"} true;
    $t67 := $EmptyVec'u8'();
    assume $IsValid'vec'u8''($t67);

    // $t68 := string::utf8($t67) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:336:17+17
    call $t68 := $1_string_utf8($t67);
    if ($abort_flag) {
        assume {:print "$at(106,12426,12443)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // primary_fungible_store::create_primary_store_enabled_fungible_asset($t3, $t4, $t60, $t62, $t64, $t66, $t68) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:329:13+367
    assume {:print "$at(106,12091,12458)"} true;
    call $1_primary_fungible_store_create_primary_store_enabled_fungible_asset($t3, $t4, $t60, $t62, $t64, $t66, $t68);
    if ($abort_flag) {
        assume {:print "$at(106,12091,12458)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // $t69 := object::generate_signer($t3) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:339:43+46
    assume {:print "$at(106,12503,12549)"} true;
    call $t69 := $1_object_generate_signer($t3);
    if ($abort_flag) {
        assume {:print "$at(106,12503,12549)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // trace_local[metadata_object_signer#147]($t69) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:339:17+22
    assume {:print "$track_local(30,19,12):", $t69} $t69 == $t69;

    // $t70 := type_info::type_of<#0>() on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:340:24+30
    assume {:print "$at(106,12574,12604)"} true;
    if (!true) {
        call $ExecFailureAbort();
    }
    else {
        $t70 := $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9));
    }
    if ($abort_flag) {
        assume {:print "$at(106,12574,12604)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // trace_local[type#148]($t70) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:340:17+4
    assume {:print "$track_local(30,19,17):", $t70} $t70 == $t70;

    // $t71 := pack coin::PairedCoinType($t70) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:341:45+23
    assume {:print "$at(106,12650,12673)"} true;
    $t71 := $1_coin_PairedCoinType($t70);

    // move_to<coin::PairedCoinType>($t71, $t69) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:341:13+7
    if ($ResourceExists($1_coin_PairedCoinType_$memory, $t69->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_coin_PairedCoinType_$memory := $ResourceUpdate($1_coin_PairedCoinType_$memory, $t69->$addr, $t71);
    }
    if ($abort_flag) {
        assume {:print "$at(106,12618,12625)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // $t72 := object::object_from_constructor_ref<fungible_asset::Metadata>($t3) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:342:32+58
    assume {:print "$at(106,12707,12765)"} true;
    call $t72 := $1_object_object_from_constructor_ref'$1_fungible_asset_Metadata'($t3);
    if ($abort_flag) {
        assume {:print "$at(106,12707,12765)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // trace_local[metadata_obj#149]($t72) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:342:17+12
    assume {:print "$track_local(30,19,10):", $t72} $t72 == $t72;

    // $t73 := borrow_field<coin::CoinConversionMap>.coin_to_fungible_asset_map($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:344:24+35
    assume {:print "$at(106,12791,12826)"} true;
    $t73 := $ChildMutation($t27, 0, $Dereference($t27)->$coin_to_fungible_asset_map);

    // table::add<type_info::TypeInfo, object::Object<fungible_asset::Metadata>>($t73, $t70, $t72) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:344:13+67
    call $t73 := $1_table_add'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''($t73, $t70, $t72);
    if ($abort_flag) {
        assume {:print "$at(106,12780,12847)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // write_back[Reference($t27).coin_to_fungible_asset_map (table::Table<type_info::TypeInfo, object::Object<fungible_asset::Metadata>>)]($t73) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:344:13+67
    $t27 := $UpdateMutation($t27, $Update'$1_coin_CoinConversionMap'_coin_to_fungible_asset_map($Dereference($t27), $Dereference($t73)));

    // $t74 := object::object_address<fungible_asset::Metadata>($t72) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:347:50+29
    assume {:print "$at(106,12970,12999)"} true;
    call $t74 := $1_object_object_address'$1_fungible_asset_Metadata'($t72);
    if ($abort_flag) {
        assume {:print "$at(106,12970,12999)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // $t75 := pack coin::PairCreation($t70, $t74) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:345:25+140
    assume {:print "$at(106,12873,13013)"} true;
    $t75 := $1_coin_PairCreation($t70, $t74);

    // opaque begin: event::emit<coin::PairCreation>($t75) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:345:13+153

    // opaque end: event::emit<coin::PairCreation>($t75) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:345:13+153

    // $t76 := fungible_asset::generate_mint_ref($t3) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:351:28+56
    assume {:print "$at(106,13084,13140)"} true;
    call $t76 := $1_fungible_asset_generate_mint_ref($t3);
    if ($abort_flag) {
        assume {:print "$at(106,13084,13140)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // trace_local[mint_ref#150]($t76) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:351:17+8
    assume {:print "$track_local(30,19,13):", $t76} $t76 == $t76;

    // $t77 := fungible_asset::generate_transfer_ref($t3) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:352:32+60
    assume {:print "$at(106,13173,13233)"} true;
    call $t77 := $1_fungible_asset_generate_transfer_ref($t3);
    if ($abort_flag) {
        assume {:print "$at(106,13173,13233)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // trace_local[transfer_ref#151]($t77) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:352:17+12
    assume {:print "$track_local(30,19,15):", $t77} $t77 == $t77;

    // $t78 := fungible_asset::generate_burn_ref($t3) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:353:28+56
    assume {:print "$at(106,13262,13318)"} true;
    call $t78 := $1_fungible_asset_generate_burn_ref($t3);
    if ($abort_flag) {
        assume {:print "$at(106,13262,13318)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // trace_local[burn_ref#152]($t78) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:353:17+8
    assume {:print "$track_local(30,19,7):", $t78} $t78 == $t78;

    // $t79 := opaque begin: option::some<fungible_asset::MintRef>($t76) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:356:35+22
    assume {:print "$at(106,13440,13462)"} true;

    // assume And(WellFormed($t79), Le(Len<fungible_asset::MintRef>(select option::Option.vec($t79)), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:356:35+22
    assume ($IsValid'$1_option_Option'$1_fungible_asset_MintRef''($t79) && (LenVec($t79->$vec) <= 1));

    // assume Eq<option::Option<fungible_asset::MintRef>>($t79, option::spec_some<fungible_asset::MintRef>($t76)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:356:35+22
    assume $IsEqual'$1_option_Option'$1_fungible_asset_MintRef''($t79, $1_option_spec_some'$1_fungible_asset_MintRef'($t76));

    // $t79 := opaque end: option::some<fungible_asset::MintRef>($t76) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:356:35+22

    // $t80 := opaque begin: option::some<fungible_asset::TransferRef>($t77) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:357:39+26
    assume {:print "$at(106,13502,13528)"} true;

    // assume And(WellFormed($t80), Le(Len<fungible_asset::TransferRef>(select option::Option.vec($t80)), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:357:39+26
    assume ($IsValid'$1_option_Option'$1_fungible_asset_TransferRef''($t80) && (LenVec($t80->$vec) <= 1));

    // assume Eq<option::Option<fungible_asset::TransferRef>>($t80, option::spec_some<fungible_asset::TransferRef>($t77)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:357:39+26
    assume $IsEqual'$1_option_Option'$1_fungible_asset_TransferRef''($t80, $1_option_spec_some'$1_fungible_asset_TransferRef'($t77));

    // $t80 := opaque end: option::some<fungible_asset::TransferRef>($t77) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:357:39+26

    // $t81 := opaque begin: option::some<fungible_asset::BurnRef>($t78) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:358:35+22
    assume {:print "$at(106,13564,13586)"} true;

    // assume And(WellFormed($t81), Le(Len<fungible_asset::BurnRef>(select option::Option.vec($t81)), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:358:35+22
    assume ($IsValid'$1_option_Option'$1_fungible_asset_BurnRef''($t81) && (LenVec($t81->$vec) <= 1));

    // assume Eq<option::Option<fungible_asset::BurnRef>>($t81, option::spec_some<fungible_asset::BurnRef>($t78)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:358:35+22
    assume $IsEqual'$1_option_Option'$1_fungible_asset_BurnRef''($t81, $1_option_spec_some'$1_fungible_asset_BurnRef'($t78));

    // $t81 := opaque end: option::some<fungible_asset::BurnRef>($t78) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:358:35+22

    // $t82 := pack coin::PairedFungibleAssetRefs($t79, $t80, $t81) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:355:17+225
    assume {:print "$at(106,13380,13605)"} true;
    $t82 := $1_coin_PairedFungibleAssetRefs($t79, $t80, $t81);

    // move_to<coin::PairedFungibleAssetRefs>($t82, $t69) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:354:13+7
    assume {:print "$at(106,13332,13339)"} true;
    if ($ResourceExists($1_coin_PairedFungibleAssetRefs_$memory, $t69->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_coin_PairedFungibleAssetRefs_$memory := $ResourceUpdate($1_coin_PairedFungibleAssetRefs_$memory, $t69->$addr, $t82);
    }
    if ($abort_flag) {
        assume {:print "$at(106,13332,13339)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:362:25+3
    assume {:print "$at(106,13656,13659)"} true;
L6:

    // $t83 := get_field<coin::CoinConversionMap>.coin_to_fungible_asset_map($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:362:24+31
    assume {:print "$at(106,13655,13686)"} true;
    $t83 := $Dereference($t27)->$coin_to_fungible_asset_map;

    // write_back[coin::CoinConversionMap@]($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:362:24+31
    $1_coin_CoinConversionMap_$memory := $ResourceUpdate($1_coin_CoinConversionMap_$memory, $GlobalLocationAddress($t27),
        $Dereference($t27));

    // $t84 := table::borrow<type_info::TypeInfo, object::Object<fungible_asset::Metadata>>($t83, $t28) on_abort goto L18 with $t19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:362:10+52
    call $t84 := $1_table_borrow'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''($t83, $t28);
    if ($abort_flag) {
        assume {:print "$at(106,13641,13693)"} true;
        $t19 := $abort_code;
        assume {:print "$track_abort(30,19):", $t19} $t19 == $t19;
        goto L18;
    }

    // trace_return[0]($t84) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:362:9+53
    assume {:print "$track_return(30,19,0):", $t84} $t84 == $t84;

    // label L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:368:5+1
    assume {:print "$at(106,13983,13984)"} true;
L17:

    // return $t84 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:368:5+1
    assume {:print "$at(106,13983,13984)"} true;
    $ret0 := $t84;
    return;

    // label L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:368:5+1
L18:

    // abort($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:368:5+1
    assume {:print "$at(106,13983,13984)"} true;
    $abort_code := $t19;
    $abort_flag := true;
    return;

    // label L23 at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;
L23:

    // drop($t27) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L20 at <internal>:1:1+10
    goto L20;

    // label L24 at <internal>:1:1+10
L24:

    // drop($t27) at <internal>:1:1+10
    assume {:print "$at(1,0,10)"} true;

    // goto L22 at <internal>:1:1+10
    goto L22;

}

// fun coin::paired_metadata<aptos_coin::AptosCoin> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:276:5+545
procedure {:inline 1} $1_coin_paired_metadata'$1_aptos_coin_AptosCoin'() returns ($ret0: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'')
{
    // declare local variables
    var $t0: bool;
    var $t1: Table int ($1_object_Object'$1_fungible_asset_Metadata');
    var $t2: $1_type_info_TypeInfo;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: $1_coin_CoinConversionMap;
    var $t9: Table int ($1_object_Object'$1_fungible_asset_Metadata');
    var $t10: $1_type_info_TypeInfo;
    var $t11: bool;
    var $t12: $1_object_Object'$1_fungible_asset_Metadata';
    var $t13: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $t14: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $t15: $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $temp_0'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata''': $1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'';
    var $temp_0'$1_table_Table'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''': Table int ($1_object_Object'$1_fungible_asset_Metadata');
    var $temp_0'$1_type_info_TypeInfo': $1_type_info_TypeInfo;

    // bytecode translation starts here
    // $t3 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:277:39+16
    assume {:print "$at(106,9674,9690)"} true;
    $t3 := 1;
    assume $IsValid'address'($t3);

    // $t4 := exists<coin::CoinConversionMap>($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:277:13+6
    $t4 := $ResourceExists($1_coin_CoinConversionMap_$memory, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:277:13+116
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:277:60+69
L1:

    // $t0 := features::coin_to_fungible_asset_migration_feature_enabled() on_abort goto L8 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:277:60+69
    assume {:print "$at(106,9695,9764)"} true;
    call $t0 := $1_features_coin_to_fungible_asset_migration_feature_enabled();
    if ($abort_flag) {
        assume {:print "$at(106,9695,9764)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,47):", $t5} $t5 == $t5;
        goto L8;
    }

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:277:13+116
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:277:13+116
L0:

    // $t6 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:277:13+116
    assume {:print "$at(106,9648,9764)"} true;
    $t6 := false;
    assume $IsValid'bool'($t6);

    // $t0 := $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:277:13+116
    $t0 := $t6;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:277:13+116
L2:

    // if ($t0) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:277:9+413
    assume {:print "$at(106,9644,10057)"} true;
    if ($t0) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:279:57+16
    assume {:print "$at(106,9824,9840)"} true;
L4:

    // $t7 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:279:57+16
    assume {:print "$at(106,9824,9840)"} true;
    $t7 := 1;
    assume $IsValid'address'($t7);

    // $t8 := get_global<coin::CoinConversionMap>($t7) on_abort goto L8 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:279:24+13
    if (!$ResourceExists($1_coin_CoinConversionMap_$memory, $t7)) {
        call $ExecFailureAbort();
    } else {
        $t8 := $ResourceValue($1_coin_CoinConversionMap_$memory, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(106,9791,9804)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,47):", $t5} $t5 == $t5;
        goto L8;
    }

    // $t9 := get_field<coin::CoinConversionMap>.coin_to_fungible_asset_map($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:279:23+78
    $t9 := $t8->$coin_to_fungible_asset_map;

    // trace_local[map]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:279:17+3
    assume {:print "$track_local(30,47,1):", $t9} $t9 == $t9;

    // $t10 := type_info::type_of<#0>() on_abort goto L8 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:280:24+30
    assume {:print "$at(106,9893,9923)"} true;
    if (!true) {
        call $ExecFailureAbort();
    }
    else {
        $t10 := $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9));
    }
    if ($abort_flag) {
        assume {:print "$at(106,9893,9923)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,47):", $t5} $t5 == $t5;
        goto L8;
    }

    // trace_local[type]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:280:17+4
    assume {:print "$track_local(30,47,2):", $t10} $t10 == $t10;

    // $t11 := table::contains<type_info::TypeInfo, object::Object<fungible_asset::Metadata>>($t9, $t10) on_abort goto L8 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:281:17+26
    assume {:print "$at(106,9941,9967)"} true;
    call $t11 := $1_table_contains'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''($t9, $t10);
    if ($abort_flag) {
        assume {:print "$at(106,9941,9967)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,47):", $t5} $t5 == $t5;
        goto L8;
    }

    // if ($t11) goto L6 else goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:281:13+110
    if ($t11) { goto L6; } else { goto L5; }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:282:52+3
    assume {:print "$at(106,10022,10025)"} true;
L6:

    // $t12 := table::borrow<type_info::TypeInfo, object::Object<fungible_asset::Metadata>>($t9, $t10) on_abort goto L8 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:282:38+24
    assume {:print "$at(106,10008,10032)"} true;
    call $t12 := $1_table_borrow'$1_type_info_TypeInfo_$1_object_Object'$1_fungible_asset_Metadata''($t9, $t10);
    if ($abort_flag) {
        assume {:print "$at(106,10008,10032)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(30,47):", $t5} $t5 == $t5;
        goto L8;
    }

    // $t13 := opaque begin: option::some<object::Object<fungible_asset::Metadata>>($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:282:24+39

    // assume And(WellFormed($t13), Le(Len<object::Object<fungible_asset::Metadata>>(select option::Option.vec($t13)), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:282:24+39
    assume ($IsValid'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''($t13) && (LenVec($t13->$vec) <= 1));

    // assume Eq<option::Option<object::Object<fungible_asset::Metadata>>>($t13, option::spec_some<object::Object<fungible_asset::Metadata>>($t12)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:282:24+39
    assume $IsEqual'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''($t13, $1_option_spec_some'$1_object_Object'$1_fungible_asset_Metadata''($t12));

    // $t13 := opaque end: option::some<object::Object<fungible_asset::Metadata>>($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:282:24+39

    // trace_return[0]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:282:17+46
    assume {:print "$track_return(30,47,0):", $t13} $t13 == $t13;

    // $t14 := move($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:282:17+46
    $t14 := $t13;

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:282:17+46
    goto L7;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:281:13+110
    assume {:print "$at(106,9937,10047)"} true;
L5:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:285:9+14
    assume {:print "$at(106,10067,10081)"} true;
L3:

    // $t15 := opaque begin: option::none<object::Object<fungible_asset::Metadata>>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:285:9+14
    assume {:print "$at(106,10067,10081)"} true;

    // assume And(WellFormed($t15), Le(Len<object::Object<fungible_asset::Metadata>>(select option::Option.vec($t15)), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:285:9+14
    assume ($IsValid'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''($t15) && (LenVec($t15->$vec) <= 1));

    // assume Eq<option::Option<object::Object<fungible_asset::Metadata>>>($t15, option::spec_none<object::Object<fungible_asset::Metadata>>()) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:285:9+14
    assume $IsEqual'$1_option_Option'$1_object_Object'$1_fungible_asset_Metadata'''($t15, $1_option_spec_none'$1_object_Object'$1_fungible_asset_Metadata''());

    // $t15 := opaque end: option::none<object::Object<fungible_asset::Metadata>>() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:285:9+14

    // trace_return[0]($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:285:9+14
    assume {:print "$track_return(30,47,0):", $t15} $t15 == $t15;

    // $t14 := move($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:285:9+14
    $t14 := $t15;

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:286:5+1
    assume {:print "$at(106,10086,10087)"} true;
L7:

    // return $t14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:286:5+1
    assume {:print "$at(106,10086,10087)"} true;
    $ret0 := $t14;
    return;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:286:5+1
L8:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.move:286:5+1
    assume {:print "$at(106,10086,10087)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// struct aptos_coin::AptosCoin at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/aptos_coin.move:22:5+27
datatype $1_aptos_coin_AptosCoin {
    $1_aptos_coin_AptosCoin($dummy_field: bool)
}
function {:inline} $Update'$1_aptos_coin_AptosCoin'_dummy_field(s: $1_aptos_coin_AptosCoin, x: bool): $1_aptos_coin_AptosCoin {
    $1_aptos_coin_AptosCoin(x)
}
function $IsValid'$1_aptos_coin_AptosCoin'(s: $1_aptos_coin_AptosCoin): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_aptos_coin_AptosCoin'(s1: $1_aptos_coin_AptosCoin, s2: $1_aptos_coin_AptosCoin): bool {
    s1 == s2
}
var $1_aptos_coin_AptosCoin_$memory: $Memory $1_aptos_coin_AptosCoin;

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:35:5+90
function {:inline} $1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory: $Memory $1_chain_status_GenesisEndMarker): bool {
    $ResourceExists($1_chain_status_GenesisEndMarker_$memory, 1)
}

// struct chain_status::GenesisEndMarker at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/chain_status.move:12:5+34
datatype $1_chain_status_GenesisEndMarker {
    $1_chain_status_GenesisEndMarker($dummy_field: bool)
}
function {:inline} $Update'$1_chain_status_GenesisEndMarker'_dummy_field(s: $1_chain_status_GenesisEndMarker, x: bool): $1_chain_status_GenesisEndMarker {
    $1_chain_status_GenesisEndMarker(x)
}
function $IsValid'$1_chain_status_GenesisEndMarker'(s: $1_chain_status_GenesisEndMarker): bool {
    $IsValid'bool'(s->$dummy_field)
}
function {:inline} $IsEqual'$1_chain_status_GenesisEndMarker'(s1: $1_chain_status_GenesisEndMarker, s2: $1_chain_status_GenesisEndMarker): bool {
    s1 == s2
}
var $1_chain_status_GenesisEndMarker_$memory: $Memory $1_chain_status_GenesisEndMarker;

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:57:10+111
function {:inline} $1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds): int {
    $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, 1)->$microseconds
}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:61:10+93
function {:inline} $1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds): int {
    ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) div 1000000)
}

// struct timestamp::CurrentTimeMicroseconds at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:12:5+73
datatype $1_timestamp_CurrentTimeMicroseconds {
    $1_timestamp_CurrentTimeMicroseconds($microseconds: int)
}
function {:inline} $Update'$1_timestamp_CurrentTimeMicroseconds'_microseconds(s: $1_timestamp_CurrentTimeMicroseconds, x: int): $1_timestamp_CurrentTimeMicroseconds {
    $1_timestamp_CurrentTimeMicroseconds(x)
}
function $IsValid'$1_timestamp_CurrentTimeMicroseconds'(s: $1_timestamp_CurrentTimeMicroseconds): bool {
    $IsValid'u64'(s->$microseconds)
}
function {:inline} $IsEqual'$1_timestamp_CurrentTimeMicroseconds'(s1: $1_timestamp_CurrentTimeMicroseconds, s2: $1_timestamp_CurrentTimeMicroseconds): bool {
    s1 == s2
}
var $1_timestamp_CurrentTimeMicroseconds_$memory: $Memory $1_timestamp_CurrentTimeMicroseconds;

// fun timestamp::now_microseconds [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:61:5+153
procedure {:inline 1} $1_timestamp_now_microseconds() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: $1_timestamp_CurrentTimeMicroseconds;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t0 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:62:48+16
    assume {:print "$at(183,2511,2527)"} true;
    $t0 := 1;
    assume $IsValid'address'($t0);

    // $t1 := get_global<timestamp::CurrentTimeMicroseconds>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:62:9+13
    if (!$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(183,2472,2485)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(34,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<timestamp::CurrentTimeMicroseconds>.microseconds($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:62:9+69
    $t3 := $t1->$microseconds;

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:62:9+69
    assume {:print "$track_return(34,0,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:63:5+1
    assume {:print "$at(183,2546,2547)"} true;
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:63:5+1
    assume {:print "$at(183,2546,2547)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:63:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:63:5+1
    assume {:print "$at(183,2546,2547)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun timestamp::now_seconds [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:67:5+123
procedure {:inline 1} $1_timestamp_now_seconds() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t0 := timestamp::now_microseconds() on_abort goto L2 with $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:68:9+18
    assume {:print "$at(183,2680,2698)"} true;
    call $t0 := $1_timestamp_now_microseconds();
    if ($abort_flag) {
        assume {:print "$at(183,2680,2698)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(34,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := 1000000 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:68:30+23
    $t2 := 1000000;
    assume $IsValid'u64'($t2);

    // $t3 := /($t0, $t2) on_abort goto L2 with $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:68:28+1
    call $t3 := $Div($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(183,2699,2700)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(34,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:68:9+44
    assume {:print "$track_return(34,1,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:69:5+1
    assume {:print "$at(183,2729,2730)"} true;
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:69:5+1
    assume {:print "$at(183,2729,2730)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:69:5+1
L2:

    // abort($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.move:69:5+1
    assume {:print "$at(183,2729,2730)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:7:9+50
function  $1_aptos_hash_spec_keccak256(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_keccak256(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:12:9+58
function  $1_aptos_hash_spec_sha2_512_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_sha2_512_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:17:9+58
function  $1_aptos_hash_spec_sha3_512_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_sha3_512_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:22:9+59
function  $1_aptos_hash_spec_ripemd160_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_ripemd160_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/sources/hash.spec.move:27:9+61
function  $1_aptos_hash_spec_blake2b_256_internal(bytes: Vec (int)): Vec (int);
axiom (forall bytes: Vec (int) ::
(var $$res := $1_aptos_hash_spec_blake2b_256_internal(bytes);
$IsValid'vec'u8''($$res)));

// spec fun at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:176:5+155
function {:inline} $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory: $Memory $1_reconfiguration_Configuration): int {
    $ResourceValue($1_reconfiguration_Configuration_$memory, 1)->$last_reconfiguration_time
}

// struct reconfiguration::Configuration at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:44:5+306
datatype $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration($epoch: int, $last_reconfiguration_time: int, $events: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent')
}
function {:inline} $Update'$1_reconfiguration_Configuration'_epoch(s: $1_reconfiguration_Configuration, x: int): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(x, s->$last_reconfiguration_time, s->$events)
}
function {:inline} $Update'$1_reconfiguration_Configuration'_last_reconfiguration_time(s: $1_reconfiguration_Configuration, x: int): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(s->$epoch, x, s->$events)
}
function {:inline} $Update'$1_reconfiguration_Configuration'_events(s: $1_reconfiguration_Configuration, x: $1_event_EventHandle'$1_reconfiguration_NewEpochEvent'): $1_reconfiguration_Configuration {
    $1_reconfiguration_Configuration(s->$epoch, s->$last_reconfiguration_time, x)
}
function $IsValid'$1_reconfiguration_Configuration'(s: $1_reconfiguration_Configuration): bool {
    $IsValid'u64'(s->$epoch)
      && $IsValid'u64'(s->$last_reconfiguration_time)
      && $IsValid'$1_event_EventHandle'$1_reconfiguration_NewEpochEvent''(s->$events)
}
function {:inline} $IsEqual'$1_reconfiguration_Configuration'(s1: $1_reconfiguration_Configuration, s2: $1_reconfiguration_Configuration): bool {
    s1 == s2
}
var $1_reconfiguration_Configuration_$memory: $Memory $1_reconfiguration_Configuration;

// struct reconfiguration::NewEpochEvent at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.move:31:5+64
datatype $1_reconfiguration_NewEpochEvent {
    $1_reconfiguration_NewEpochEvent($epoch: int)
}
function {:inline} $Update'$1_reconfiguration_NewEpochEvent'_epoch(s: $1_reconfiguration_NewEpochEvent, x: int): $1_reconfiguration_NewEpochEvent {
    $1_reconfiguration_NewEpochEvent(x)
}
function $IsValid'$1_reconfiguration_NewEpochEvent'(s: $1_reconfiguration_NewEpochEvent): bool {
    $IsValid'u64'(s->$epoch)
}
function {:inline} $IsEqual'$1_reconfiguration_NewEpochEvent'(s1: $1_reconfiguration_NewEpochEvent, s2: $1_reconfiguration_NewEpochEvent): bool {
    s1 == s2
}

// struct ethereum::EthereumAddress at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:13:5+79
datatype $1_ethereum_EthereumAddress {
    $1_ethereum_EthereumAddress($inner: Vec (int))
}
function {:inline} $Update'$1_ethereum_EthereumAddress'_inner(s: $1_ethereum_EthereumAddress, x: Vec (int)): $1_ethereum_EthereumAddress {
    $1_ethereum_EthereumAddress(x)
}
function $IsValid'$1_ethereum_EthereumAddress'(s: $1_ethereum_EthereumAddress): bool {
    $IsValid'vec'u8''(s->$inner)
}
function {:inline} $IsEqual'$1_ethereum_EthereumAddress'(s1: $1_ethereum_EthereumAddress, s2: $1_ethereum_EthereumAddress): bool {
    $IsEqual'vec'u8''(s1->$inner, s2->$inner)}

// fun ethereum::assert_eip55 [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:89:5+312
procedure {:inline 1} $1_ethereum_assert_eip55(_$t0: Vec (int)) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $t6: Vec (int);
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t0: Vec (int);
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ethereum_address]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:89:5+1
    assume {:print "$at(2,3749,3750)"} true;
    assume {:print "$track_local(74,0,0):", $t0} $t0 == $t0;

    // $t6 := ethereum::to_eip55_checksumed_address($t0) on_abort goto L11 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:90:21+45
    assume {:print "$at(2,3826,3871)"} true;
    call $t6 := $1_ethereum_to_eip55_checksumed_address($t0);
    if ($abort_flag) {
        assume {:print "$at(2,3826,3871)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(74,0):", $t7} $t7 == $t7;
        goto L11;
    }

    // trace_local[eip55]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:90:13+5
    assume {:print "$track_local(74,0,3):", $t6} $t6 == $t6;

    // $t8 := vector::length<u8>($t6) on_abort goto L11 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:91:19+22
    assume {:print "$at(2,3891,3913)"} true;
    call $t8 := $1_vector_length'u8'($t6);
    if ($abort_flag) {
        assume {:print "$at(2,3891,3913)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(74,0):", $t7} $t7 == $t7;
        goto L11;
    }

    // trace_local[len]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:91:13+3
    assume {:print "$track_local(74,0,5):", $t8} $t8 == $t8;

    // $t9 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:23+1
    assume {:print "$at(2,3937,3938)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // trace_local[index]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$track_local(74,0,4):", $t9} $t9 == $t9;

    // $t10 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    $t10 := false;
    assume $IsValid'bool'($t10);

    // trace_local[__update_iter_flag]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$track_local(74,0,1):", $t10} $t10 == $t10;

    // trace_local[__upper_bound_value]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$track_local(74,0,2):", $t8} $t8 == $t8;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
L8:

    // $t1 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$at(2,3923,4054)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'bool'($t1);

    // $t4 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t4;

    // assume WellFormed($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'u64'($t4);

    // $t11 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t11;

    // assume WellFormed($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'u64'($t11);

    // $t12 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t12;

    // assume WellFormed($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'u64'($t12);

    // $t13 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t13;

    // assume WellFormed($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'bool'($t13);

    // $t14 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t14;

    // assume WellFormed($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'bool'($t14);

    // $t15 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t15;

    // assume WellFormed($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'u8'($t15);

    // $t16 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t16;

    // assume WellFormed($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'u8'($t16);

    // $t17 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t17;

    // assume WellFormed($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'bool'($t17);

    // trace_local[__update_iter_flag]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$info(): enter loop, variable(s) __update_iter_flag, index havocked and reassigned"} true;
    assume {:print "$track_local(74,0,1):", $t1} $t1 == $t1;

    // trace_local[index]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$track_local(74,0,4):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume !$abort_flag;

    // if ($t1) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
L1:

    // $t11 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$at(2,3923,4054)"} true;
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t4, $t11) on_abort goto L11 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    call $t12 := $AddU64($t4, $t11);
    if ($abort_flag) {
        assume {:print "$at(2,3923,4054)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(74,0):", $t7} $t7 == $t7;
        goto L11;
    }

    // $t4 := $t12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    $t4 := $t12;

    // trace_local[index]($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$track_local(74,0,4):", $t12} $t12 == $t12;

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
L0:

    // $t13 := true at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$at(2,3923,4054)"} true;
    $t13 := true;
    assume $IsValid'bool'($t13);

    // trace_local[__update_iter_flag]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$track_local(74,0,1):", $t13} $t13 == $t13;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
L2:

    // $t14 := <($t4, $t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:14+5
    assume {:print "$at(2,3928,3933)"} true;
    call $t14 := $Lt($t4, $t8);

    // if ($t14) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    if ($t14) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:36+6
    assume {:print "$at(2,3982,3988)"} true;
L4:

    // $t15 := vector::borrow<u8>($t6, $t4) on_abort goto L11 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:21+29
    assume {:print "$at(2,3967,3996)"} true;
    call $t15 := $1_vector_borrow'u8'($t6, $t4);
    if ($abort_flag) {
        assume {:print "$at(2,3967,3996)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(74,0):", $t7} $t7 == $t7;
        goto L11;
    }

    // $t16 := vector::borrow<u8>($t0, $t4) on_abort goto L11 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:54+39
    call $t16 := $1_vector_borrow'u8'($t0, $t4);
    if ($abort_flag) {
        assume {:print "$at(2,4000,4039)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(74,0):", $t7} $t7 == $t7;
        goto L11;
    }

    // $t17 := ==($t15, $t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:51+2
    $t17 := $IsEqual'u8'($t15, $t16);

    // if ($t17) goto L6 else goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:13+84
    if ($t17) { goto L6; } else { goto L5; }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:13+84
L6:

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:13+84
    assume {:print "$at(2,3959,4043)"} true;
    goto L7;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:13+84
L5:

    // $t18 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:95+1
    assume {:print "$at(2,4041,4042)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // trace_abort($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:13+84
    assume {:print "$at(2,3959,4043)"} true;
    assume {:print "$track_abort(74,0):", $t18} $t18 == $t18;

    // $t7 := move($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:13+84
    $t7 := $t18;

    // goto L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:13+84
    goto L11;

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$at(2,3923,4054)"} true;
L7:

    // goto L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$at(2,3923,4054)"} true;
    goto L9;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
L3:

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:94:10+1
    assume {:print "$at(2,4054,4055)"} true;
    goto L10;

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    // Loop invariant checking block for the loop started with header: L8
    assume {:print "$at(2,3923,4054)"} true;
L9:

    // stop() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$at(2,3923,4054)"} true;
    assume false;
    return;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:95:5+1
    assume {:print "$at(2,4060,4061)"} true;
L10:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:95:5+1
    assume {:print "$at(2,4060,4061)"} true;
    return;

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:95:5+1
L11:

    // abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:95:5+1
    assume {:print "$at(2,4060,4061)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun ethereum::assert_eip55 [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:89:5+312
procedure {:timeLimit 40} $1_ethereum_assert_eip55$verify(_$t0: Vec (int)) returns ()
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $t6: Vec (int);
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: int;
    var $t13: bool;
    var $t14: bool;
    var $t15: int;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t0: Vec (int);
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:89:5+1
    assume {:print "$at(2,3749,3750)"} true;
    assume $IsValid'vec'u8''($t0);

    // trace_local[ethereum_address]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:89:5+1
    assume {:print "$track_local(74,0,0):", $t0} $t0 == $t0;

    // $t6 := ethereum::to_eip55_checksumed_address($t0) on_abort goto L11 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:90:21+45
    assume {:print "$at(2,3826,3871)"} true;
    call $t6 := $1_ethereum_to_eip55_checksumed_address($t0);
    if ($abort_flag) {
        assume {:print "$at(2,3826,3871)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(74,0):", $t7} $t7 == $t7;
        goto L11;
    }

    // trace_local[eip55]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:90:13+5
    assume {:print "$track_local(74,0,3):", $t6} $t6 == $t6;

    // $t8 := vector::length<u8>($t6) on_abort goto L11 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:91:19+22
    assume {:print "$at(2,3891,3913)"} true;
    call $t8 := $1_vector_length'u8'($t6);
    if ($abort_flag) {
        assume {:print "$at(2,3891,3913)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(74,0):", $t7} $t7 == $t7;
        goto L11;
    }

    // trace_local[len]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:91:13+3
    assume {:print "$track_local(74,0,5):", $t8} $t8 == $t8;

    // $t9 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:23+1
    assume {:print "$at(2,3937,3938)"} true;
    $t9 := 0;
    assume $IsValid'u64'($t9);

    // trace_local[index]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$track_local(74,0,4):", $t9} $t9 == $t9;

    // $t10 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    $t10 := false;
    assume $IsValid'bool'($t10);

    // trace_local[__update_iter_flag]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$track_local(74,0,1):", $t10} $t10 == $t10;

    // trace_local[__upper_bound_value]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$track_local(74,0,2):", $t8} $t8 == $t8;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
L8:

    // $t1 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$at(2,3923,4054)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'bool'($t1);

    // $t4 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t4;

    // assume WellFormed($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'u64'($t4);

    // $t11 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t11;

    // assume WellFormed($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'u64'($t11);

    // $t12 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t12;

    // assume WellFormed($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'u64'($t12);

    // $t13 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t13;

    // assume WellFormed($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'bool'($t13);

    // $t14 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t14;

    // assume WellFormed($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'bool'($t14);

    // $t15 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t15;

    // assume WellFormed($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'u8'($t15);

    // $t16 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t16;

    // assume WellFormed($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'u8'($t16);

    // $t17 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    havoc $t17;

    // assume WellFormed($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume $IsValid'bool'($t17);

    // trace_local[__update_iter_flag]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$info(): enter loop, variable(s) __update_iter_flag, index havocked and reassigned"} true;
    assume {:print "$track_local(74,0,1):", $t1} $t1 == $t1;

    // trace_local[index]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$track_local(74,0,4):", $t4} $t4 == $t4;

    // assume Not(AbortFlag()) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume !$abort_flag;

    // if ($t1) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
L1:

    // $t11 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$at(2,3923,4054)"} true;
    $t11 := 1;
    assume $IsValid'u64'($t11);

    // $t12 := +($t4, $t11) on_abort goto L11 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    call $t12 := $AddU64($t4, $t11);
    if ($abort_flag) {
        assume {:print "$at(2,3923,4054)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(74,0):", $t7} $t7 == $t7;
        goto L11;
    }

    // $t4 := $t12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    $t4 := $t12;

    // trace_local[index]($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$track_local(74,0,4):", $t12} $t12 == $t12;

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
L0:

    // $t13 := true at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$at(2,3923,4054)"} true;
    $t13 := true;
    assume $IsValid'bool'($t13);

    // trace_local[__update_iter_flag]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$track_local(74,0,1):", $t13} $t13 == $t13;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
L2:

    // $t14 := <($t4, $t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:14+5
    assume {:print "$at(2,3928,3933)"} true;
    call $t14 := $Lt($t4, $t8);

    // if ($t14) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    if ($t14) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:36+6
    assume {:print "$at(2,3982,3988)"} true;
L4:

    // $t15 := vector::borrow<u8>($t6, $t4) on_abort goto L11 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:21+29
    assume {:print "$at(2,3967,3996)"} true;
    call $t15 := $1_vector_borrow'u8'($t6, $t4);
    if ($abort_flag) {
        assume {:print "$at(2,3967,3996)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(74,0):", $t7} $t7 == $t7;
        goto L11;
    }

    // $t16 := vector::borrow<u8>($t0, $t4) on_abort goto L11 with $t7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:54+39
    call $t16 := $1_vector_borrow'u8'($t0, $t4);
    if ($abort_flag) {
        assume {:print "$at(2,4000,4039)"} true;
        $t7 := $abort_code;
        assume {:print "$track_abort(74,0):", $t7} $t7 == $t7;
        goto L11;
    }

    // $t17 := ==($t15, $t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:51+2
    $t17 := $IsEqual'u8'($t15, $t16);

    // if ($t17) goto L6 else goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:13+84
    if ($t17) { goto L6; } else { goto L5; }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:13+84
L6:

    // goto L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:13+84
    assume {:print "$at(2,3959,4043)"} true;
    goto L7;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:13+84
L5:

    // $t18 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:95+1
    assume {:print "$at(2,4041,4042)"} true;
    $t18 := 0;
    assume $IsValid'u64'($t18);

    // trace_abort($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:13+84
    assume {:print "$at(2,3959,4043)"} true;
    assume {:print "$track_abort(74,0):", $t18} $t18 == $t18;

    // $t7 := move($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:13+84
    $t7 := $t18;

    // goto L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:93:13+84
    goto L11;

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$at(2,3923,4054)"} true;
L7:

    // goto L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$at(2,3923,4054)"} true;
    goto L9;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
L3:

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:94:10+1
    assume {:print "$at(2,4054,4055)"} true;
    goto L10;

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    // Loop invariant checking block for the loop started with header: L8
    assume {:print "$at(2,3923,4054)"} true;
L9:

    // stop() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:92:9+131
    assume {:print "$at(2,3923,4054)"} true;
    assume false;
    return;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:95:5+1
    assume {:print "$at(2,4060,4061)"} true;
L10:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:95:5+1
    assume {:print "$at(2,4060,4061)"} true;
    return;

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:95:5+1
L11:

    // abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:95:5+1
    assume {:print "$at(2,4060,4061)"} true;
    $abort_code := $t7;
    $abort_flag := true;
    return;

}

// fun ethereum::ethereum_address [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:22:5+175
procedure {:inline 1} $1_ethereum_ethereum_address(_$t0: Vec (int)) returns ($ret0: $1_ethereum_EthereumAddress)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_ethereum_EthereumAddress;
    var $t0: Vec (int);
    var $temp_0'$1_ethereum_EthereumAddress': $1_ethereum_EthereumAddress;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ethereum_address]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:22:5+1
    assume {:print "$at(2,860,861)"} true;
    assume {:print "$track_local(74,1,0):", $t0} $t0 == $t0;

    // ethereum::assert_eip55($t0) on_abort goto L2 with $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:23:9+31
    assume {:print "$at(2,945,976)"} true;
    call $1_ethereum_assert_eip55($t0);
    if ($abort_flag) {
        assume {:print "$at(2,945,976)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(74,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := pack ethereum::EthereumAddress($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:24:9+43
    assume {:print "$at(2,986,1029)"} true;
    $t2 := $1_ethereum_EthereumAddress($t0);

    // trace_return[0]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:24:9+43
    assume {:print "$track_return(74,1,0):", $t2} $t2 == $t2;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:25:5+1
    assume {:print "$at(2,1034,1035)"} true;
L1:

    // return $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:25:5+1
    assume {:print "$at(2,1034,1035)"} true;
    $ret0 := $t2;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:25:5+1
L2:

    // abort($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:25:5+1
    assume {:print "$at(2,1034,1035)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun ethereum::ethereum_address [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:22:5+175
procedure {:timeLimit 40} $1_ethereum_ethereum_address$verify(_$t0: Vec (int)) returns ($ret0: $1_ethereum_EthereumAddress)
{
    // declare local variables
    var $t1: int;
    var $t2: $1_ethereum_EthereumAddress;
    var $t0: Vec (int);
    var $temp_0'$1_ethereum_EthereumAddress': $1_ethereum_EthereumAddress;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:22:5+1
    assume {:print "$at(2,860,861)"} true;
    assume $IsValid'vec'u8''($t0);

    // trace_local[ethereum_address]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:22:5+1
    assume {:print "$track_local(74,1,0):", $t0} $t0 == $t0;

    // ethereum::assert_eip55($t0) on_abort goto L2 with $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:23:9+31
    assume {:print "$at(2,945,976)"} true;
    call $1_ethereum_assert_eip55($t0);
    if ($abort_flag) {
        assume {:print "$at(2,945,976)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(74,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := pack ethereum::EthereumAddress($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:24:9+43
    assume {:print "$at(2,986,1029)"} true;
    $t2 := $1_ethereum_EthereumAddress($t0);

    // trace_return[0]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:24:9+43
    assume {:print "$track_return(74,1,0):", $t2} $t2 == $t2;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:25:5+1
    assume {:print "$at(2,1034,1035)"} true;
L1:

    // return $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:25:5+1
    assume {:print "$at(2,1034,1035)"} true;
    $ret0 := $t2;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:25:5+1
L2:

    // abort($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:25:5+1
    assume {:print "$at(2,1034,1035)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun ethereum::get_inner [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:80:5+97
procedure {:timeLimit 40} $1_ethereum_get_inner$verify(_$t0: $1_ethereum_EthereumAddress) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t0: $1_ethereum_EthereumAddress;
    var $temp_0'$1_ethereum_EthereumAddress': $1_ethereum_EthereumAddress;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:80:5+1
    assume {:print "$at(2,3271,3272)"} true;
    assume $IsValid'$1_ethereum_EthereumAddress'($t0);

    // trace_local[eth_address]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:80:5+1
    assume {:print "$track_local(74,2,0):", $t0} $t0 == $t0;

    // $t1 := get_field<ethereum::EthereumAddress>.inner($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:81:9+17
    assume {:print "$at(2,3345,3362)"} true;
    $t1 := $t0->$inner;

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:81:9+17
    assume {:print "$track_return(74,2,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:82:5+1
    assume {:print "$at(2,3367,3368)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:82:5+1
    assume {:print "$at(2,3367,3368)"} true;
    $ret0 := $t1;
    return;

}

// fun ethereum::to_eip55_checksumed_address [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:58:5+886
procedure {:inline 1} $1_ethereum_to_eip55_checksumed_address(_$t0: Vec (int)) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $t6: Vec (int);
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: Vec (int);
    var $t13: Vec (int);
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: bool;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: bv8;
    var $t39: bv8;
    var $t40: bool;
    var $t41: int;
    var $t42: int;
    var $t43: $Mutation (Vec (int));
    var $t44: $Mutation (Vec (int));
    var $t45: $Mutation (Vec (int));
    var $t46: Vec (int);
    var $t0: Vec (int);
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[ethereum_address]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:58:5+1
    assume {:print "$at(2,2379,2380)"} true;
    assume {:print "$track_local(74,3,0):", $t0} $t0 == $t0;

    // $t7 := vector::length<u8>($t0) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:17+32
    assume {:print "$at(2,2479,2511)"} true;
    call $t7 := $1_vector_length'u8'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2479,2511)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t9 := 40 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:53+2
    $t9 := 40;
    assume $IsValid'u64'($t9);

    // $t10 := ==($t7, $t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:50+2
    $t10 := $IsEqual'u64'($t7, $t9);

    // if ($t10) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:9+50
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:9+50
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:9+50
    assume {:print "$at(2,2471,2521)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:9+50
L0:

    // $t11 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:57+1
    assume {:print "$at(2,2519,2520)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // trace_abort($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:9+50
    assume {:print "$at(2,2471,2521)"} true;
    assume {:print "$track_abort(74,3):", $t11} $t11 == $t11;

    // $t8 := move($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:9+50
    $t8 := $t11;

    // goto L20 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:9+50
    goto L20;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:60:38+16
    assume {:print "$at(2,2560,2576)"} true;
L2:

    // $t12 := ethereum::to_lowercase($t0) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:60:25+30
    assume {:print "$at(2,2547,2577)"} true;
    call $t12 := $1_ethereum_to_lowercase($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2547,2577)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t13 := opaque begin: aptos_hash::keccak256($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:61:20+20
    assume {:print "$at(2,2598,2618)"} true;

    // assume WellFormed($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:61:20+20
    assume $IsValid'vec'u8''($t13);

    // assume Eq<vector<u8>>($t13, aptos_hash::spec_keccak256($t12)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:61:20+20
    assume $IsEqual'vec'u8''($t13, $1_aptos_hash_spec_keccak256($t12));

    // $t13 := opaque end: aptos_hash::keccak256($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:61:20+20

    // trace_local[hash]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:61:13+4
    assume {:print "$track_local(74,3,3):", $t13} $t13 == $t13;

    // $t6 := vector::empty<u8>() on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:62:22+19
    assume {:print "$at(2,2641,2660)"} true;
    call $t6 := $1_vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(2,2641,2660)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // trace_local[output]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:62:13+6
    assume {:print "$track_local(74,3,6):", $t6} $t6 == $t6;

    // $t14 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:23+1
    assume {:print "$at(2,2685,2686)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // trace_local[index]($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$track_local(74,3,4):", $t14} $t14 == $t14;

    // $t15 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    $t15 := false;
    assume $IsValid'bool'($t15);

    // trace_local[__update_iter_flag]($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$track_local(74,3,2):", $t15} $t15 == $t15;

    // label L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
L17:

    // $t1 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$at(2,2671,3243)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bool'($t1);

    // $t2 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t2;

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bool'($t2);

    // $t4 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t4;

    // assume WellFormed($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t4);

    // $t6 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t6;

    // assume WellFormed($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'vec'u8''($t6);

    // $t16 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t16;

    // assume WellFormed($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t16);

    // $t17 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t17;

    // assume WellFormed($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t18;

    // assume WellFormed($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bool'($t18);

    // $t19 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t19;

    // assume WellFormed($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t19);

    // $t20 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t20;

    // assume WellFormed($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bool'($t20);

    // $t21 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t21;

    // assume WellFormed($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t21);

    // $t22 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t22;

    // assume WellFormed($t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t22);

    // $t23 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t23;

    // assume WellFormed($t23) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bool'($t23);

    // $t24 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t24;

    // assume WellFormed($t24) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t24);

    // $t25 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t25;

    // assume WellFormed($t25) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bool'($t25);

    // $t26 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t26;

    // assume WellFormed($t26) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t26);

    // $t27 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t27;

    // assume WellFormed($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t27);

    // $t28 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t28;

    // assume WellFormed($t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t28);

    // $t29 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t29;

    // assume WellFormed($t29) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t29);

    // $t30 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t30;

    // assume WellFormed($t30) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t30);

    // $t31 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t31;

    // assume WellFormed($t31) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t31);

    // $t32 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t32;

    // assume WellFormed($t32) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t32);

    // $t33 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t33;

    // assume WellFormed($t33) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t33);

    // $t34 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t34;

    // assume WellFormed($t34) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t34);

    // $t35 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t35;

    // assume WellFormed($t35) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t35);

    // $t36 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t36;

    // assume WellFormed($t36) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t36);

    // $t37 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t37;

    // assume WellFormed($t37) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t37);

    // $t38 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t38;

    // assume WellFormed($t38) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bv8'($t38);

    // $t39 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t39;

    // assume WellFormed($t39) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bv8'($t39);

    // $t40 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t40;

    // assume WellFormed($t40) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bool'($t40);

    // $t41 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t41;

    // assume WellFormed($t41) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t41);

    // $t42 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t42;

    // assume WellFormed($t42) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t42);

    // $t43 := havoc[mut_all]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t43;

    // assume WellFormed($t43) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'vec'u8''($Dereference($t43));

    // $t44 := havoc[mut_all]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t44;

    // assume WellFormed($t44) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'vec'u8''($Dereference($t44));

    // $t45 := havoc[mut_all]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t45;

    // assume WellFormed($t45) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'vec'u8''($Dereference($t45));

    // trace_local[__update_iter_flag]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$info(): enter loop, variable(s) __update_iter_flag, index, output havocked and reassigned"} true;
    assume {:print "$track_local(74,3,2):", $t2} $t2 == $t2;

    // trace_local[index]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$track_local(74,3,4):", $t4} $t4 == $t4;

    // trace_local[output]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$track_local(74,3,6):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume !$abort_flag;

    // if ($t2) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
L4:

    // $t16 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$at(2,2671,3243)"} true;
    $t16 := 1;
    assume $IsValid'u64'($t16);

    // $t17 := +($t4, $t16) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    call $t17 := $AddU64($t4, $t16);
    if ($abort_flag) {
        assume {:print "$at(2,2671,3243)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t4 := $t17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    $t4 := $t17;

    // trace_local[index]($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$track_local(74,3,4):", $t17} $t17 == $t17;

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    goto L5;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
L3:

    // $t18 := true at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$at(2,2671,3243)"} true;
    $t18 := true;
    assume $IsValid'bool'($t18);

    // trace_local[__update_iter_flag]($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$track_local(74,3,2):", $t18} $t18 == $t18;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
L5:

    // $t19 := 40 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:26+2
    assume {:print "$at(2,2688,2690)"} true;
    $t19 := 40;
    assume $IsValid'u64'($t19);

    // $t20 := <($t4, $t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:14+5
    call $t20 := $Lt($t4, $t19);

    // if ($t20) goto L7 else goto L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    if ($t20) { goto L7; } else { goto L6; }

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:65:40+16
    assume {:print "$at(2,2733,2749)"} true;
L7:

    // $t21 := vector::borrow<u8>($t0, $t4) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:65:25+39
    assume {:print "$at(2,2718,2757)"} true;
    call $t21 := $1_vector_borrow'u8'($t0, $t4);
    if ($abort_flag) {
        assume {:print "$at(2,2718,2757)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // trace_local[item]($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:65:17+4
    assume {:print "$track_local(74,3,5):", $t21} $t21 == $t21;

    // $t22 := 97 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:25+17
    assume {:print "$at(2,2783,2800)"} true;
    $t22 := 97;
    assume $IsValid'u8'($t22);

    // $t23 := >=($t21, $t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:22+2
    call $t23 := $Ge($t21, $t22);

    // if ($t23) goto L9 else goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:17+54
    if ($t23) { goto L9; } else { goto L8; }

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:46+4
L9:

    // $t24 := 102 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:54+17
    assume {:print "$at(2,2812,2829)"} true;
    $t24 := 102;
    assume $IsValid'u8'($t24);

    // $t1 := <=($t21, $t24) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:51+2
    call $t1 := $Le($t21, $t24);

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:17+54
    goto L10;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:17+54
L8:

    // $t25 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:17+54
    assume {:print "$at(2,2775,2829)"} true;
    $t25 := false;
    assume $IsValid'bool'($t25);

    // $t1 := $t25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:17+54
    $t1 := $t25;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:17+54
L10:

    // if ($t1) goto L12 else goto L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:13+462
    assume {:print "$at(2,2771,3233)"} true;
    if ($t1) { goto L12; } else { goto L11; }

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:67:49+5
    assume {:print "$at(2,2881,2886)"} true;
L12:

    // $t26 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:67:64+1
    assume {:print "$at(2,2896,2897)"} true;
    $t26 := 2;
    assume $IsValid'u64'($t26);

    // $t27 := /($t4, $t26) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:67:62+1
    call $t27 := $Div($t4, $t26);
    if ($abort_flag) {
        assume {:print "$at(2,2894,2895)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t28 := vector::borrow<u8>($t13, $t27) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:67:34+32
    call $t28 := $1_vector_borrow'u8'($t13, $t27);
    if ($abort_flag) {
        assume {:print "$at(2,2866,2898)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t29 := 4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:37+1
    assume {:print "$at(2,2936,2937)"} true;
    $t29 := 4;
    assume $IsValid'u64'($t29);

    // $t30 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:42+1
    $t30 := 1;
    assume $IsValid'u64'($t30);

    // $t31 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:55+1
    $t31 := 2;
    assume $IsValid'u64'($t31);

    // $t32 := %($t4, $t31) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:53+1
    call $t32 := $Mod($t4, $t31);
    if ($abort_flag) {
        assume {:print "$at(2,2952,2953)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t33 := -($t30, $t32) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:44+1
    call $t33 := $Sub($t30, $t32);
    if ($abort_flag) {
        assume {:print "$at(2,2943,2944)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t34 := *($t29, $t33) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:39+1
    call $t34 := $MulU64($t29, $t33);
    if ($abort_flag) {
        assume {:print "$at(2,2938,2939)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t35 := (u8)($t34) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:35+31
    call $t35 := $CastU8($t34);
    if ($abort_flag) {
        assume {:print "$at(2,2934,2965)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t36 := >>($t28, $t35) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:32+2
    call $t36 := $ShrU8($t28, $t35);
    if ($abort_flag) {
        assume {:print "$at(2,2931,2933)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t37 := 15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:70+3
    $t37 := 15;
    assume $IsValid'u8'($t37);

    // $t38 := &($t36, $t37) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:68+1
    call $t38 := $AndBv8($int2bv.8($t36), $int2bv.8($t37));

    // $t39 := 8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:77+1
    $t39 := 8bv8;
    assume $IsValid'bv8'($t39);

    // $t40 := >=($t38, $t39) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:74+2
    call $t40 := $GeBv8($t38, $t39);

    // if ($t40) goto L14 else goto L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:17+228
    if ($t40) { goto L14; } else { goto L13; }

    // label L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:69:39+11
    assume {:print "$at(2,3019,3030)"} true;
L14:

    // $t43 := borrow_local($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:69:39+11
    assume {:print "$at(2,3019,3030)"} true;
    $t43 := $Mutation($Local(6), EmptyVec(), $t6);

    // $t41 := 32 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:69:59+2
    $t41 := 32;
    assume $IsValid'u8'($t41);

    // $t42 := -($t21, $t41) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:69:57+1
    call $t42 := $Sub($t21, $t41);
    if ($abort_flag) {
        assume {:print "$at(2,3037,3038)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // vector::push_back<u8>($t43, $t42) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:69:21+41
    call $t43 := $1_vector_push_back'u8'($t43, $t42);
    if ($abort_flag) {
        assume {:print "$at(2,3001,3042)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // write_back[LocalRoot($t6)@]($t43) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:69:21+41
    $t6 := $Dereference($t43);

    // trace_local[output]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:69:21+41
    assume {:print "$track_local(74,3,6):", $t6} $t6 == $t6;

    // goto L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:17+228
    assume {:print "$at(2,2916,3144)"} true;
    goto L15;

    // label L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:71:39+11
    assume {:print "$at(2,3107,3118)"} true;
L13:

    // $t44 := borrow_local($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:71:39+11
    assume {:print "$at(2,3107,3118)"} true;
    $t44 := $Mutation($Local(6), EmptyVec(), $t6);

    // vector::push_back<u8>($t44, $t21) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:71:21+36
    call $t44 := $1_vector_push_back'u8'($t44, $t21);
    if ($abort_flag) {
        assume {:print "$at(2,3089,3125)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // write_back[LocalRoot($t6)@]($t44) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:71:21+36
    $t6 := $Dereference($t44);

    // trace_local[output]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:71:21+36
    assume {:print "$track_local(74,3,6):", $t6} $t6 == $t6;

    // label L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:13+462
    assume {:print "$at(2,2771,3233)"} true;
L15:

    // goto L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:13+462
    assume {:print "$at(2,2771,3233)"} true;
    goto L16;

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:74:35+11
    assume {:print "$at(2,3200,3211)"} true;
L11:

    // $t45 := borrow_local($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:74:35+11
    assume {:print "$at(2,3200,3211)"} true;
    $t45 := $Mutation($Local(6), EmptyVec(), $t6);

    // vector::push_back<u8>($t45, $t21) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:74:17+36
    call $t45 := $1_vector_push_back'u8'($t45, $t21);
    if ($abort_flag) {
        assume {:print "$at(2,3182,3218)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // write_back[LocalRoot($t6)@]($t45) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:74:17+36
    $t6 := $Dereference($t45);

    // trace_local[output]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:74:17+36
    assume {:print "$track_local(74,3,6):", $t6} $t6 == $t6;

    // label L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$at(2,2671,3243)"} true;
L16:

    // goto L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$at(2,2671,3243)"} true;
    goto L18;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
L6:

    // $t46 := move($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:77:9+6
    assume {:print "$at(2,3253,3259)"} true;
    $t46 := $t6;

    // trace_return[0]($t46) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:77:9+6
    assume {:print "$track_return(74,3,0):", $t46} $t46 == $t46;

    // goto L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:77:9+6
    goto L19;

    // label L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    // Loop invariant checking block for the loop started with header: L17
    assume {:print "$at(2,2671,3243)"} true;
L18:

    // stop() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$at(2,2671,3243)"} true;
    assume false;
    return;

    // label L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:78:5+1
    assume {:print "$at(2,3264,3265)"} true;
L19:

    // return $t46 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:78:5+1
    assume {:print "$at(2,3264,3265)"} true;
    $ret0 := $t46;
    return;

    // label L20 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:78:5+1
L20:

    // abort($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:78:5+1
    assume {:print "$at(2,3264,3265)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun ethereum::to_eip55_checksumed_address [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:58:5+886
procedure {:timeLimit 40} $1_ethereum_to_eip55_checksumed_address$verify(_$t0: Vec (int)) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: bool;
    var $t2: bool;
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $t6: Vec (int);
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: bool;
    var $t11: int;
    var $t12: Vec (int);
    var $t13: Vec (int);
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: bool;
    var $t21: int;
    var $t22: int;
    var $t23: bool;
    var $t24: int;
    var $t25: bool;
    var $t26: int;
    var $t27: int;
    var $t28: int;
    var $t29: int;
    var $t30: int;
    var $t31: int;
    var $t32: int;
    var $t33: int;
    var $t34: int;
    var $t35: int;
    var $t36: int;
    var $t37: int;
    var $t38: bv8;
    var $t39: bv8;
    var $t40: bool;
    var $t41: int;
    var $t42: int;
    var $t43: $Mutation (Vec (int));
    var $t44: $Mutation (Vec (int));
    var $t45: $Mutation (Vec (int));
    var $t46: Vec (int);
    var $t0: Vec (int);
    var $temp_0'bool': bool;
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:58:5+1
    assume {:print "$at(2,2379,2380)"} true;
    assume $IsValid'vec'u8''($t0);

    // trace_local[ethereum_address]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:58:5+1
    assume {:print "$track_local(74,3,0):", $t0} $t0 == $t0;

    // $t7 := vector::length<u8>($t0) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:17+32
    assume {:print "$at(2,2479,2511)"} true;
    call $t7 := $1_vector_length'u8'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2479,2511)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t9 := 40 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:53+2
    $t9 := 40;
    assume $IsValid'u64'($t9);

    // $t10 := ==($t7, $t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:50+2
    $t10 := $IsEqual'u64'($t7, $t9);

    // if ($t10) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:9+50
    if ($t10) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:9+50
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:9+50
    assume {:print "$at(2,2471,2521)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:9+50
L0:

    // $t11 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:57+1
    assume {:print "$at(2,2519,2520)"} true;
    $t11 := 0;
    assume $IsValid'u64'($t11);

    // trace_abort($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:9+50
    assume {:print "$at(2,2471,2521)"} true;
    assume {:print "$track_abort(74,3):", $t11} $t11 == $t11;

    // $t8 := move($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:9+50
    $t8 := $t11;

    // goto L20 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:59:9+50
    goto L20;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:60:38+16
    assume {:print "$at(2,2560,2576)"} true;
L2:

    // $t12 := ethereum::to_lowercase($t0) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:60:25+30
    assume {:print "$at(2,2547,2577)"} true;
    call $t12 := $1_ethereum_to_lowercase($t0);
    if ($abort_flag) {
        assume {:print "$at(2,2547,2577)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t13 := opaque begin: aptos_hash::keccak256($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:61:20+20
    assume {:print "$at(2,2598,2618)"} true;

    // assume WellFormed($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:61:20+20
    assume $IsValid'vec'u8''($t13);

    // assume Eq<vector<u8>>($t13, aptos_hash::spec_keccak256($t12)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:61:20+20
    assume $IsEqual'vec'u8''($t13, $1_aptos_hash_spec_keccak256($t12));

    // $t13 := opaque end: aptos_hash::keccak256($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:61:20+20

    // trace_local[hash]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:61:13+4
    assume {:print "$track_local(74,3,3):", $t13} $t13 == $t13;

    // $t6 := vector::empty<u8>() on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:62:22+19
    assume {:print "$at(2,2641,2660)"} true;
    call $t6 := $1_vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(2,2641,2660)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // trace_local[output]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:62:13+6
    assume {:print "$track_local(74,3,6):", $t6} $t6 == $t6;

    // $t14 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:23+1
    assume {:print "$at(2,2685,2686)"} true;
    $t14 := 0;
    assume $IsValid'u64'($t14);

    // trace_local[index]($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$track_local(74,3,4):", $t14} $t14 == $t14;

    // $t15 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    $t15 := false;
    assume $IsValid'bool'($t15);

    // trace_local[__update_iter_flag]($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$track_local(74,3,2):", $t15} $t15 == $t15;

    // label L17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
L17:

    // $t1 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$at(2,2671,3243)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bool'($t1);

    // $t2 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t2;

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bool'($t2);

    // $t4 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t4;

    // assume WellFormed($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t4);

    // $t6 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t6;

    // assume WellFormed($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'vec'u8''($t6);

    // $t16 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t16;

    // assume WellFormed($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t16);

    // $t17 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t17;

    // assume WellFormed($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t17);

    // $t18 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t18;

    // assume WellFormed($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bool'($t18);

    // $t19 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t19;

    // assume WellFormed($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t19);

    // $t20 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t20;

    // assume WellFormed($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bool'($t20);

    // $t21 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t21;

    // assume WellFormed($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t21);

    // $t22 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t22;

    // assume WellFormed($t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t22);

    // $t23 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t23;

    // assume WellFormed($t23) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bool'($t23);

    // $t24 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t24;

    // assume WellFormed($t24) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t24);

    // $t25 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t25;

    // assume WellFormed($t25) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bool'($t25);

    // $t26 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t26;

    // assume WellFormed($t26) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t26);

    // $t27 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t27;

    // assume WellFormed($t27) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t27);

    // $t28 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t28;

    // assume WellFormed($t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t28);

    // $t29 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t29;

    // assume WellFormed($t29) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t29);

    // $t30 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t30;

    // assume WellFormed($t30) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t30);

    // $t31 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t31;

    // assume WellFormed($t31) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t31);

    // $t32 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t32;

    // assume WellFormed($t32) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t32);

    // $t33 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t33;

    // assume WellFormed($t33) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t33);

    // $t34 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t34;

    // assume WellFormed($t34) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u64'($t34);

    // $t35 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t35;

    // assume WellFormed($t35) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t35);

    // $t36 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t36;

    // assume WellFormed($t36) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t36);

    // $t37 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t37;

    // assume WellFormed($t37) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t37);

    // $t38 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t38;

    // assume WellFormed($t38) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bv8'($t38);

    // $t39 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t39;

    // assume WellFormed($t39) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bv8'($t39);

    // $t40 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t40;

    // assume WellFormed($t40) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'bool'($t40);

    // $t41 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t41;

    // assume WellFormed($t41) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t41);

    // $t42 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t42;

    // assume WellFormed($t42) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'u8'($t42);

    // $t43 := havoc[mut_all]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t43;

    // assume WellFormed($t43) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'vec'u8''($Dereference($t43));

    // $t44 := havoc[mut_all]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t44;

    // assume WellFormed($t44) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'vec'u8''($Dereference($t44));

    // $t45 := havoc[mut_all]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    havoc $t45;

    // assume WellFormed($t45) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume $IsValid'vec'u8''($Dereference($t45));

    // trace_local[__update_iter_flag]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$info(): enter loop, variable(s) __update_iter_flag, index, output havocked and reassigned"} true;
    assume {:print "$track_local(74,3,2):", $t2} $t2 == $t2;

    // trace_local[index]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$track_local(74,3,4):", $t4} $t4 == $t4;

    // trace_local[output]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$track_local(74,3,6):", $t6} $t6 == $t6;

    // assume Not(AbortFlag()) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume !$abort_flag;

    // if ($t2) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
L4:

    // $t16 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$at(2,2671,3243)"} true;
    $t16 := 1;
    assume $IsValid'u64'($t16);

    // $t17 := +($t4, $t16) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    call $t17 := $AddU64($t4, $t16);
    if ($abort_flag) {
        assume {:print "$at(2,2671,3243)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t4 := $t17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    $t4 := $t17;

    // trace_local[index]($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$track_local(74,3,4):", $t17} $t17 == $t17;

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    goto L5;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
L3:

    // $t18 := true at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$at(2,2671,3243)"} true;
    $t18 := true;
    assume $IsValid'bool'($t18);

    // trace_local[__update_iter_flag]($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$track_local(74,3,2):", $t18} $t18 == $t18;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
L5:

    // $t19 := 40 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:26+2
    assume {:print "$at(2,2688,2690)"} true;
    $t19 := 40;
    assume $IsValid'u64'($t19);

    // $t20 := <($t4, $t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:14+5
    call $t20 := $Lt($t4, $t19);

    // if ($t20) goto L7 else goto L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    if ($t20) { goto L7; } else { goto L6; }

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:65:40+16
    assume {:print "$at(2,2733,2749)"} true;
L7:

    // $t21 := vector::borrow<u8>($t0, $t4) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:65:25+39
    assume {:print "$at(2,2718,2757)"} true;
    call $t21 := $1_vector_borrow'u8'($t0, $t4);
    if ($abort_flag) {
        assume {:print "$at(2,2718,2757)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // trace_local[item]($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:65:17+4
    assume {:print "$track_local(74,3,5):", $t21} $t21 == $t21;

    // $t22 := 97 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:25+17
    assume {:print "$at(2,2783,2800)"} true;
    $t22 := 97;
    assume $IsValid'u8'($t22);

    // $t23 := >=($t21, $t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:22+2
    call $t23 := $Ge($t21, $t22);

    // if ($t23) goto L9 else goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:17+54
    if ($t23) { goto L9; } else { goto L8; }

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:46+4
L9:

    // $t24 := 102 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:54+17
    assume {:print "$at(2,2812,2829)"} true;
    $t24 := 102;
    assume $IsValid'u8'($t24);

    // $t1 := <=($t21, $t24) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:51+2
    call $t1 := $Le($t21, $t24);

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:17+54
    goto L10;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:17+54
L8:

    // $t25 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:17+54
    assume {:print "$at(2,2775,2829)"} true;
    $t25 := false;
    assume $IsValid'bool'($t25);

    // $t1 := $t25 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:17+54
    $t1 := $t25;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:17+54
L10:

    // if ($t1) goto L12 else goto L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:13+462
    assume {:print "$at(2,2771,3233)"} true;
    if ($t1) { goto L12; } else { goto L11; }

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:67:49+5
    assume {:print "$at(2,2881,2886)"} true;
L12:

    // $t26 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:67:64+1
    assume {:print "$at(2,2896,2897)"} true;
    $t26 := 2;
    assume $IsValid'u64'($t26);

    // $t27 := /($t4, $t26) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:67:62+1
    call $t27 := $Div($t4, $t26);
    if ($abort_flag) {
        assume {:print "$at(2,2894,2895)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t28 := vector::borrow<u8>($t13, $t27) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:67:34+32
    call $t28 := $1_vector_borrow'u8'($t13, $t27);
    if ($abort_flag) {
        assume {:print "$at(2,2866,2898)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t29 := 4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:37+1
    assume {:print "$at(2,2936,2937)"} true;
    $t29 := 4;
    assume $IsValid'u64'($t29);

    // $t30 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:42+1
    $t30 := 1;
    assume $IsValid'u64'($t30);

    // $t31 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:55+1
    $t31 := 2;
    assume $IsValid'u64'($t31);

    // $t32 := %($t4, $t31) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:53+1
    call $t32 := $Mod($t4, $t31);
    if ($abort_flag) {
        assume {:print "$at(2,2952,2953)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t33 := -($t30, $t32) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:44+1
    call $t33 := $Sub($t30, $t32);
    if ($abort_flag) {
        assume {:print "$at(2,2943,2944)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t34 := *($t29, $t33) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:39+1
    call $t34 := $MulU64($t29, $t33);
    if ($abort_flag) {
        assume {:print "$at(2,2938,2939)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t35 := (u8)($t34) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:35+31
    call $t35 := $CastU8($t34);
    if ($abort_flag) {
        assume {:print "$at(2,2934,2965)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t36 := >>($t28, $t35) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:32+2
    call $t36 := $ShrU8($t28, $t35);
    if ($abort_flag) {
        assume {:print "$at(2,2931,2933)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // $t37 := 15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:70+3
    $t37 := 15;
    assume $IsValid'u8'($t37);

    // $t38 := &($t36, $t37) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:68+1
    call $t38 := $AndBv8($int2bv.8($t36), $int2bv.8($t37));

    // $t39 := 8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:77+1
    $t39 := 8bv8;
    assume $IsValid'bv8'($t39);

    // $t40 := >=($t38, $t39) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:74+2
    call $t40 := $GeBv8($t38, $t39);

    // if ($t40) goto L14 else goto L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:17+228
    if ($t40) { goto L14; } else { goto L13; }

    // label L14 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:69:39+11
    assume {:print "$at(2,3019,3030)"} true;
L14:

    // $t43 := borrow_local($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:69:39+11
    assume {:print "$at(2,3019,3030)"} true;
    $t43 := $Mutation($Local(6), EmptyVec(), $t6);

    // $t41 := 32 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:69:59+2
    $t41 := 32;
    assume $IsValid'u8'($t41);

    // $t42 := -($t21, $t41) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:69:57+1
    call $t42 := $Sub($t21, $t41);
    if ($abort_flag) {
        assume {:print "$at(2,3037,3038)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // vector::push_back<u8>($t43, $t42) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:69:21+41
    call $t43 := $1_vector_push_back'u8'($t43, $t42);
    if ($abort_flag) {
        assume {:print "$at(2,3001,3042)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // write_back[LocalRoot($t6)@]($t43) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:69:21+41
    $t6 := $Dereference($t43);

    // trace_local[output]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:69:21+41
    assume {:print "$track_local(74,3,6):", $t6} $t6 == $t6;

    // goto L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:68:17+228
    assume {:print "$at(2,2916,3144)"} true;
    goto L15;

    // label L13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:71:39+11
    assume {:print "$at(2,3107,3118)"} true;
L13:

    // $t44 := borrow_local($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:71:39+11
    assume {:print "$at(2,3107,3118)"} true;
    $t44 := $Mutation($Local(6), EmptyVec(), $t6);

    // vector::push_back<u8>($t44, $t21) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:71:21+36
    call $t44 := $1_vector_push_back'u8'($t44, $t21);
    if ($abort_flag) {
        assume {:print "$at(2,3089,3125)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // write_back[LocalRoot($t6)@]($t44) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:71:21+36
    $t6 := $Dereference($t44);

    // trace_local[output]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:71:21+36
    assume {:print "$track_local(74,3,6):", $t6} $t6 == $t6;

    // label L15 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:13+462
    assume {:print "$at(2,2771,3233)"} true;
L15:

    // goto L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:66:13+462
    assume {:print "$at(2,2771,3233)"} true;
    goto L16;

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:74:35+11
    assume {:print "$at(2,3200,3211)"} true;
L11:

    // $t45 := borrow_local($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:74:35+11
    assume {:print "$at(2,3200,3211)"} true;
    $t45 := $Mutation($Local(6), EmptyVec(), $t6);

    // vector::push_back<u8>($t45, $t21) on_abort goto L20 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:74:17+36
    call $t45 := $1_vector_push_back'u8'($t45, $t21);
    if ($abort_flag) {
        assume {:print "$at(2,3182,3218)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(74,3):", $t8} $t8 == $t8;
        goto L20;
    }

    // write_back[LocalRoot($t6)@]($t45) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:74:17+36
    $t6 := $Dereference($t45);

    // trace_local[output]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:74:17+36
    assume {:print "$track_local(74,3,6):", $t6} $t6 == $t6;

    // label L16 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$at(2,2671,3243)"} true;
L16:

    // goto L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$at(2,2671,3243)"} true;
    goto L18;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
L6:

    // $t46 := move($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:77:9+6
    assume {:print "$at(2,3253,3259)"} true;
    $t46 := $t6;

    // trace_return[0]($t46) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:77:9+6
    assume {:print "$track_return(74,3,0):", $t46} $t46 == $t46;

    // goto L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:77:9+6
    goto L19;

    // label L18 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    // Loop invariant checking block for the loop started with header: L17
    assume {:print "$at(2,2671,3243)"} true;
L18:

    // stop() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:64:9+572
    assume {:print "$at(2,2671,3243)"} true;
    assume false;
    return;

    // label L19 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:78:5+1
    assume {:print "$at(2,3264,3265)"} true;
L19:

    // return $t46 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:78:5+1
    assume {:print "$at(2,3264,3265)"} true;
    $ret0 := $t46;
    return;

    // label L20 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:78:5+1
L20:

    // abort($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:78:5+1
    assume {:print "$at(2,3264,3265)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun ethereum::to_lowercase [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:32:5+438
procedure {:inline 1} $1_ethereum_to_lowercase(_$t0: Vec (int)) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: Vec (int);
    var $t8: Vec (int);
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: $Mutation (Vec (int));
    var $t22: Vec (int);
    var $t0: Vec (int);
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[input]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:32:5+1
    assume {:print "$at(2,1367,1368)"} true;
    assume {:print "$track_local(74,4,0):", $t0} $t0 == $t0;

    // $t7 := vector::empty<u8>() on_abort goto L12 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:33:31+15
    assume {:print "$at(2,1455,1470)"} true;
    call $t7 := $1_vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(2,1455,1470)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(74,4):", $t9} $t9 == $t9;
        goto L12;
    }

    // trace_local[lowercase_bytes]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:33:13+15
    assume {:print "$track_local(74,4,7):", $t7} $t7 == $t7;

    // trace_local[v#178]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:341:46+1
    assume {:print "$at(18,12279,12280)"} true;
    assume {:print "$track_local(74,4,8):", $t0} $t0 == $t0;

    // $t10 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:342:17+1
    assume {:print "$at(18,12338,12339)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_local[i#180]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:342:13+1
    assume {:print "$track_local(74,4,4):", $t10} $t10 == $t10;

    // $t11 := vector::length<u8>($t0) on_abort goto L12 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:343:19+9
    assume {:print "$at(18,12359,12368)"} true;
    call $t11 := $1_vector_length'u8'($t0);
    if ($abort_flag) {
        assume {:print "$at(18,12359,12368)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(74,4):", $t9} $t9 == $t9;
        goto L12;
    }

    // trace_local[len#181]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:343:13+3
    assume {:print "$track_local(74,4,5):", $t11} $t11 == $t11;

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume {:print "$at(18,12385,12386)"} true;
L9:

    // $t1 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume {:print "$at(18,12385,12386)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'bool'($t1);

    // $t2 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t2;

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u8'($t2);

    // $t4 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t4;

    // assume WellFormed($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u64'($t4);

    // $t7 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t7;

    // assume WellFormed($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'vec'u8''($t7);

    // $t12 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t12;

    // assume WellFormed($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'bool'($t12);

    // $t13 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t13;

    // assume WellFormed($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u8'($t13);

    // $t14 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t14;

    // assume WellFormed($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u8'($t14);

    // $t15 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t15;

    // assume WellFormed($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'bool'($t15);

    // $t16 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t16;

    // assume WellFormed($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u8'($t16);

    // $t17 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t17;

    // assume WellFormed($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'bool'($t17);

    // $t18 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t18;

    // assume WellFormed($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u8'($t18);

    // $t19 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t19;

    // assume WellFormed($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u64'($t19);

    // $t20 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t20;

    // assume WellFormed($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[mut_all]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t21;

    // assume WellFormed($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'vec'u8''($Dereference($t21));

    // trace_local[i#180]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume {:print "$info(): enter loop, variable(s) i#180, lowercase_bytes havocked and reassigned"} true;
    assume {:print "$track_local(74,4,4):", $t4} $t4 == $t4;

    // trace_local[lowercase_bytes]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume {:print "$track_local(74,4,7):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume !$abort_flag;

    // $t12 := <($t4, $t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:18+1
    call $t12 := $Lt($t4, $t11);

    // if ($t12) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:9+82
    if ($t12) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:9+82
L1:

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:345:15+1
    assume {:print "$at(18,12410,12411)"} true;
L2:

    // $t13 := vector::borrow<u8>($t0, $t4) on_abort goto L12 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:345:18+12
    assume {:print "$at(18,12413,12425)"} true;
    call $t13 := $1_vector_borrow'u8'($t0, $t4);
    if ($abort_flag) {
        assume {:print "$at(18,12413,12425)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(74,4):", $t9} $t9 == $t9;
        goto L12;
    }

    // trace_local[element#183]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:345:18+12
    assume {:print "$track_local(74,4,3):", $t13} $t13 == $t13;

    // drop($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:345:15+1

    // $t14 := 65 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:46+7
    assume {:print "$at(2,1570,1577)"} true;
    $t14 := 65;
    assume $IsValid'u8'($t14);

    // $t15 := >=($t13, $t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:43+2
    call $t15 := $Ge($t13, $t14);

    // if ($t15) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:34+42
    if ($t15) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:58+7
L4:

    // $t16 := 90 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:69+7
    assume {:print "$at(2,1593,1600)"} true;
    $t16 := 90;
    assume $IsValid'u8'($t16);

    // $t1 := <=($t13, $t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:66+2
    call $t1 := $Le($t13, $t16);

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:34+42
    goto L5;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:34+42
L3:

    // $t17 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:34+42
    assume {:print "$at(2,1558,1600)"} true;
    $t17 := false;
    assume $IsValid'bool'($t17);

    // $t1 := $t17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:34+42
    $t1 := $t17;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:34+42
L5:

    // if ($t1) goto L7 else goto L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:30+139
    assume {:print "$at(2,1554,1693)"} true;
    if ($t1) { goto L7; } else { goto L6; }

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:36:18+7
    assume {:print "$at(2,1621,1628)"} true;
L7:

    // $t18 := 32 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:36:28+2
    assume {:print "$at(2,1631,1633)"} true;
    $t18 := 32;
    assume $IsValid'u8'($t18);

    // $t2 := +($t13, $t18) on_abort goto L12 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:36:26+1
    call $t2 := $AddU8($t13, $t18);
    if ($abort_flag) {
        assume {:print "$at(2,1629,1630)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(74,4):", $t9} $t9 == $t9;
        goto L12;
    }

    // goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:30+139
    assume {:print "$at(2,1554,1693)"} true;
    goto L8;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:38:18+7
    assume {:print "$at(2,1672,1679)"} true;
L6:

    // $t2 := $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:30+139
    assume {:print "$at(2,1554,1693)"} true;
    $t2 := $t13;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:30+139
L8:

    // trace_local[lower_byte#184]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:17+10
    assume {:print "$at(2,1541,1551)"} true;
    assume {:print "$track_local(74,4,6):", $t2} $t2 == $t2;

    // $t21 := borrow_local($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:40:35+20
    assume {:print "$at(2,1729,1749)"} true;
    $t21 := $Mutation($Local(7), EmptyVec(), $t7);

    // vector::push_back<u8>($t21, $t2) on_abort goto L12 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:40:13+55
    call $t21 := $1_vector_push_back'u8'($t21, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,1707,1762)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(74,4):", $t9} $t9 == $t9;
        goto L12;
    }

    // write_back[LocalRoot($t7)@]($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:40:13+55
    $t7 := $Dereference($t21);

    // trace_local[lowercase_bytes]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:40:13+55
    assume {:print "$track_local(74,4,7):", $t7} $t7 == $t7;

    // $t19 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:346:21+1
    assume {:print "$at(18,12448,12449)"} true;
    $t19 := 1;
    assume $IsValid'u64'($t19);

    // $t20 := +($t4, $t19) on_abort goto L12 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:346:19+1
    call $t20 := $AddU64($t4, $t19);
    if ($abort_flag) {
        assume {:print "$at(18,12446,12447)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(74,4):", $t9} $t9 == $t9;
        goto L12;
    }

    // trace_local[i#180]($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:346:13+1
    assume {:print "$track_local(74,4,4):", $t20} $t20 == $t20;

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:346:22+1
    goto L10;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:42:9+15
    assume {:print "$at(2,1784,1799)"} true;
L0:

    // $t22 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:42:9+15
    assume {:print "$at(2,1784,1799)"} true;
    $t22 := $t7;

    // trace_return[0]($t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:42:9+15
    assume {:print "$track_return(74,4,0):", $t22} $t22 == $t22;

    // goto L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:42:9+15
    goto L11;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:42:9+15
    // Loop invariant checking block for the loop started with header: L9
L10:

    // stop() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:42:9+15
    assume {:print "$at(2,1784,1799)"} true;
    assume false;
    return;

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:43:5+1
    assume {:print "$at(2,1804,1805)"} true;
L11:

    // return $t22 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:43:5+1
    assume {:print "$at(2,1804,1805)"} true;
    $ret0 := $t22;
    return;

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:43:5+1
L12:

    // abort($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:43:5+1
    assume {:print "$at(2,1804,1805)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// fun ethereum::to_lowercase [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:32:5+438
procedure {:timeLimit 40} $1_ethereum_to_lowercase$verify(_$t0: Vec (int)) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: Vec (int);
    var $t8: Vec (int);
    var $t9: int;
    var $t10: int;
    var $t11: int;
    var $t12: bool;
    var $t13: int;
    var $t14: int;
    var $t15: bool;
    var $t16: int;
    var $t17: bool;
    var $t18: int;
    var $t19: int;
    var $t20: int;
    var $t21: $Mutation (Vec (int));
    var $t22: Vec (int);
    var $t0: Vec (int);
    var $temp_0'u64': int;
    var $temp_0'u8': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:32:5+1
    assume {:print "$at(2,1367,1368)"} true;
    assume $IsValid'vec'u8''($t0);

    // trace_local[input]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:32:5+1
    assume {:print "$track_local(74,4,0):", $t0} $t0 == $t0;

    // $t7 := vector::empty<u8>() on_abort goto L12 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:33:31+15
    assume {:print "$at(2,1455,1470)"} true;
    call $t7 := $1_vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(2,1455,1470)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(74,4):", $t9} $t9 == $t9;
        goto L12;
    }

    // trace_local[lowercase_bytes]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:33:13+15
    assume {:print "$track_local(74,4,7):", $t7} $t7 == $t7;

    // trace_local[v#178]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:341:46+1
    assume {:print "$at(18,12279,12280)"} true;
    assume {:print "$track_local(74,4,8):", $t0} $t0 == $t0;

    // $t10 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:342:17+1
    assume {:print "$at(18,12338,12339)"} true;
    $t10 := 0;
    assume $IsValid'u64'($t10);

    // trace_local[i#180]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:342:13+1
    assume {:print "$track_local(74,4,4):", $t10} $t10 == $t10;

    // $t11 := vector::length<u8>($t0) on_abort goto L12 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:343:19+9
    assume {:print "$at(18,12359,12368)"} true;
    call $t11 := $1_vector_length'u8'($t0);
    if ($abort_flag) {
        assume {:print "$at(18,12359,12368)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(74,4):", $t9} $t9 == $t9;
        goto L12;
    }

    // trace_local[len#181]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:343:13+3
    assume {:print "$track_local(74,4,5):", $t11} $t11 == $t11;

    // label L9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume {:print "$at(18,12385,12386)"} true;
L9:

    // $t1 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume {:print "$at(18,12385,12386)"} true;
    havoc $t1;

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'bool'($t1);

    // $t2 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t2;

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u8'($t2);

    // $t4 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t4;

    // assume WellFormed($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u64'($t4);

    // $t7 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t7;

    // assume WellFormed($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'vec'u8''($t7);

    // $t12 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t12;

    // assume WellFormed($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'bool'($t12);

    // $t13 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t13;

    // assume WellFormed($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u8'($t13);

    // $t14 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t14;

    // assume WellFormed($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u8'($t14);

    // $t15 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t15;

    // assume WellFormed($t15) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'bool'($t15);

    // $t16 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t16;

    // assume WellFormed($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u8'($t16);

    // $t17 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t17;

    // assume WellFormed($t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'bool'($t17);

    // $t18 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t18;

    // assume WellFormed($t18) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u8'($t18);

    // $t19 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t19;

    // assume WellFormed($t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u64'($t19);

    // $t20 := havoc[val]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t20;

    // assume WellFormed($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'u64'($t20);

    // $t21 := havoc[mut_all]() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    havoc $t21;

    // assume WellFormed($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume $IsValid'vec'u8''($Dereference($t21));

    // trace_local[i#180]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume {:print "$info(): enter loop, variable(s) i#180, lowercase_bytes havocked and reassigned"} true;
    assume {:print "$track_local(74,4,4):", $t4} $t4 == $t4;

    // trace_local[lowercase_bytes]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume {:print "$track_local(74,4,7):", $t7} $t7 == $t7;

    // assume Not(AbortFlag()) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:16+1
    assume !$abort_flag;

    // $t12 := <($t4, $t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:18+1
    call $t12 := $Lt($t4, $t11);

    // if ($t12) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:9+82
    if ($t12) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:344:9+82
L1:

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:345:15+1
    assume {:print "$at(18,12410,12411)"} true;
L2:

    // $t13 := vector::borrow<u8>($t0, $t4) on_abort goto L12 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:345:18+12
    assume {:print "$at(18,12413,12425)"} true;
    call $t13 := $1_vector_borrow'u8'($t0, $t4);
    if ($abort_flag) {
        assume {:print "$at(18,12413,12425)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(74,4):", $t9} $t9 == $t9;
        goto L12;
    }

    // trace_local[element#183]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:345:18+12
    assume {:print "$track_local(74,4,3):", $t13} $t13 == $t13;

    // drop($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:345:15+1

    // $t14 := 65 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:46+7
    assume {:print "$at(2,1570,1577)"} true;
    $t14 := 65;
    assume $IsValid'u8'($t14);

    // $t15 := >=($t13, $t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:43+2
    call $t15 := $Ge($t13, $t14);

    // if ($t15) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:34+42
    if ($t15) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:58+7
L4:

    // $t16 := 90 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:69+7
    assume {:print "$at(2,1593,1600)"} true;
    $t16 := 90;
    assume $IsValid'u8'($t16);

    // $t1 := <=($t13, $t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:66+2
    call $t1 := $Le($t13, $t16);

    // goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:34+42
    goto L5;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:34+42
L3:

    // $t17 := false at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:34+42
    assume {:print "$at(2,1558,1600)"} true;
    $t17 := false;
    assume $IsValid'bool'($t17);

    // $t1 := $t17 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:34+42
    $t1 := $t17;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:34+42
L5:

    // if ($t1) goto L7 else goto L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:30+139
    assume {:print "$at(2,1554,1693)"} true;
    if ($t1) { goto L7; } else { goto L6; }

    // label L7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:36:18+7
    assume {:print "$at(2,1621,1628)"} true;
L7:

    // $t18 := 32 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:36:28+2
    assume {:print "$at(2,1631,1633)"} true;
    $t18 := 32;
    assume $IsValid'u8'($t18);

    // $t2 := +($t13, $t18) on_abort goto L12 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:36:26+1
    call $t2 := $AddU8($t13, $t18);
    if ($abort_flag) {
        assume {:print "$at(2,1629,1630)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(74,4):", $t9} $t9 == $t9;
        goto L12;
    }

    // goto L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:30+139
    assume {:print "$at(2,1554,1693)"} true;
    goto L8;

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:38:18+7
    assume {:print "$at(2,1672,1679)"} true;
L6:

    // $t2 := $t13 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:30+139
    assume {:print "$at(2,1554,1693)"} true;
    $t2 := $t13;

    // label L8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:30+139
L8:

    // trace_local[lower_byte#184]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:35:17+10
    assume {:print "$at(2,1541,1551)"} true;
    assume {:print "$track_local(74,4,6):", $t2} $t2 == $t2;

    // $t21 := borrow_local($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:40:35+20
    assume {:print "$at(2,1729,1749)"} true;
    $t21 := $Mutation($Local(7), EmptyVec(), $t7);

    // vector::push_back<u8>($t21, $t2) on_abort goto L12 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:40:13+55
    call $t21 := $1_vector_push_back'u8'($t21, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,1707,1762)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(74,4):", $t9} $t9 == $t9;
        goto L12;
    }

    // write_back[LocalRoot($t7)@]($t21) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:40:13+55
    $t7 := $Dereference($t21);

    // trace_local[lowercase_bytes]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:40:13+55
    assume {:print "$track_local(74,4,7):", $t7} $t7 == $t7;

    // $t19 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:346:21+1
    assume {:print "$at(18,12448,12449)"} true;
    $t19 := 1;
    assume $IsValid'u64'($t19);

    // $t20 := +($t4, $t19) on_abort goto L12 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:346:19+1
    call $t20 := $AddU64($t4, $t19);
    if ($abort_flag) {
        assume {:print "$at(18,12446,12447)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(74,4):", $t9} $t9 == $t9;
        goto L12;
    }

    // trace_local[i#180]($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:346:13+1
    assume {:print "$track_local(74,4,4):", $t20} $t20 == $t20;

    // goto L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/../aptos-stdlib/../move-stdlib/sources/vector.move:346:22+1
    goto L10;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:42:9+15
    assume {:print "$at(2,1784,1799)"} true;
L0:

    // $t22 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:42:9+15
    assume {:print "$at(2,1784,1799)"} true;
    $t22 := $t7;

    // trace_return[0]($t22) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:42:9+15
    assume {:print "$track_return(74,4,0):", $t22} $t22 == $t22;

    // goto L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:42:9+15
    goto L11;

    // label L10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:42:9+15
    // Loop invariant checking block for the loop started with header: L9
L10:

    // stop() at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:42:9+15
    assume {:print "$at(2,1784,1799)"} true;
    assume false;
    return;

    // label L11 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:43:5+1
    assume {:print "$at(2,1804,1805)"} true;
L11:

    // return $t22 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:43:5+1
    assume {:print "$at(2,1804,1805)"} true;
    $ret0 := $t22;
    return;

    // label L12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:43:5+1
L12:

    // abort($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:43:5+1
    assume {:print "$at(2,1804,1805)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// struct atomic_bridge_store::AddressPair<address, ethereum::EthereumAddress> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:564:5+138
datatype $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress' {
    $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress'($initiator: int, $recipient: $1_ethereum_EthereumAddress)
}
function {:inline} $Update'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''_initiator(s: $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress', x: int): $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress' {
    $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress'(x, s->$recipient)
}
function {:inline} $Update'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''_recipient(s: $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress', x: $1_ethereum_EthereumAddress): $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress' {
    $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress'(s->$initiator, x)
}
function $IsValid'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''(s: $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress'): bool {
    $IsValid'address'(s->$initiator)
      && $IsValid'$1_ethereum_EthereumAddress'(s->$recipient)
}
function {:inline} $IsEqual'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''(s1: $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress', s2: $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress'): bool {
    $IsEqual'address'(s1->$initiator, s2->$initiator)
    && $IsEqual'$1_ethereum_EthereumAddress'(s1->$recipient, s2->$recipient)}

// struct atomic_bridge_store::AddressPair<ethereum::EthereumAddress, address> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:564:5+138
datatype $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address' {
    $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address'($initiator: $1_ethereum_EthereumAddress, $recipient: int)
}
function {:inline} $Update'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''_initiator(s: $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address', x: $1_ethereum_EthereumAddress): $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address' {
    $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address'(x, s->$recipient)
}
function {:inline} $Update'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''_recipient(s: $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address', x: int): $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address' {
    $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address'(s->$initiator, x)
}
function $IsValid'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''(s: $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address'): bool {
    $IsValid'$1_ethereum_EthereumAddress'(s->$initiator)
      && $IsValid'address'(s->$recipient)
}
function {:inline} $IsEqual'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''(s1: $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address', s2: $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address'): bool {
    $IsEqual'$1_ethereum_EthereumAddress'(s1->$initiator, s2->$initiator)
    && $IsEqual'address'(s1->$recipient, s2->$recipient)}

// struct atomic_bridge_store::AddressPair<#0, #1> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:564:5+138
datatype $1_atomic_bridge_store_AddressPair'#0_#1' {
    $1_atomic_bridge_store_AddressPair'#0_#1'($initiator: #0, $recipient: #1)
}
function {:inline} $Update'$1_atomic_bridge_store_AddressPair'#0_#1''_initiator(s: $1_atomic_bridge_store_AddressPair'#0_#1', x: #0): $1_atomic_bridge_store_AddressPair'#0_#1' {
    $1_atomic_bridge_store_AddressPair'#0_#1'(x, s->$recipient)
}
function {:inline} $Update'$1_atomic_bridge_store_AddressPair'#0_#1''_recipient(s: $1_atomic_bridge_store_AddressPair'#0_#1', x: #1): $1_atomic_bridge_store_AddressPair'#0_#1' {
    $1_atomic_bridge_store_AddressPair'#0_#1'(s->$initiator, x)
}
function $IsValid'$1_atomic_bridge_store_AddressPair'#0_#1''(s: $1_atomic_bridge_store_AddressPair'#0_#1'): bool {
    $IsValid'#0'(s->$initiator)
      && $IsValid'#1'(s->$recipient)
}
function {:inline} $IsEqual'$1_atomic_bridge_store_AddressPair'#0_#1''(s1: $1_atomic_bridge_store_AddressPair'#0_#1', s2: $1_atomic_bridge_store_AddressPair'#0_#1'): bool {
    s1 == s2
}

// struct atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:575:5+237
datatype $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress' {
    $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'($addresses: $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress', $amount: int, $hash_lock: Vec (int), $time_lock: int, $state: int)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_addresses(s: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress', x: $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress'): $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress' {
    $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'(x, s->$amount, s->$hash_lock, s->$time_lock, s->$state)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_amount(s: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress', x: int): $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress' {
    $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'(s->$addresses, x, s->$hash_lock, s->$time_lock, s->$state)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_hash_lock(s: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress', x: Vec (int)): $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress' {
    $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'(s->$addresses, s->$amount, x, s->$time_lock, s->$state)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_time_lock(s: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress', x: int): $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress' {
    $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'(s->$addresses, s->$amount, s->$hash_lock, x, s->$state)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_state(s: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress', x: int): $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress' {
    $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'(s->$addresses, s->$amount, s->$hash_lock, s->$time_lock, x)
}
function $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(s: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'): bool {
    $IsValid'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''(s->$addresses)
      && $IsValid'u64'(s->$amount)
      && $IsValid'vec'u8''(s->$hash_lock)
      && $IsValid'u64'(s->$time_lock)
      && $IsValid'u8'(s->$state)
}
function {:inline} $IsEqual'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(s1: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress', s2: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'): bool {
    $IsEqual'$1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress''(s1->$addresses, s2->$addresses)
    && $IsEqual'u64'(s1->$amount, s2->$amount)
    && $IsEqual'vec'u8''(s1->$hash_lock, s2->$hash_lock)
    && $IsEqual'u64'(s1->$time_lock, s2->$time_lock)
    && $IsEqual'u8'(s1->$state, s2->$state)}

// struct atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:575:5+237
datatype $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address' {
    $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'($addresses: $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address', $amount: int, $hash_lock: Vec (int), $time_lock: int, $state: int)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_addresses(s: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address', x: $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address'): $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address' {
    $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'(x, s->$amount, s->$hash_lock, s->$time_lock, s->$state)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_amount(s: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address', x: int): $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address' {
    $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'(s->$addresses, x, s->$hash_lock, s->$time_lock, s->$state)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_hash_lock(s: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address', x: Vec (int)): $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address' {
    $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'(s->$addresses, s->$amount, x, s->$time_lock, s->$state)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_time_lock(s: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address', x: int): $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address' {
    $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'(s->$addresses, s->$amount, s->$hash_lock, x, s->$state)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_state(s: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address', x: int): $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address' {
    $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'(s->$addresses, s->$amount, s->$hash_lock, s->$time_lock, x)
}
function $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(s: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'): bool {
    $IsValid'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''(s->$addresses)
      && $IsValid'u64'(s->$amount)
      && $IsValid'vec'u8''(s->$hash_lock)
      && $IsValid'u64'(s->$time_lock)
      && $IsValid'u8'(s->$state)
}
function {:inline} $IsEqual'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(s1: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address', s2: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'): bool {
    $IsEqual'$1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address''(s1->$addresses, s2->$addresses)
    && $IsEqual'u64'(s1->$amount, s2->$amount)
    && $IsEqual'vec'u8''(s1->$hash_lock, s2->$hash_lock)
    && $IsEqual'u64'(s1->$time_lock, s2->$time_lock)
    && $IsEqual'u8'(s1->$state, s2->$state)}

// struct atomic_bridge_store::BridgeTransferDetails<#0, #1> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:575:5+237
datatype $1_atomic_bridge_store_BridgeTransferDetails'#0_#1' {
    $1_atomic_bridge_store_BridgeTransferDetails'#0_#1'($addresses: $1_atomic_bridge_store_AddressPair'#0_#1', $amount: int, $hash_lock: Vec (int), $time_lock: int, $state: int)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_addresses(s: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1', x: $1_atomic_bridge_store_AddressPair'#0_#1'): $1_atomic_bridge_store_BridgeTransferDetails'#0_#1' {
    $1_atomic_bridge_store_BridgeTransferDetails'#0_#1'(x, s->$amount, s->$hash_lock, s->$time_lock, s->$state)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_amount(s: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1', x: int): $1_atomic_bridge_store_BridgeTransferDetails'#0_#1' {
    $1_atomic_bridge_store_BridgeTransferDetails'#0_#1'(s->$addresses, x, s->$hash_lock, s->$time_lock, s->$state)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_hash_lock(s: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1', x: Vec (int)): $1_atomic_bridge_store_BridgeTransferDetails'#0_#1' {
    $1_atomic_bridge_store_BridgeTransferDetails'#0_#1'(s->$addresses, s->$amount, x, s->$time_lock, s->$state)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_time_lock(s: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1', x: int): $1_atomic_bridge_store_BridgeTransferDetails'#0_#1' {
    $1_atomic_bridge_store_BridgeTransferDetails'#0_#1'(s->$addresses, s->$amount, s->$hash_lock, x, s->$state)
}
function {:inline} $Update'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_state(s: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1', x: int): $1_atomic_bridge_store_BridgeTransferDetails'#0_#1' {
    $1_atomic_bridge_store_BridgeTransferDetails'#0_#1'(s->$addresses, s->$amount, s->$hash_lock, s->$time_lock, x)
}
function $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(s: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1'): bool {
    $IsValid'$1_atomic_bridge_store_AddressPair'#0_#1''(s->$addresses)
      && $IsValid'u64'(s->$amount)
      && $IsValid'vec'u8''(s->$hash_lock)
      && $IsValid'u64'(s->$time_lock)
      && $IsValid'u8'(s->$state)
}
function {:inline} $IsEqual'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(s1: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1', s2: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1'): bool {
    $IsEqual'$1_atomic_bridge_store_AddressPair'#0_#1''(s1->$addresses, s2->$addresses)
    && $IsEqual'u64'(s1->$amount, s2->$amount)
    && $IsEqual'vec'u8''(s1->$hash_lock, s2->$hash_lock)
    && $IsEqual'u64'(s1->$time_lock, s2->$time_lock)
    && $IsEqual'u8'(s1->$state, s2->$state)}

// struct atomic_bridge_store::Nonce at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:583:5+47
datatype $1_atomic_bridge_store_Nonce {
    $1_atomic_bridge_store_Nonce($inner: int)
}
function {:inline} $Update'$1_atomic_bridge_store_Nonce'_inner(s: $1_atomic_bridge_store_Nonce, x: int): $1_atomic_bridge_store_Nonce {
    $1_atomic_bridge_store_Nonce(x)
}
function $IsValid'$1_atomic_bridge_store_Nonce'(s: $1_atomic_bridge_store_Nonce): bool {
    $IsValid'u64'(s->$inner)
}
function {:inline} $IsEqual'$1_atomic_bridge_store_Nonce'(s1: $1_atomic_bridge_store_Nonce, s2: $1_atomic_bridge_store_Nonce): bool {
    s1 == s2
}
var $1_atomic_bridge_store_Nonce_$memory: $Memory $1_atomic_bridge_store_Nonce;

// struct atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:570:5+86
datatype $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' {
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''($inner: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'))
}
function {:inline} $Update'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''_inner(s: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'', x: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')): $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' {
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''(x)
}
function $IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(s: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''): bool {
    $IsValid'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(s->$inner)
}
function {:inline} $IsEqual'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''(s1: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'', s2: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''): bool {
    s1 == s2
}
var $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory: $Memory $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';

// struct atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:570:5+86
datatype $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' {
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''($inner: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'))
}
function {:inline} $Update'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''_inner(s: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'', x: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')): $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' {
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''(x)
}
function $IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(s: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''): bool {
    $IsValid'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(s->$inner)
}
function {:inline} $IsEqual'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''(s1: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'', s2: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''): bool {
    s1 == s2
}
var $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory: $Memory $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';

// struct atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>> at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:570:5+86
datatype $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' {
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($inner: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))
}
function {:inline} $Update'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''_inner(s: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'', x: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')): $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' {
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''(x)
}
function $IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(s: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''): bool {
    $IsValid'$1_smart_table_SmartTable'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(s->$inner)
}
function {:inline} $IsEqual'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''(s1: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'', s2: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''): bool {
    s1 == s2
}
var $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory: $Memory $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

// fun atomic_bridge_store::add<address, ethereum::EthereumAddress> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:657:5+534
procedure {:inline 1} $1_atomic_bridge_store_add'address_$1_ethereum_EthereumAddress'(_$t0: Vec (int), _$t1: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress') returns ()
{
    // declare local variables
    var $t2: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation ($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'');
    var $t8: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'));
    var $t0: Vec (int);
    var $t1: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, select atomic_bridge_store::SmartTableWrapper.inner<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:50:9+119
    assume {:print "$at(3,2168,2287)"} true;
    assume ($t2 == $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, 1)->$inner);

    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:657:5+1
    assume {:print "$at(2,22653,22654)"} true;
    assume {:print "$track_local(75,0,0):", $t0} $t0 == $t0;

    // trace_local[details]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:657:5+1
    assume {:print "$track_local(75,0,1):", $t1} $t1 == $t1;

    // $t3 := features::abort_atomic_bridge_enabled() on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:17+39
    assume {:print "$at(2,22843,22882)"} true;
    call $t3 := $1_features_abort_atomic_bridge_enabled();
    if ($abort_flag) {
        assume {:print "$at(2,22843,22882)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,0):", $t4} $t4 == $t4;
        goto L4;
    }

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    assume {:print "$at(2,22835,22911)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:58+26
L0:

    // $t5 := 9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:58+26
    assume {:print "$at(2,22884,22910)"} true;
    $t5 := 9;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    assume {:print "$at(2,22835,22911)"} true;
    assume {:print "$track_abort(75,0):", $t5} $t5 == $t5;

    // $t4 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    $t4 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:660:41+19
    assume {:print "$at(2,22954,22973)"} true;
L2:

    // atomic_bridge_store::assert_valid_bridge_transfer_id($t0) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:660:9+52
    assume {:print "$at(2,22922,22974)"} true;
    call $1_atomic_bridge_store_assert_valid_bridge_transfer_id($t0);
    if ($abort_flag) {
        assume {:print "$at(2,22922,22974)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,0):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t6 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:661:115+16
    assume {:print "$at(2,23090,23106)"} true;
    $t6 := 1;
    assume $IsValid'address'($t6);

    // $t7 := borrow_global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>($t6) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:661:21+17
    if (!$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(2,22996,23013)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,0):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t8 := borrow_field<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>.inner($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:662:26+16
    assume {:print "$at(2,23134,23150)"} true;
    $t8 := $ChildMutation($t7, 0, $Dereference($t7)->$inner);

    // smart_table::add<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t8, $t0, $t1) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:662:9+63
    call $t8 := $1_smart_table_add'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''($t8, $t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,23117,23180)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,0):", $t4} $t4 == $t4;
        goto L4;
    }

    // write_back[Reference($t7).inner (smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>)]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:662:9+63
    $t7 := $UpdateMutation($t7, $Update'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''_inner($Dereference($t7), $Dereference($t8)));

    // write_back[atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>@]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:662:9+63
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory := $ResourceUpdate($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $GlobalLocationAddress($t7),
        $Dereference($t7));

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:663:5+1
    assume {:print "$at(2,23186,23187)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:663:5+1
    assume {:print "$at(2,23186,23187)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:663:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:663:5+1
    assume {:print "$at(2,23186,23187)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::add<ethereum::EthereumAddress, address> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:657:5+534
procedure {:inline 1} $1_atomic_bridge_store_add'$1_ethereum_EthereumAddress_address'(_$t0: Vec (int), _$t1: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address') returns ()
{
    // declare local variables
    var $t2: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation ($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'');
    var $t8: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'));
    var $t0: Vec (int);
    var $t1: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'': $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t2, select atomic_bridge_store::SmartTableWrapper.inner<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:50:9+119
    assume {:print "$at(3,2168,2287)"} true;
    assume ($t2 == $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, 1)->$inner);

    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:657:5+1
    assume {:print "$at(2,22653,22654)"} true;
    assume {:print "$track_local(75,0,0):", $t0} $t0 == $t0;

    // trace_local[details]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:657:5+1
    assume {:print "$track_local(75,0,1):", $t1} $t1 == $t1;

    // $t3 := features::abort_atomic_bridge_enabled() on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:17+39
    assume {:print "$at(2,22843,22882)"} true;
    call $t3 := $1_features_abort_atomic_bridge_enabled();
    if ($abort_flag) {
        assume {:print "$at(2,22843,22882)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,0):", $t4} $t4 == $t4;
        goto L4;
    }

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    assume {:print "$at(2,22835,22911)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:58+26
L0:

    // $t5 := 9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:58+26
    assume {:print "$at(2,22884,22910)"} true;
    $t5 := 9;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    assume {:print "$at(2,22835,22911)"} true;
    assume {:print "$track_abort(75,0):", $t5} $t5 == $t5;

    // $t4 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    $t4 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:660:41+19
    assume {:print "$at(2,22954,22973)"} true;
L2:

    // atomic_bridge_store::assert_valid_bridge_transfer_id($t0) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:660:9+52
    assume {:print "$at(2,22922,22974)"} true;
    call $1_atomic_bridge_store_assert_valid_bridge_transfer_id($t0);
    if ($abort_flag) {
        assume {:print "$at(2,22922,22974)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,0):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t6 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:661:115+16
    assume {:print "$at(2,23090,23106)"} true;
    $t6 := 1;
    assume $IsValid'address'($t6);

    // $t7 := borrow_global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>($t6) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:661:21+17
    if (!$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(2,22996,23013)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,0):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t8 := borrow_field<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>.inner($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:662:26+16
    assume {:print "$at(2,23134,23150)"} true;
    $t8 := $ChildMutation($t7, 0, $Dereference($t7)->$inner);

    // smart_table::add<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t8, $t0, $t1) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:662:9+63
    call $t8 := $1_smart_table_add'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''($t8, $t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,23117,23180)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,0):", $t4} $t4 == $t4;
        goto L4;
    }

    // write_back[Reference($t7).inner (smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>)]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:662:9+63
    $t7 := $UpdateMutation($t7, $Update'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''_inner($Dereference($t7), $Dereference($t8)));

    // write_back[atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>@]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:662:9+63
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory := $ResourceUpdate($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $GlobalLocationAddress($t7),
        $Dereference($t7));

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:663:5+1
    assume {:print "$at(2,23186,23187)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:663:5+1
    assume {:print "$at(2,23186,23187)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:663:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:663:5+1
    assume {:print "$at(2,23186,23187)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::add [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:657:5+534
procedure {:timeLimit 40} $1_atomic_bridge_store_add$verify(_$t0: Vec (int), _$t1: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1') returns ()
{
    // declare local variables
    var $t2: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var $t3: bool;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation ($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'');
    var $t8: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'));
    var $t0: Vec (int);
    var $t1: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'vec'u8'': Vec (int);
    var $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory#156: $Memory $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:657:5+1
    assume {:print "$at(2,22653,22654)"} true;
    assume $IsValid'vec'u8''($t0);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:657:5+1
    assume $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t1);

    // assume forall $rsc: features::Features: ResourceDomain<features::Features>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:657:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:657:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''($rsc))));

    // assume Identical($t2, select atomic_bridge_store::SmartTableWrapper.inner<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:50:9+119
    assume {:print "$at(3,2168,2287)"} true;
    assume ($t2 == $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, 1)->$inner);

    // @156 := save_mem(atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:657:5+1
    assume {:print "$at(2,22653,22654)"} true;
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory#156 := $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory;

    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:657:5+1
    assume {:print "$track_local(75,0,0):", $t0} $t0 == $t0;

    // trace_local[details]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:657:5+1
    assume {:print "$track_local(75,0,1):", $t1} $t1 == $t1;

    // $t3 := features::abort_atomic_bridge_enabled() on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:17+39
    assume {:print "$at(2,22843,22882)"} true;
    call $t3 := $1_features_abort_atomic_bridge_enabled();
    if ($abort_flag) {
        assume {:print "$at(2,22843,22882)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,0):", $t4} $t4 == $t4;
        goto L4;
    }

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    assume {:print "$at(2,22835,22911)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:58+26
L0:

    // $t5 := 9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:58+26
    assume {:print "$at(2,22884,22910)"} true;
    $t5 := 9;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    assume {:print "$at(2,22835,22911)"} true;
    assume {:print "$track_abort(75,0):", $t5} $t5 == $t5;

    // $t4 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    $t4 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:658:9+76
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:660:41+19
    assume {:print "$at(2,22954,22973)"} true;
L2:

    // atomic_bridge_store::assert_valid_bridge_transfer_id($t0) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:660:9+52
    assume {:print "$at(2,22922,22974)"} true;
    call $1_atomic_bridge_store_assert_valid_bridge_transfer_id($t0);
    if ($abort_flag) {
        assume {:print "$at(2,22922,22974)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,0):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t6 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:661:115+16
    assume {:print "$at(2,23090,23106)"} true;
    $t6 := 1;
    assume $IsValid'address'($t6);

    // $t7 := borrow_global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>($t6) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:661:21+17
    if (!$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(2,22996,23013)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,0):", $t4} $t4 == $t4;
        goto L4;
    }

    // $t8 := borrow_field<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>.inner($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:662:26+16
    assume {:print "$at(2,23134,23150)"} true;
    $t8 := $ChildMutation($t7, 0, $Dereference($t7)->$inner);

    // smart_table::add<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t8, $t0, $t1) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:662:9+63
    call $t8 := $1_smart_table_add'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t8, $t0, $t1);
    if ($abort_flag) {
        assume {:print "$at(2,23117,23180)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,0):", $t4} $t4 == $t4;
        goto L4;
    }

    // write_back[Reference($t7).inner (smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>)]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:662:9+63
    $t7 := $UpdateMutation($t7, $Update'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''_inner($Dereference($t7), $Dereference($t8)));

    // write_back[atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>@]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:662:9+63
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory := $ResourceUpdate($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $GlobalLocationAddress($t7),
        $Dereference($t7));

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:663:5+1
    assume {:print "$at(2,23186,23187)"} true;
L3:

    // assert Not(Neq<num>(Len<u8>($t0), 32)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:44:9+40
    assume {:print "$at(3,1831,1871)"} true;
    assert {:msg "assert_failed(3,1831,1871): function does not abort under this condition"}
      !!$IsEqual'num'(LenVec($t0), 32);

    // assert Not(smart_table::spec_contains[]<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t2, $t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:45:9+64
    assume {:print "$at(3,1880,1944)"} true;
    assert {:msg "assert_failed(3,1880,1944): function does not abort under this condition"}
      !$1_smart_table_spec_contains'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t2, $t0);

    // assert Not(Not(features::spec_is_enabled[](71))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:46:9+62
    assume {:print "$at(3,1953,2015)"} true;
    assert {:msg "assert_failed(3,1953,2015): function does not abort under this condition"}
      !!$1_features_spec_is_enabled(71);

    // assert Not(Not(exists[@156]<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:53:9+112
    assume {:print "$at(3,2371,2483)"} true;
    assert {:msg "assert_failed(3,2371,2483): function does not abort under this condition"}
      !!$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory#156, 1);

    // assert Not(smart_table::spec_contains[]<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t2, $t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:54:9+64
    assume {:print "$at(3,2492,2556)"} true;
    assert {:msg "assert_failed(3,2492,2556): function does not abort under this condition"}
      !$1_smart_table_spec_contains'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t2, $t0);

    // assert smart_table::spec_contains<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>(select atomic_bridge_store::SmartTableWrapper.inner<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(0x1)), $t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:56:9+163
    assume {:print "$at(3,2566,2729)"} true;
    assert {:msg "assert_failed(3,2566,2729): post-condition does not hold"}
      $1_smart_table_spec_contains'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, 1)->$inner, $t0);

    // assert Eq<num>(smart_table::spec_len<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>(select atomic_bridge_store::SmartTableWrapper.inner<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(0x1))), Add(smart_table::spec_len[]<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>(select atomic_bridge_store::SmartTableWrapper.inner<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(global[@156]<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(0x1))), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:58:9+292
    assume {:print "$at(3,2739,3031)"} true;
    assert {:msg "assert_failed(3,2739,3031): post-condition does not hold"}
      $IsEqual'num'($1_smart_table_spec_len'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, 1)->$inner), ($1_smart_table_spec_len'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory#156, 1)->$inner) + 1));

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:58:9+292
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:663:5+1
    assume {:print "$at(2,23186,23187)"} true;
L4:

    // assert Or(Or(Or(Or(Neq<num>(Len<u8>($t0), 32), smart_table::spec_contains[]<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t2, $t0)), Not(features::spec_is_enabled[](71))), Not(exists[@156]<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(0x1))), smart_table::spec_contains[]<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t2, $t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:49:5+1010
    assume {:print "$at(3,2027,3037)"} true;
    assert {:msg "assert_failed(3,2027,3037): abort not covered by any of the `aborts_if` clauses"}
      ((((!$IsEqual'num'(LenVec($t0), 32) || $1_smart_table_spec_contains'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t2, $t0)) || !$1_features_spec_is_enabled(71)) || !$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory#156, 1)) || $1_smart_table_spec_contains'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t2, $t0));

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:49:5+1010
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::initialize [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:590:5+613
procedure {:inline 1} $1_atomic_bridge_store_initialize(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';
    var $t2: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: $1_atomic_bridge_store_Nonce;
    var $t8: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var $t9: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';
    var $t10: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var $t11: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';
    var $t0: $signer;
    var $temp_0'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''': $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';
    var $temp_0'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''': $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Identical($t3, signer::$address_of($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:3:9+47
    assume {:print "$at(3,74,121)"} true;
    assume ($t3 == $1_signer_$address_of($t0));

    // trace_local[aptos_framework]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:590:5+1
    assume {:print "$at(2,20285,20286)"} true;
    assume {:print "$track_local(75,21,0):", $t0} $t0 == $t0;

    // opaque begin: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
    assume {:print "$at(2,20343,20400)"} true;

    // assume Identical($t4, Neq<address>(signer::$address_of($t0), 0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
    assume ($t4 == !$IsEqual'address'($1_signer_$address_of($t0), 1));

    // if ($t4) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
    if ($t4) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
L4:

    // assume And(Neq<address>(signer::$address_of($t0), 0x1), Eq(5, $t5)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
    assume {:print "$at(2,20343,20400)"} true;
    assume (!$IsEqual'address'($1_signer_$address_of($t0), 1) && $IsEqual'num'(5, $t5));

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
    assume {:print "$at(2,20343,20400)"} true;
    assume {:print "$track_abort(75,21):", $t5} $t5 == $t5;

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
    goto L2;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
L3:

    // opaque end: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
    assume {:print "$at(2,20343,20400)"} true;

    // $t6 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:593:20+1
    assume {:print "$at(2,20462,20463)"} true;
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := pack atomic_bridge_store::Nonce($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:592:34+39
    assume {:print "$at(2,20435,20474)"} true;
    $t7 := $1_atomic_bridge_store_Nonce($t6);

    // move_to<atomic_bridge_store::Nonce>($t7, $t0) on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:592:9+7
    if ($ResourceExists($1_atomic_bridge_store_Nonce_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_atomic_bridge_store_Nonce_$memory := $ResourceUpdate($1_atomic_bridge_store_Nonce_$memory, $t0->$addr, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(2,20410,20417)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,21):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t8 := smart_table::new<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>() on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:597:20+18
    assume {:print "$at(2,20603,20621)"} true;
    call $t8 := $1_smart_table_new'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''();
    if ($abort_flag) {
        assume {:print "$at(2,20603,20621)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,21):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t9 := pack atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:596:26+129
    assume {:print "$at(2,20503,20632)"} true;
    $t9 := $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''($t8);

    // trace_local[initiators]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:596:13+10
    assume {:print "$track_local(75,21,2):", $t9} $t9 == $t9;

    // move_to<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>($t9, $t0) on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:600:9+7
    assume {:print "$at(2,20643,20650)"} true;
    if ($ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory := $ResourceUpdate($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $t0->$addr, $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(2,20643,20650)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,21):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t10 := smart_table::new<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>() on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:603:20+18
    assume {:print "$at(2,20811,20829)"} true;
    call $t10 := $1_smart_table_new'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''();
    if ($abort_flag) {
        assume {:print "$at(2,20811,20829)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,21):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t11 := pack atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:602:30+129
    assume {:print "$at(2,20711,20840)"} true;
    $t11 := $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''($t10);

    // trace_local[counterparties]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:602:13+14
    assume {:print "$track_local(75,21,1):", $t11} $t11 == $t11;

    // move_to<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>($t11, $t0) on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:606:9+7
    assume {:print "$at(2,20851,20858)"} true;
    if ($ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory := $ResourceUpdate($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $t0->$addr, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(2,20851,20858)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,21):", $t5} $t5 == $t5;
        goto L2;
    }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:607:5+1
    assume {:print "$at(2,20897,20898)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:607:5+1
    assume {:print "$at(2,20897,20898)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:607:5+1
L2:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:607:5+1
    assume {:print "$at(2,20897,20898)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::initialize [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:590:5+613
procedure {:timeLimit 40} $1_atomic_bridge_store_initialize$verify(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';
    var $t2: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: $1_atomic_bridge_store_Nonce;
    var $t8: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var $t9: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';
    var $t10: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var $t11: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';
    var $t0: $signer;
    var $temp_0'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''': $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';
    var $temp_0'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''': $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:590:5+1
    assume {:print "$at(2,20285,20286)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume forall $rsc: atomic_bridge_store::Nonce: ResourceDomain<atomic_bridge_store::Nonce>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:590:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_Nonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_Nonce_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_Nonce'($rsc))));

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:590:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''($rsc))));

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:590:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''($rsc))));

    // assume Identical($t3, signer::$address_of($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:3:9+47
    assume {:print "$at(3,74,121)"} true;
    assume ($t3 == $1_signer_$address_of($t0));

    // trace_local[aptos_framework]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:590:5+1
    assume {:print "$at(2,20285,20286)"} true;
    assume {:print "$track_local(75,21,0):", $t0} $t0 == $t0;

    // opaque begin: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
    assume {:print "$at(2,20343,20400)"} true;

    // assume Identical($t4, Neq<address>(signer::$address_of($t0), 0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
    assume ($t4 == !$IsEqual'address'($1_signer_$address_of($t0), 1));

    // if ($t4) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
    if ($t4) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
L4:

    // assume And(Neq<address>(signer::$address_of($t0), 0x1), Eq(5, $t5)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
    assume {:print "$at(2,20343,20400)"} true;
    assume (!$IsEqual'address'($1_signer_$address_of($t0), 1) && $IsEqual'num'(5, $t5));

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
    assume {:print "$at(2,20343,20400)"} true;
    assume {:print "$track_abort(75,21):", $t5} $t5 == $t5;

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
    goto L2;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
L3:

    // opaque end: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:591:9+57
    assume {:print "$at(2,20343,20400)"} true;

    // $t6 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:593:20+1
    assume {:print "$at(2,20462,20463)"} true;
    $t6 := 0;
    assume $IsValid'u64'($t6);

    // $t7 := pack atomic_bridge_store::Nonce($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:592:34+39
    assume {:print "$at(2,20435,20474)"} true;
    $t7 := $1_atomic_bridge_store_Nonce($t6);

    // move_to<atomic_bridge_store::Nonce>($t7, $t0) on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:592:9+7
    if ($ResourceExists($1_atomic_bridge_store_Nonce_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_atomic_bridge_store_Nonce_$memory := $ResourceUpdate($1_atomic_bridge_store_Nonce_$memory, $t0->$addr, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(2,20410,20417)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,21):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t8 := smart_table::new<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>() on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:597:20+18
    assume {:print "$at(2,20603,20621)"} true;
    call $t8 := $1_smart_table_new'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''();
    if ($abort_flag) {
        assume {:print "$at(2,20603,20621)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,21):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t9 := pack atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:596:26+129
    assume {:print "$at(2,20503,20632)"} true;
    $t9 := $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''($t8);

    // trace_local[initiators]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:596:13+10
    assume {:print "$track_local(75,21,2):", $t9} $t9 == $t9;

    // move_to<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>($t9, $t0) on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:600:9+7
    assume {:print "$at(2,20643,20650)"} true;
    if ($ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory := $ResourceUpdate($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $t0->$addr, $t9);
    }
    if ($abort_flag) {
        assume {:print "$at(2,20643,20650)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,21):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t10 := smart_table::new<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>() on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:603:20+18
    assume {:print "$at(2,20811,20829)"} true;
    call $t10 := $1_smart_table_new'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''();
    if ($abort_flag) {
        assume {:print "$at(2,20811,20829)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,21):", $t5} $t5 == $t5;
        goto L2;
    }

    // $t11 := pack atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:602:30+129
    assume {:print "$at(2,20711,20840)"} true;
    $t11 := $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''($t10);

    // trace_local[counterparties]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:602:13+14
    assume {:print "$track_local(75,21,1):", $t11} $t11 == $t11;

    // move_to<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>($t11, $t0) on_abort goto L2 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:606:9+7
    assume {:print "$at(2,20851,20858)"} true;
    if ($ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory := $ResourceUpdate($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $t0->$addr, $t11);
    }
    if ($abort_flag) {
        assume {:print "$at(2,20851,20858)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,21):", $t5} $t5 == $t5;
        goto L2;
    }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:607:5+1
    assume {:print "$at(2,20897,20898)"} true;
L1:

    // assert exists<atomic_bridge_store::Nonce>($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:4:9+28
    assume {:print "$at(3,130,158)"} true;
    assert {:msg "assert_failed(3,130,158): post-condition does not hold"}
      $ResourceExists($1_atomic_bridge_store_Nonce_$memory, $t3);

    // assert exists<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:5:9+101
    assume {:print "$at(3,167,268)"} true;
    assert {:msg "assert_failed(3,167,268): post-condition does not hold"}
      $ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $t3);

    // assert exists<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:6:9+101
    assume {:print "$at(3,277,378)"} true;
    assert {:msg "assert_failed(3,277,378): post-condition does not hold"}
      $ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $t3);

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:6:9+101
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:607:5+1
    assume {:print "$at(2,20897,20898)"} true;
L2:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:607:5+1
    assume {:print "$at(2,20897,20898)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::now [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:612:5+56
procedure {:inline 1} $1_atomic_bridge_store_now() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t0 := timestamp::now_seconds() on_abort goto L2 with $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:613:9+24
    assume {:print "$at(2,21029,21053)"} true;
    call $t0 := $1_timestamp_now_seconds();
    if ($abort_flag) {
        assume {:print "$at(2,21029,21053)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(75,22):", $t1} $t1 == $t1;
        goto L2;
    }

    // trace_return[0]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:613:9+24
    assume {:print "$track_return(75,22,0):", $t0} $t0 == $t0;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:614:5+1
    assume {:print "$at(2,21058,21059)"} true;
L1:

    // return $t0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:614:5+1
    assume {:print "$at(2,21058,21059)"} true;
    $ret0 := $t0;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:614:5+1
L2:

    // abort($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:614:5+1
    assume {:print "$at(2,21058,21059)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::now [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:612:5+56
procedure {:timeLimit 40} $1_atomic_bridge_store_now$verify() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: int;
    var $temp_0'u64': int;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:612:5+1
    assume {:print "$at(2,21003,21004)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:612:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:612:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:612:5+56
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:612:5+56
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // $t0 := timestamp::now_seconds() on_abort goto L2 with $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:613:9+24
    assume {:print "$at(2,21029,21053)"} true;
    call $t0 := $1_timestamp_now_seconds();
    if ($abort_flag) {
        assume {:print "$at(2,21029,21053)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(75,22):", $t1} $t1 == $t1;
        goto L2;
    }

    // trace_return[0]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:613:9+24
    assume {:print "$track_return(75,22,0):", $t0} $t0 == $t0;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:614:5+1
    assume {:print "$at(2,21058,21059)"} true;
L1:

    // return $t0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:614:5+1
    assume {:print "$at(2,21058,21059)"} true;
    $ret0 := $t0;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:614:5+1
L2:

    // abort($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:614:5+1
    assume {:print "$at(2,21058,21059)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::bridge_transfer_id<address, ethereum::EthereumAddress> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:815:5+849
procedure {:inline 1} $1_atomic_bridge_store_bridge_transfer_id'address_$1_ethereum_EthereumAddress'(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress') returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: $Mutation ($1_atomic_bridge_store_Nonce);
    var $t3: int;
    var $t4: $Mutation ($1_atomic_bridge_store_Nonce);
    var $t5: int;
    var $t6: $Mutation (Vec (int));
    var $t7: $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress';
    var $t8: int;
    var $t9: Vec (int);
    var $t10: $Mutation (Vec (int));
    var $t11: $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress';
    var $t12: $1_ethereum_EthereumAddress;
    var $t13: Vec (int);
    var $t14: $Mutation (Vec (int));
    var $t15: Vec (int);
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: $Mutation (int);
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: $Mutation (int);
    var $t25: $Mutation (Vec (int));
    var $t26: int;
    var $t27: Vec (int);
    var $t28: Vec (int);
    var $t29: Vec (int);
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'$1_atomic_bridge_store_Nonce': $1_atomic_bridge_store_Nonce;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:815:5+1
    assume {:print "$at(2,30177,30178)"} true;
    assume {:print "$track_local(75,8,0):", $t0} $t0 == $t0;

    // $t3 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:816:46+16
    assume {:print "$at(2,30381,30397)"} true;
    $t3 := 1;
    assume $IsValid'address'($t3);

    // $t4 := borrow_global<atomic_bridge_store::Nonce>($t3) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:816:21+17
    if (!$ResourceExists($1_atomic_bridge_store_Nonce_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $Mutation($Global($t3), EmptyVec(), $ResourceValue($1_atomic_bridge_store_Nonce_$memory, $t3));
    }
    if ($abort_flag) {
        assume {:print "$at(2,30356,30373)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // trace_local[nonce]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:816:13+5
    $temp_0'$1_atomic_bridge_store_Nonce' := $Dereference($t4);
    assume {:print "$track_local(75,8,2):", $temp_0'$1_atomic_bridge_store_Nonce'} $temp_0'$1_atomic_bridge_store_Nonce' == $temp_0'$1_atomic_bridge_store_Nonce';

    // $t1 := vector::empty<u8>() on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:817:30+19
    assume {:print "$at(2,30429,30448)"} true;
    call $t1 := $1_vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(2,30429,30448)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // trace_local[combined_bytes]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:817:13+14
    assume {:print "$track_local(75,8,1):", $t1} $t1 == $t1;

    // $t6 := borrow_local($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:818:24+19
    assume {:print "$at(2,30473,30492)"} true;
    $t6 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t7 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.addresses($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:818:60+17
    $t7 := $t0->$addresses;

    // $t8 := get_field<atomic_bridge_store::AddressPair<#0, #1>>.initiator($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:818:59+28
    $t8 := $t7->$initiator;

    // $t9 := bcs::to_bytes<#0>($t8) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:818:45+43
    call $t9 := $1_bcs_to_bytes'address'($t8);
    if ($abort_flag) {
        assume {:print "$at(2,30494,30537)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // vector::append<u8>($t6, $t9) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:818:9+80
    call $t6 := $1_vector_append'u8'($t6, $t9);
    if ($abort_flag) {
        assume {:print "$at(2,30458,30538)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // write_back[LocalRoot($t1)@]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:818:9+80
    $t1 := $Dereference($t6);

    // trace_local[combined_bytes]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:818:9+80
    assume {:print "$track_local(75,8,1):", $t1} $t1 == $t1;

    // $t10 := borrow_local($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:819:24+19
    assume {:print "$at(2,30563,30582)"} true;
    $t10 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t11 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.addresses($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:819:60+17
    $t11 := $t0->$addresses;

    // $t12 := get_field<atomic_bridge_store::AddressPair<#0, #1>>.recipient($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:819:59+28
    $t12 := $t11->$recipient;

    // $t13 := bcs::to_bytes<#1>($t12) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:819:45+43
    call $t13 := $1_bcs_to_bytes'$1_ethereum_EthereumAddress'($t12);
    if ($abort_flag) {
        assume {:print "$at(2,30584,30627)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // vector::append<u8>($t10, $t13) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:819:9+80
    call $t10 := $1_vector_append'u8'($t10, $t13);
    if ($abort_flag) {
        assume {:print "$at(2,30548,30628)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // write_back[LocalRoot($t1)@]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:819:9+80
    $t1 := $Dereference($t10);

    // trace_local[combined_bytes]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:819:9+80
    assume {:print "$track_local(75,8,1):", $t1} $t1 == $t1;

    // $t14 := borrow_local($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:820:24+19
    assume {:print "$at(2,30653,30672)"} true;
    $t14 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t15 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.hash_lock($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:820:45+17
    $t15 := $t0->$hash_lock;

    // vector::append<u8>($t14, $t15) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:820:9+54
    call $t14 := $1_vector_append'u8'($t14, $t15);
    if ($abort_flag) {
        assume {:print "$at(2,30638,30692)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // write_back[LocalRoot($t1)@]($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:820:9+54
    $t1 := $Dereference($t14);

    // trace_local[combined_bytes]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:820:9+54
    assume {:print "$track_local(75,8,1):", $t1} $t1 == $t1;

    // $t16 := get_field<atomic_bridge_store::Nonce>.inner($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:821:13+11
    assume {:print "$at(2,30706,30717)"} true;
    $t16 := $Dereference($t4)->$inner;

    // $t17 := 18446744073709551615 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:821:28+7
    $t17 := 18446744073709551615;
    assume $IsValid'u64'($t17);

    // $t18 := ==($t16, $t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:821:25+2
    $t18 := $IsEqual'u64'($t16, $t17);

    // if ($t18) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:821:9+208
    if ($t18) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:822:27+1
    assume {:print "$at(2,30758,30759)"} true;
L1:

    // $t19 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:822:27+1
    assume {:print "$at(2,30758,30759)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := borrow_field<atomic_bridge_store::Nonce>.inner($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:822:13+11
    $t20 := $ChildMutation($t4, 0, $Dereference($t4)->$inner);

    // write_ref($t20, $t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:822:13+15
    $t20 := $UpdateMutation($t20, $t19);

    // write_back[Reference($t4).inner (u64)]($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:822:13+15
    $t4 := $UpdateMutation($t4, $Update'$1_atomic_bridge_store_Nonce'_inner($Dereference($t4), $Dereference($t20)));

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:822:28+1
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:824:27+5
    assume {:print "$at(2,30845,30850)"} true;
L0:

    // $t21 := get_field<atomic_bridge_store::Nonce>.inner($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:824:27+11
    assume {:print "$at(2,30845,30856)"} true;
    $t21 := $Dereference($t4)->$inner;

    // $t22 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:824:41+1
    $t22 := 1;
    assume $IsValid'u64'($t22);

    // $t23 := +($t21, $t22) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:824:39+1
    call $t23 := $AddU64($t21, $t22);
    if ($abort_flag) {
        assume {:print "$at(2,30857,30858)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // $t24 := borrow_field<atomic_bridge_store::Nonce>.inner($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:824:13+11
    $t24 := $ChildMutation($t4, 0, $Dereference($t4)->$inner);

    // write_ref($t24, $t23) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:824:13+29
    $t24 := $UpdateMutation($t24, $t23);

    // write_back[Reference($t4).inner (u64)]($t24) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:824:13+29
    $t4 := $UpdateMutation($t4, $Update'$1_atomic_bridge_store_Nonce'_inner($Dereference($t4), $Dereference($t24)));

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:24+19
    assume {:print "$at(2,30935,30954)"} true;
L2:

    // $t25 := borrow_local($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:24+19
    assume {:print "$at(2,30935,30954)"} true;
    $t25 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t26 := get_field<atomic_bridge_store::Nonce>.inner($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:59+12
    $t26 := $Dereference($t4)->$inner;

    // write_back[atomic_bridge_store::Nonce@]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:59+12
    $1_atomic_bridge_store_Nonce_$memory := $ResourceUpdate($1_atomic_bridge_store_Nonce_$memory, $GlobalLocationAddress($t4),
        $Dereference($t4));

    // $t27 := bcs::to_bytes<u64>($t26) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:45+27
    call $t27 := $1_bcs_to_bytes'u64'($t26);
    if ($abort_flag) {
        assume {:print "$at(2,30956,30983)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // vector::append<u8>($t25, $t27) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:9+64
    call $t25 := $1_vector_append'u8'($t25, $t27);
    if ($abort_flag) {
        assume {:print "$at(2,30920,30984)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // write_back[LocalRoot($t1)@]($t25) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:9+64
    $t1 := $Dereference($t25);

    // trace_local[combined_bytes]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:9+64
    assume {:print "$track_local(75,8,1):", $t1} $t1 == $t1;

    // $t28 := move($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:828:19+14
    assume {:print "$at(2,31005,31019)"} true;
    $t28 := $t1;

    // $t29 := opaque begin: aptos_hash::keccak256($t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:828:9+25

    // assume WellFormed($t29) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:828:9+25
    assume $IsValid'vec'u8''($t29);

    // assume Eq<vector<u8>>($t29, aptos_hash::spec_keccak256($t28)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:828:9+25
    assume $IsEqual'vec'u8''($t29, $1_aptos_hash_spec_keccak256($t28));

    // $t29 := opaque end: aptos_hash::keccak256($t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:828:9+25

    // trace_return[0]($t29) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:828:9+25
    assume {:print "$track_return(75,8,0):", $t29} $t29 == $t29;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:829:5+1
    assume {:print "$at(2,31025,31026)"} true;
L3:

    // return $t29 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:829:5+1
    assume {:print "$at(2,31025,31026)"} true;
    $ret0 := $t29;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:829:5+1
L4:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:829:5+1
    assume {:print "$at(2,31025,31026)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::bridge_transfer_id [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:815:5+849
procedure {:timeLimit 40} $1_atomic_bridge_store_bridge_transfer_id$verify(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1') returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: Vec (int);
    var $t2: $Mutation ($1_atomic_bridge_store_Nonce);
    var $t3: int;
    var $t4: $Mutation ($1_atomic_bridge_store_Nonce);
    var $t5: int;
    var $t6: $Mutation (Vec (int));
    var $t7: $1_atomic_bridge_store_AddressPair'#0_#1';
    var $t8: #0;
    var $t9: Vec (int);
    var $t10: $Mutation (Vec (int));
    var $t11: $1_atomic_bridge_store_AddressPair'#0_#1';
    var $t12: #1;
    var $t13: Vec (int);
    var $t14: $Mutation (Vec (int));
    var $t15: Vec (int);
    var $t16: int;
    var $t17: int;
    var $t18: bool;
    var $t19: int;
    var $t20: $Mutation (int);
    var $t21: int;
    var $t22: int;
    var $t23: int;
    var $t24: $Mutation (int);
    var $t25: $Mutation (Vec (int));
    var $t26: int;
    var $t27: Vec (int);
    var $t28: Vec (int);
    var $t29: Vec (int);
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'$1_atomic_bridge_store_Nonce': $1_atomic_bridge_store_Nonce;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:815:5+1
    assume {:print "$at(2,30177,30178)"} true;
    assume $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t0);

    // assume forall $rsc: atomic_bridge_store::Nonce: ResourceDomain<atomic_bridge_store::Nonce>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:815:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_Nonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_Nonce_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_Nonce'($rsc))));

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:815:5+1
    assume {:print "$track_local(75,8,0):", $t0} $t0 == $t0;

    // $t3 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:816:46+16
    assume {:print "$at(2,30381,30397)"} true;
    $t3 := 1;
    assume $IsValid'address'($t3);

    // $t4 := borrow_global<atomic_bridge_store::Nonce>($t3) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:816:21+17
    if (!$ResourceExists($1_atomic_bridge_store_Nonce_$memory, $t3)) {
        call $ExecFailureAbort();
    } else {
        $t4 := $Mutation($Global($t3), EmptyVec(), $ResourceValue($1_atomic_bridge_store_Nonce_$memory, $t3));
    }
    if ($abort_flag) {
        assume {:print "$at(2,30356,30373)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // trace_local[nonce]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:816:13+5
    $temp_0'$1_atomic_bridge_store_Nonce' := $Dereference($t4);
    assume {:print "$track_local(75,8,2):", $temp_0'$1_atomic_bridge_store_Nonce'} $temp_0'$1_atomic_bridge_store_Nonce' == $temp_0'$1_atomic_bridge_store_Nonce';

    // $t1 := vector::empty<u8>() on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:817:30+19
    assume {:print "$at(2,30429,30448)"} true;
    call $t1 := $1_vector_empty'u8'();
    if ($abort_flag) {
        assume {:print "$at(2,30429,30448)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // trace_local[combined_bytes]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:817:13+14
    assume {:print "$track_local(75,8,1):", $t1} $t1 == $t1;

    // $t6 := borrow_local($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:818:24+19
    assume {:print "$at(2,30473,30492)"} true;
    $t6 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t7 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.addresses($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:818:60+17
    $t7 := $t0->$addresses;

    // $t8 := get_field<atomic_bridge_store::AddressPair<#0, #1>>.initiator($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:818:59+28
    $t8 := $t7->$initiator;

    // $t9 := bcs::to_bytes<#0>($t8) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:818:45+43
    call $t9 := $1_bcs_to_bytes'#0'($t8);
    if ($abort_flag) {
        assume {:print "$at(2,30494,30537)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // vector::append<u8>($t6, $t9) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:818:9+80
    call $t6 := $1_vector_append'u8'($t6, $t9);
    if ($abort_flag) {
        assume {:print "$at(2,30458,30538)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // write_back[LocalRoot($t1)@]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:818:9+80
    $t1 := $Dereference($t6);

    // trace_local[combined_bytes]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:818:9+80
    assume {:print "$track_local(75,8,1):", $t1} $t1 == $t1;

    // $t10 := borrow_local($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:819:24+19
    assume {:print "$at(2,30563,30582)"} true;
    $t10 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t11 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.addresses($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:819:60+17
    $t11 := $t0->$addresses;

    // $t12 := get_field<atomic_bridge_store::AddressPair<#0, #1>>.recipient($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:819:59+28
    $t12 := $t11->$recipient;

    // $t13 := bcs::to_bytes<#1>($t12) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:819:45+43
    call $t13 := $1_bcs_to_bytes'#1'($t12);
    if ($abort_flag) {
        assume {:print "$at(2,30584,30627)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // vector::append<u8>($t10, $t13) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:819:9+80
    call $t10 := $1_vector_append'u8'($t10, $t13);
    if ($abort_flag) {
        assume {:print "$at(2,30548,30628)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // write_back[LocalRoot($t1)@]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:819:9+80
    $t1 := $Dereference($t10);

    // trace_local[combined_bytes]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:819:9+80
    assume {:print "$track_local(75,8,1):", $t1} $t1 == $t1;

    // $t14 := borrow_local($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:820:24+19
    assume {:print "$at(2,30653,30672)"} true;
    $t14 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t15 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.hash_lock($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:820:45+17
    $t15 := $t0->$hash_lock;

    // vector::append<u8>($t14, $t15) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:820:9+54
    call $t14 := $1_vector_append'u8'($t14, $t15);
    if ($abort_flag) {
        assume {:print "$at(2,30638,30692)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // write_back[LocalRoot($t1)@]($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:820:9+54
    $t1 := $Dereference($t14);

    // trace_local[combined_bytes]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:820:9+54
    assume {:print "$track_local(75,8,1):", $t1} $t1 == $t1;

    // $t16 := get_field<atomic_bridge_store::Nonce>.inner($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:821:13+11
    assume {:print "$at(2,30706,30717)"} true;
    $t16 := $Dereference($t4)->$inner;

    // $t17 := 18446744073709551615 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:821:28+7
    $t17 := 18446744073709551615;
    assume $IsValid'u64'($t17);

    // $t18 := ==($t16, $t17) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:821:25+2
    $t18 := $IsEqual'u64'($t16, $t17);

    // if ($t18) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:821:9+208
    if ($t18) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:822:27+1
    assume {:print "$at(2,30758,30759)"} true;
L1:

    // $t19 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:822:27+1
    assume {:print "$at(2,30758,30759)"} true;
    $t19 := 0;
    assume $IsValid'u64'($t19);

    // $t20 := borrow_field<atomic_bridge_store::Nonce>.inner($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:822:13+11
    $t20 := $ChildMutation($t4, 0, $Dereference($t4)->$inner);

    // write_ref($t20, $t19) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:822:13+15
    $t20 := $UpdateMutation($t20, $t19);

    // write_back[Reference($t4).inner (u64)]($t20) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:822:13+15
    $t4 := $UpdateMutation($t4, $Update'$1_atomic_bridge_store_Nonce'_inner($Dereference($t4), $Dereference($t20)));

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:822:28+1
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:824:27+5
    assume {:print "$at(2,30845,30850)"} true;
L0:

    // $t21 := get_field<atomic_bridge_store::Nonce>.inner($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:824:27+11
    assume {:print "$at(2,30845,30856)"} true;
    $t21 := $Dereference($t4)->$inner;

    // $t22 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:824:41+1
    $t22 := 1;
    assume $IsValid'u64'($t22);

    // $t23 := +($t21, $t22) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:824:39+1
    call $t23 := $AddU64($t21, $t22);
    if ($abort_flag) {
        assume {:print "$at(2,30857,30858)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // $t24 := borrow_field<atomic_bridge_store::Nonce>.inner($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:824:13+11
    $t24 := $ChildMutation($t4, 0, $Dereference($t4)->$inner);

    // write_ref($t24, $t23) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:824:13+29
    $t24 := $UpdateMutation($t24, $t23);

    // write_back[Reference($t4).inner (u64)]($t24) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:824:13+29
    $t4 := $UpdateMutation($t4, $Update'$1_atomic_bridge_store_Nonce'_inner($Dereference($t4), $Dereference($t24)));

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:24+19
    assume {:print "$at(2,30935,30954)"} true;
L2:

    // $t25 := borrow_local($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:24+19
    assume {:print "$at(2,30935,30954)"} true;
    $t25 := $Mutation($Local(1), EmptyVec(), $t1);

    // $t26 := get_field<atomic_bridge_store::Nonce>.inner($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:59+12
    $t26 := $Dereference($t4)->$inner;

    // write_back[atomic_bridge_store::Nonce@]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:59+12
    $1_atomic_bridge_store_Nonce_$memory := $ResourceUpdate($1_atomic_bridge_store_Nonce_$memory, $GlobalLocationAddress($t4),
        $Dereference($t4));

    // $t27 := bcs::to_bytes<u64>($t26) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:45+27
    call $t27 := $1_bcs_to_bytes'u64'($t26);
    if ($abort_flag) {
        assume {:print "$at(2,30956,30983)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // vector::append<u8>($t25, $t27) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:9+64
    call $t25 := $1_vector_append'u8'($t25, $t27);
    if ($abort_flag) {
        assume {:print "$at(2,30920,30984)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(75,8):", $t5} $t5 == $t5;
        goto L4;
    }

    // write_back[LocalRoot($t1)@]($t25) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:9+64
    $t1 := $Dereference($t25);

    // trace_local[combined_bytes]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:826:9+64
    assume {:print "$track_local(75,8,1):", $t1} $t1 == $t1;

    // $t28 := move($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:828:19+14
    assume {:print "$at(2,31005,31019)"} true;
    $t28 := $t1;

    // $t29 := opaque begin: aptos_hash::keccak256($t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:828:9+25

    // assume WellFormed($t29) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:828:9+25
    assume $IsValid'vec'u8''($t29);

    // assume Eq<vector<u8>>($t29, aptos_hash::spec_keccak256($t28)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:828:9+25
    assume $IsEqual'vec'u8''($t29, $1_aptos_hash_spec_keccak256($t28));

    // $t29 := opaque end: aptos_hash::keccak256($t28) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:828:9+25

    // trace_return[0]($t29) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:828:9+25
    assume {:print "$track_return(75,8,0):", $t29} $t29 == $t29;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:829:5+1
    assume {:print "$at(2,31025,31026)"} true;
L3:

    // return $t29 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:829:5+1
    assume {:print "$at(2,31025,31026)"} true;
    $ret0 := $t29;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:829:5+1
L4:

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:829:5+1
    assume {:print "$at(2,31025,31026)"} true;
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_correct_hash_lock<address, ethereum::EthereumAddress> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:711:5+221
procedure {:inline 1} $1_atomic_bridge_store_assert_correct_hash_lock'address_$1_ethereum_EthereumAddress'(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress', _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: bool;
    var $t4: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $t1: Vec (int);
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:711:5+1
    assume {:print "$at(2,24983,24984)"} true;
    assume {:print "$track_local(75,1,0):", $t0} $t0 == $t0;

    // trace_local[hash_lock]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:711:5+1
    assume {:print "$track_local(75,1,1):", $t1} $t1 == $t1;

    // $t2 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.hash_lock($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:31+18
    assume {:print "$at(2,25158,25176)"} true;
    $t2 := $t0->$hash_lock;

    // $t3 := ==($t1, $t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:28+2
    $t3 := $IsEqual'vec'u8''($t1, $t2);

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    assume {:print "$at(2,25136,25197)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:51+18
L0:

    // $t4 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:51+18
    assume {:print "$at(2,25178,25196)"} true;
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    assume {:print "$at(2,25136,25197)"} true;
    assume {:print "$track_abort(75,1):", $t4} $t4 == $t4;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:70+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
    assume {:print "$at(2,25203,25204)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
    assume {:print "$at(2,25203,25204)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
    assume {:print "$at(2,25203,25204)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_correct_hash_lock<ethereum::EthereumAddress, address> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:711:5+221
procedure {:inline 1} $1_atomic_bridge_store_assert_correct_hash_lock'$1_ethereum_EthereumAddress_address'(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address', _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: bool;
    var $t4: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $t1: Vec (int);
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'': $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:711:5+1
    assume {:print "$at(2,24983,24984)"} true;
    assume {:print "$track_local(75,1,0):", $t0} $t0 == $t0;

    // trace_local[hash_lock]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:711:5+1
    assume {:print "$track_local(75,1,1):", $t1} $t1 == $t1;

    // $t2 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.hash_lock($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:31+18
    assume {:print "$at(2,25158,25176)"} true;
    $t2 := $t0->$hash_lock;

    // $t3 := ==($t1, $t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:28+2
    $t3 := $IsEqual'vec'u8''($t1, $t2);

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    assume {:print "$at(2,25136,25197)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:51+18
L0:

    // $t4 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:51+18
    assume {:print "$at(2,25178,25196)"} true;
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    assume {:print "$at(2,25136,25197)"} true;
    assume {:print "$track_abort(75,1):", $t4} $t4 == $t4;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:70+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
    assume {:print "$at(2,25203,25204)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
    assume {:print "$at(2,25203,25204)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
    assume {:print "$at(2,25203,25204)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_correct_hash_lock<#0, #1> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:711:5+221
procedure {:inline 1} $1_atomic_bridge_store_assert_correct_hash_lock'#0_#1'(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1', _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: bool;
    var $t4: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t1: Vec (int);
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:711:5+1
    assume {:print "$at(2,24983,24984)"} true;
    assume {:print "$track_local(75,1,0):", $t0} $t0 == $t0;

    // trace_local[hash_lock]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:711:5+1
    assume {:print "$track_local(75,1,1):", $t1} $t1 == $t1;

    // $t2 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.hash_lock($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:31+18
    assume {:print "$at(2,25158,25176)"} true;
    $t2 := $t0->$hash_lock;

    // $t3 := ==($t1, $t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:28+2
    $t3 := $IsEqual'vec'u8''($t1, $t2);

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    assume {:print "$at(2,25136,25197)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:51+18
L0:

    // $t4 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:51+18
    assume {:print "$at(2,25178,25196)"} true;
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    assume {:print "$at(2,25136,25197)"} true;
    assume {:print "$track_abort(75,1):", $t4} $t4 == $t4;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:70+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
    assume {:print "$at(2,25203,25204)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
    assume {:print "$at(2,25203,25204)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
    assume {:print "$at(2,25203,25204)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_correct_hash_lock [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:711:5+221
procedure {:timeLimit 40} $1_atomic_bridge_store_assert_correct_hash_lock$verify(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1', _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: bool;
    var $t4: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t1: Vec (int);
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:711:5+1
    assume {:print "$at(2,24983,24984)"} true;
    assume $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t0);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:711:5+1
    assume $IsValid'vec'u8''($t1);

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:711:5+1
    assume {:print "$track_local(75,1,0):", $t0} $t0 == $t0;

    // trace_local[hash_lock]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:711:5+1
    assume {:print "$track_local(75,1,1):", $t1} $t1 == $t1;

    // $t2 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.hash_lock($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:31+18
    assume {:print "$at(2,25158,25176)"} true;
    $t2 := $t0->$hash_lock;

    // $t3 := ==($t1, $t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:28+2
    $t3 := $IsEqual'vec'u8''($t1, $t2);

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    assume {:print "$at(2,25136,25197)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:51+18
L0:

    // $t4 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:51+18
    assume {:print "$at(2,25178,25196)"} true;
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    assume {:print "$at(2,25136,25197)"} true;
    assume {:print "$track_abort(75,1):", $t4} $t4 == $t4;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:9+61
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:712:70+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
    assume {:print "$at(2,25203,25204)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
    assume {:print "$at(2,25203,25204)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:713:5+1
    assume {:print "$at(2,25203,25204)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_min_time_lock [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:669:5+113
procedure {:inline 1} $1_atomic_bridge_store_assert_min_time_lock(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[time_lock]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:669:5+1
    assume {:print "$at(2,23315,23316)"} true;
    assume {:print "$track_local(75,2,0):", $t0} $t0 == $t0;

    // $t1 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:30+13
    assume {:print "$at(2,23387,23400)"} true;
    $t1 := 1;
    assume $IsValid'u64'($t1);

    // $t2 := >=($t0, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:27+2
    call $t2 := $Ge($t0, $t1);

    // if ($t2) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:9+55
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:9+55
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:9+55
    assume {:print "$at(2,23366,23421)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:45+18
L0:

    // $t3 := 6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:45+18
    assume {:print "$at(2,23402,23420)"} true;
    $t3 := 6;
    assume $IsValid'u64'($t3);

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:9+55
    assume {:print "$at(2,23366,23421)"} true;
    assume {:print "$track_abort(75,2):", $t3} $t3 == $t3;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:9+55
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:64+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:671:5+1
    assume {:print "$at(2,23427,23428)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:671:5+1
    assume {:print "$at(2,23427,23428)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:671:5+1
L4:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:671:5+1
    assume {:print "$at(2,23427,23428)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_min_time_lock [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:669:5+113
procedure {:timeLimit 40} $1_atomic_bridge_store_assert_min_time_lock$verify(_$t0: int) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: bool;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:669:5+1
    assume {:print "$at(2,23315,23316)"} true;
    assume $IsValid'u64'($t0);

    // trace_local[time_lock]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:669:5+1
    assume {:print "$track_local(75,2,0):", $t0} $t0 == $t0;

    // $t1 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:30+13
    assume {:print "$at(2,23387,23400)"} true;
    $t1 := 1;
    assume $IsValid'u64'($t1);

    // $t2 := >=($t0, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:27+2
    call $t2 := $Ge($t0, $t1);

    // if ($t2) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:9+55
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:9+55
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:9+55
    assume {:print "$at(2,23366,23421)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:45+18
L0:

    // $t3 := 6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:45+18
    assume {:print "$at(2,23402,23420)"} true;
    $t3 := 6;
    assume $IsValid'u64'($t3);

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:9+55
    assume {:print "$at(2,23366,23421)"} true;
    assume {:print "$track_abort(75,2):", $t3} $t3 == $t3;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:9+55
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:670:64+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:671:5+1
    assume {:print "$at(2,23427,23428)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:671:5+1
    assume {:print "$at(2,23427,23428)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:671:5+1
L4:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:671:5+1
    assume {:print "$at(2,23427,23428)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_pending<address, ethereum::EthereumAddress> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:677:5+197
procedure {:inline 1} $1_atomic_bridge_store_assert_pending'address_$1_ethereum_EthereumAddress'(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:677:5+1
    assume {:print "$at(2,23598,23599)"} true;
    assume {:print "$track_local(75,3,0):", $t0} $t0 == $t0;

    // $t1 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.state($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:17+13
    assume {:print "$at(2,23726,23739)"} true;
    $t1 := $t0->$state;

    // $t2 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:34+19
    $t2 := 1;
    assume $IsValid'u8'($t2);

    // $t3 := ==($t1, $t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:31+2
    $t3 := $IsEqual'u8'($t1, $t2);

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    assume {:print "$at(2,23718,23789)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:55+24
L0:

    // $t4 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:55+24
    assume {:print "$at(2,23764,23788)"} true;
    $t4 := 2;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    assume {:print "$at(2,23718,23789)"} true;
    assume {:print "$track_abort(75,3):", $t4} $t4 == $t4;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
    assume {:print "$at(2,23794,23795)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
    assume {:print "$at(2,23794,23795)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
    assume {:print "$at(2,23794,23795)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_pending<ethereum::EthereumAddress, address> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:677:5+197
procedure {:inline 1} $1_atomic_bridge_store_assert_pending'$1_ethereum_EthereumAddress_address'(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'': $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:677:5+1
    assume {:print "$at(2,23598,23599)"} true;
    assume {:print "$track_local(75,3,0):", $t0} $t0 == $t0;

    // $t1 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.state($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:17+13
    assume {:print "$at(2,23726,23739)"} true;
    $t1 := $t0->$state;

    // $t2 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:34+19
    $t2 := 1;
    assume $IsValid'u8'($t2);

    // $t3 := ==($t1, $t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:31+2
    $t3 := $IsEqual'u8'($t1, $t2);

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    assume {:print "$at(2,23718,23789)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:55+24
L0:

    // $t4 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:55+24
    assume {:print "$at(2,23764,23788)"} true;
    $t4 := 2;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    assume {:print "$at(2,23718,23789)"} true;
    assume {:print "$track_abort(75,3):", $t4} $t4 == $t4;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
    assume {:print "$at(2,23794,23795)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
    assume {:print "$at(2,23794,23795)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
    assume {:print "$at(2,23794,23795)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_pending<#0, #1> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:677:5+197
procedure {:inline 1} $1_atomic_bridge_store_assert_pending'#0_#1'(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:677:5+1
    assume {:print "$at(2,23598,23599)"} true;
    assume {:print "$track_local(75,3,0):", $t0} $t0 == $t0;

    // $t1 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.state($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:17+13
    assume {:print "$at(2,23726,23739)"} true;
    $t1 := $t0->$state;

    // $t2 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:34+19
    $t2 := 1;
    assume $IsValid'u8'($t2);

    // $t3 := ==($t1, $t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:31+2
    $t3 := $IsEqual'u8'($t1, $t2);

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    assume {:print "$at(2,23718,23789)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:55+24
L0:

    // $t4 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:55+24
    assume {:print "$at(2,23764,23788)"} true;
    $t4 := 2;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    assume {:print "$at(2,23718,23789)"} true;
    assume {:print "$track_abort(75,3):", $t4} $t4 == $t4;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
    assume {:print "$at(2,23794,23795)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
    assume {:print "$at(2,23794,23795)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
    assume {:print "$at(2,23794,23795)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_pending [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:677:5+197
procedure {:timeLimit 40} $1_atomic_bridge_store_assert_pending$verify(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: bool;
    var $t4: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:677:5+1
    assume {:print "$at(2,23598,23599)"} true;
    assume $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t0);

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:677:5+1
    assume {:print "$track_local(75,3,0):", $t0} $t0 == $t0;

    // $t1 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.state($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:17+13
    assume {:print "$at(2,23726,23739)"} true;
    $t1 := $t0->$state;

    // $t2 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:34+19
    $t2 := 1;
    assume $IsValid'u8'($t2);

    // $t3 := ==($t1, $t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:31+2
    $t3 := $IsEqual'u8'($t1, $t2);

    // if ($t3) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    if ($t3) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    assume {:print "$at(2,23718,23789)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:55+24
L0:

    // $t4 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:55+24
    assume {:print "$at(2,23764,23788)"} true;
    $t4 := 2;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    assume {:print "$at(2,23718,23789)"} true;
    assume {:print "$track_abort(75,3):", $t4} $t4 == $t4;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:678:9+71
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
    assume {:print "$at(2,23794,23795)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
    assume {:print "$at(2,23794,23795)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:679:5+1
    assume {:print "$at(2,23794,23795)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_timed_out_lock<address, ethereum::EthereumAddress> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:719:5+182
procedure {:inline 1} $1_atomic_bridge_store_assert_timed_out_lock'address_$1_ethereum_EthereumAddress'(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:719:5+1
    assume {:print "$at(2,25367,25368)"} true;
    assume {:print "$track_local(75,4,0):", $t0} $t0 == $t0;

    // $t1 := atomic_bridge_store::now() on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:17+5
    assume {:print "$at(2,25502,25507)"} true;
    call $t1 := $1_atomic_bridge_store_now();
    if ($abort_flag) {
        assume {:print "$at(2,25502,25507)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,4):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.time_lock($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:25+17
    $t3 := $t0->$time_lock;

    // $t4 := >($t1, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:23+1
    call $t4 := $Gt($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    assume {:print "$at(2,25494,25542)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:44+12
L0:

    // $t5 := 4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:44+12
    assume {:print "$at(2,25529,25541)"} true;
    $t5 := 4;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    assume {:print "$at(2,25494,25542)"} true;
    assume {:print "$track_abort(75,4):", $t5} $t5 == $t5;

    // $t2 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    $t2 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:57+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
    assume {:print "$at(2,25548,25549)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
    assume {:print "$at(2,25548,25549)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
    assume {:print "$at(2,25548,25549)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_timed_out_lock<ethereum::EthereumAddress, address> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:719:5+182
procedure {:inline 1} $1_atomic_bridge_store_assert_timed_out_lock'$1_ethereum_EthereumAddress_address'(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'': $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:719:5+1
    assume {:print "$at(2,25367,25368)"} true;
    assume {:print "$track_local(75,4,0):", $t0} $t0 == $t0;

    // $t1 := atomic_bridge_store::now() on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:17+5
    assume {:print "$at(2,25502,25507)"} true;
    call $t1 := $1_atomic_bridge_store_now();
    if ($abort_flag) {
        assume {:print "$at(2,25502,25507)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,4):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.time_lock($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:25+17
    $t3 := $t0->$time_lock;

    // $t4 := >($t1, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:23+1
    call $t4 := $Gt($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    assume {:print "$at(2,25494,25542)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:44+12
L0:

    // $t5 := 4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:44+12
    assume {:print "$at(2,25529,25541)"} true;
    $t5 := 4;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    assume {:print "$at(2,25494,25542)"} true;
    assume {:print "$track_abort(75,4):", $t5} $t5 == $t5;

    // $t2 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    $t2 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:57+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
    assume {:print "$at(2,25548,25549)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
    assume {:print "$at(2,25548,25549)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
    assume {:print "$at(2,25548,25549)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_timed_out_lock<#0, #1> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:719:5+182
procedure {:inline 1} $1_atomic_bridge_store_assert_timed_out_lock'#0_#1'(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:719:5+1
    assume {:print "$at(2,25367,25368)"} true;
    assume {:print "$track_local(75,4,0):", $t0} $t0 == $t0;

    // $t1 := atomic_bridge_store::now() on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:17+5
    assume {:print "$at(2,25502,25507)"} true;
    call $t1 := $1_atomic_bridge_store_now();
    if ($abort_flag) {
        assume {:print "$at(2,25502,25507)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,4):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.time_lock($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:25+17
    $t3 := $t0->$time_lock;

    // $t4 := >($t1, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:23+1
    call $t4 := $Gt($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    assume {:print "$at(2,25494,25542)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:44+12
L0:

    // $t5 := 4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:44+12
    assume {:print "$at(2,25529,25541)"} true;
    $t5 := 4;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    assume {:print "$at(2,25494,25542)"} true;
    assume {:print "$track_abort(75,4):", $t5} $t5 == $t5;

    // $t2 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    $t2 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:57+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
    assume {:print "$at(2,25548,25549)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
    assume {:print "$at(2,25548,25549)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
    assume {:print "$at(2,25548,25549)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_timed_out_lock [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:719:5+182
procedure {:timeLimit 40} $1_atomic_bridge_store_assert_timed_out_lock$verify(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:719:5+1
    assume {:print "$at(2,25367,25368)"} true;
    assume $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t0);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:719:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:719:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:719:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:719:5+182
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:719:5+182
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:719:5+1
    assume {:print "$track_local(75,4,0):", $t0} $t0 == $t0;

    // $t1 := atomic_bridge_store::now() on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:17+5
    assume {:print "$at(2,25502,25507)"} true;
    call $t1 := $1_atomic_bridge_store_now();
    if ($abort_flag) {
        assume {:print "$at(2,25502,25507)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,4):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.time_lock($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:25+17
    $t3 := $t0->$time_lock;

    // $t4 := >($t1, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:23+1
    call $t4 := $Gt($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    assume {:print "$at(2,25494,25542)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:44+12
L0:

    // $t5 := 4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:44+12
    assume {:print "$at(2,25529,25541)"} true;
    $t5 := 4;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    assume {:print "$at(2,25494,25542)"} true;
    assume {:print "$track_abort(75,4):", $t5} $t5 == $t5;

    // $t2 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    $t2 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:9+48
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:720:57+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
    assume {:print "$at(2,25548,25549)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
    assume {:print "$at(2,25548,25549)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:721:5+1
    assume {:print "$at(2,25548,25549)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_valid_bridge_transfer_id [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:693:5+179
procedure {:inline 1} $1_atomic_bridge_store_assert_valid_bridge_transfer_id(_$t0: Vec (int)) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t0: Vec (int);
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:693:5+1
    assume {:print "$at(2,24253,24254)"} true;
    assume {:print "$track_local(75,5,0):", $t0} $t0 == $t0;

    // $t1 := vector::length<u8>($t0) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:17+34
    assume {:print "$at(2,24355,24389)"} true;
    call $t1 := $1_vector_length'u8'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,24355,24389)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,5):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := 32 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:55+2
    $t3 := 32;
    assume $IsValid'u64'($t3);

    // $t4 := ==($t1, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:52+2
    $t4 := $IsEqual'u64'($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:9+78
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:9+78
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:9+78
    assume {:print "$at(2,24347,24425)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:59+27
L0:

    // $t5 := 8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:59+27
    assume {:print "$at(2,24397,24424)"} true;
    $t5 := 8;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:9+78
    assume {:print "$at(2,24347,24425)"} true;
    assume {:print "$track_abort(75,5):", $t5} $t5 == $t5;

    // $t2 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:9+78
    $t2 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:9+78
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:87+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:695:5+1
    assume {:print "$at(2,24431,24432)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:695:5+1
    assume {:print "$at(2,24431,24432)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:695:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:695:5+1
    assume {:print "$at(2,24431,24432)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_valid_bridge_transfer_id [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:693:5+179
procedure {:timeLimit 40} $1_atomic_bridge_store_assert_valid_bridge_transfer_id$verify(_$t0: Vec (int)) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t0: Vec (int);
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:693:5+1
    assume {:print "$at(2,24253,24254)"} true;
    assume $IsValid'vec'u8''($t0);

    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:693:5+1
    assume {:print "$track_local(75,5,0):", $t0} $t0 == $t0;

    // $t1 := vector::length<u8>($t0) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:17+34
    assume {:print "$at(2,24355,24389)"} true;
    call $t1 := $1_vector_length'u8'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,24355,24389)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,5):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := 32 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:55+2
    $t3 := 32;
    assume $IsValid'u64'($t3);

    // $t4 := ==($t1, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:52+2
    $t4 := $IsEqual'u64'($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:9+78
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:9+78
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:9+78
    assume {:print "$at(2,24347,24425)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:59+27
L0:

    // $t5 := 8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:59+27
    assume {:print "$at(2,24397,24424)"} true;
    $t5 := 8;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:9+78
    assume {:print "$at(2,24347,24425)"} true;
    assume {:print "$track_abort(75,5):", $t5} $t5 == $t5;

    // $t2 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:9+78
    $t2 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:9+78
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:694:87+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:695:5+1
    assume {:print "$at(2,24431,24432)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:695:5+1
    assume {:print "$at(2,24431,24432)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:695:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:695:5+1
    assume {:print "$at(2,24431,24432)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_valid_hash_lock [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:685:5+128
procedure {:inline 1} $1_atomic_bridge_store_assert_valid_hash_lock(_$t0: Vec (int)) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t0: Vec (int);
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[hash_lock]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:685:5+1
    assume {:print "$at(2,23950,23951)"} true;
    assume {:print "$track_local(75,6,0):", $t0} $t0 == $t0;

    // $t1 := vector::length<u8>($t0) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:17+25
    assume {:print "$at(2,24019,24044)"} true;
    call $t1 := $1_vector_length'u8'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,24019,24044)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,6):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := 32 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:46+2
    $t3 := 32;
    assume $IsValid'u64'($t3);

    // $t4 := ==($t1, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:43+2
    $t4 := $IsEqual'u64'($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:9+60
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:9+60
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:9+60
    assume {:print "$at(2,24011,24071)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:50+18
L0:

    // $t5 := 5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:50+18
    assume {:print "$at(2,24052,24070)"} true;
    $t5 := 5;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:9+60
    assume {:print "$at(2,24011,24071)"} true;
    assume {:print "$track_abort(75,6):", $t5} $t5 == $t5;

    // $t2 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:9+60
    $t2 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:9+60
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:69+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:687:5+1
    assume {:print "$at(2,24077,24078)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:687:5+1
    assume {:print "$at(2,24077,24078)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:687:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:687:5+1
    assume {:print "$at(2,24077,24078)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_valid_hash_lock [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:685:5+128
procedure {:timeLimit 40} $1_atomic_bridge_store_assert_valid_hash_lock$verify(_$t0: Vec (int)) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t0: Vec (int);
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:685:5+1
    assume {:print "$at(2,23950,23951)"} true;
    assume $IsValid'vec'u8''($t0);

    // trace_local[hash_lock]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:685:5+1
    assume {:print "$track_local(75,6,0):", $t0} $t0 == $t0;

    // $t1 := vector::length<u8>($t0) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:17+25
    assume {:print "$at(2,24019,24044)"} true;
    call $t1 := $1_vector_length'u8'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,24019,24044)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,6):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := 32 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:46+2
    $t3 := 32;
    assume $IsValid'u64'($t3);

    // $t4 := ==($t1, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:43+2
    $t4 := $IsEqual'u64'($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:9+60
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:9+60
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:9+60
    assume {:print "$at(2,24011,24071)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:50+18
L0:

    // $t5 := 5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:50+18
    assume {:print "$at(2,24052,24070)"} true;
    $t5 := 5;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:9+60
    assume {:print "$at(2,24011,24071)"} true;
    assume {:print "$track_abort(75,6):", $t5} $t5 == $t5;

    // $t2 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:9+60
    $t2 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:9+60
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:686:69+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:687:5+1
    assume {:print "$at(2,24077,24078)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:687:5+1
    assume {:print "$at(2,24077,24078)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:687:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:687:5+1
    assume {:print "$at(2,24077,24078)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_within_timelock<address, ethereum::EthereumAddress> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:727:5+182
procedure {:inline 1} $1_atomic_bridge_store_assert_within_timelock'address_$1_ethereum_EthereumAddress'(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: bool;
    var $t6: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:727:5+1
    assume {:print "$at(2,25710,25711)"} true;
    assume {:print "$track_local(75,7,0):", $t0} $t0 == $t0;

    // $t1 := atomic_bridge_store::now() on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:19+5
    assume {:print "$at(2,25848,25853)"} true;
    call $t1 := $1_atomic_bridge_store_now();
    if ($abort_flag) {
        assume {:print "$at(2,25848,25853)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,7):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.time_lock($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:27+17
    $t3 := $t0->$time_lock;

    // $t4 := >($t1, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:25+1
    call $t4 := $Gt($t1, $t3);

    // $t5 := !($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:17+1
    call $t5 := $Not($t4);

    // if ($t5) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    assume {:print "$at(2,25838,25885)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:47+8
L0:

    // $t6 := 3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:47+8
    assume {:print "$at(2,25876,25884)"} true;
    $t6 := 3;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    assume {:print "$at(2,25838,25885)"} true;
    assume {:print "$track_abort(75,7):", $t6} $t6 == $t6;

    // $t2 := move($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    $t2 := $t6;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:56+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
    assume {:print "$at(2,25891,25892)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
    assume {:print "$at(2,25891,25892)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
    assume {:print "$at(2,25891,25892)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_within_timelock<ethereum::EthereumAddress, address> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:727:5+182
procedure {:inline 1} $1_atomic_bridge_store_assert_within_timelock'$1_ethereum_EthereumAddress_address'(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: bool;
    var $t6: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'': $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:727:5+1
    assume {:print "$at(2,25710,25711)"} true;
    assume {:print "$track_local(75,7,0):", $t0} $t0 == $t0;

    // $t1 := atomic_bridge_store::now() on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:19+5
    assume {:print "$at(2,25848,25853)"} true;
    call $t1 := $1_atomic_bridge_store_now();
    if ($abort_flag) {
        assume {:print "$at(2,25848,25853)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,7):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.time_lock($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:27+17
    $t3 := $t0->$time_lock;

    // $t4 := >($t1, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:25+1
    call $t4 := $Gt($t1, $t3);

    // $t5 := !($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:17+1
    call $t5 := $Not($t4);

    // if ($t5) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    assume {:print "$at(2,25838,25885)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:47+8
L0:

    // $t6 := 3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:47+8
    assume {:print "$at(2,25876,25884)"} true;
    $t6 := 3;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    assume {:print "$at(2,25838,25885)"} true;
    assume {:print "$track_abort(75,7):", $t6} $t6 == $t6;

    // $t2 := move($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    $t2 := $t6;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:56+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
    assume {:print "$at(2,25891,25892)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
    assume {:print "$at(2,25891,25892)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
    assume {:print "$at(2,25891,25892)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_within_timelock<#0, #1> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:727:5+182
procedure {:inline 1} $1_atomic_bridge_store_assert_within_timelock'#0_#1'(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: bool;
    var $t6: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:727:5+1
    assume {:print "$at(2,25710,25711)"} true;
    assume {:print "$track_local(75,7,0):", $t0} $t0 == $t0;

    // $t1 := atomic_bridge_store::now() on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:19+5
    assume {:print "$at(2,25848,25853)"} true;
    call $t1 := $1_atomic_bridge_store_now();
    if ($abort_flag) {
        assume {:print "$at(2,25848,25853)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,7):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.time_lock($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:27+17
    $t3 := $t0->$time_lock;

    // $t4 := >($t1, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:25+1
    call $t4 := $Gt($t1, $t3);

    // $t5 := !($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:17+1
    call $t5 := $Not($t4);

    // if ($t5) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    assume {:print "$at(2,25838,25885)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:47+8
L0:

    // $t6 := 3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:47+8
    assume {:print "$at(2,25876,25884)"} true;
    $t6 := 3;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    assume {:print "$at(2,25838,25885)"} true;
    assume {:print "$track_abort(75,7):", $t6} $t6 == $t6;

    // $t2 := move($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    $t2 := $t6;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:56+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
    assume {:print "$at(2,25891,25892)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
    assume {:print "$at(2,25891,25892)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
    assume {:print "$at(2,25891,25892)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::assert_within_timelock [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:727:5+182
procedure {:timeLimit 40} $1_atomic_bridge_store_assert_within_timelock$verify(_$t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1') returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: bool;
    var $t6: int;
    var $t0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:727:5+1
    assume {:print "$at(2,25710,25711)"} true;
    assume $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t0);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:727:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:727:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:727:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:727:5+182
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:727:5+182
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:727:5+1
    assume {:print "$track_local(75,7,0):", $t0} $t0 == $t0;

    // $t1 := atomic_bridge_store::now() on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:19+5
    assume {:print "$at(2,25848,25853)"} true;
    call $t1 := $1_atomic_bridge_store_now();
    if ($abort_flag) {
        assume {:print "$at(2,25848,25853)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,7):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.time_lock($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:27+17
    $t3 := $t0->$time_lock;

    // $t4 := >($t1, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:25+1
    call $t4 := $Gt($t1, $t3);

    // $t5 := !($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:17+1
    call $t5 := $Not($t4);

    // if ($t5) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    assume {:print "$at(2,25838,25885)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:47+8
L0:

    // $t6 := 3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:47+8
    assume {:print "$at(2,25876,25884)"} true;
    $t6 := 3;
    assume $IsValid'u64'($t6);

    // trace_abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    assume {:print "$at(2,25838,25885)"} true;
    assume {:print "$track_abort(75,7):", $t6} $t6 == $t6;

    // $t2 := move($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    $t2 := $t6;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:9+47
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:728:56+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
    assume {:print "$at(2,25891,25892)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
    assume {:print "$at(2,25891,25892)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:729:5+1
    assume {:print "$at(2,25891,25892)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::cancel<address, ethereum::EthereumAddress> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:741:5+160
procedure {:inline 1} $1_atomic_bridge_store_cancel'address_$1_ethereum_EthereumAddress'(_$t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')) returns ($ret0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'))
{
    // declare local variables
    var $t1: int;
    var $t2: $Mutation (int);
    var $t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Eq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t0), 1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:114:9+46
    assume {:print "$at(3,5408,5454)"} true;
    assume $IsEqual'u8'($Dereference($t0)->$state, 1);

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:741:5+1
    assume {:print "$at(2,26284,26285)"} true;
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' := $Dereference($t0);
    assume {:print "$track_local(75,9,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';

    // $t1 := 3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:25+21
    assume {:print "$at(2,26416,26437)"} true;
    $t1 := 3;
    assume $IsValid'u8'($t1);

    // $t2 := borrow_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.state($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+13
    $t2 := $ChildMutation($t0, 4, $Dereference($t0)->$state);

    // write_ref($t2, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+37
    $t2 := $UpdateMutation($t2, $t1);

    // write_back[Reference($t0).state (u8)]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+37
    $t0 := $UpdateMutation($t0, $Update'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_state($Dereference($t0), $Dereference($t2)));

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+37
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' := $Dereference($t0);
    assume {:print "$track_local(75,9,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:46+1
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' := $Dereference($t0);
    assume {:print "$track_local(75,9,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:743:5+1
    assume {:print "$at(2,26443,26444)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:743:5+1
    assume {:print "$at(2,26443,26444)"} true;
    $ret0 := $t0;
    return;

}

// fun atomic_bridge_store::cancel<ethereum::EthereumAddress, address> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:741:5+160
procedure {:inline 1} $1_atomic_bridge_store_cancel'$1_ethereum_EthereumAddress_address'(_$t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')) returns ($ret0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'))
{
    // declare local variables
    var $t1: int;
    var $t2: $Mutation (int);
    var $t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'': $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Eq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t0), 1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:114:9+46
    assume {:print "$at(3,5408,5454)"} true;
    assume $IsEqual'u8'($Dereference($t0)->$state, 1);

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:741:5+1
    assume {:print "$at(2,26284,26285)"} true;
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' := $Dereference($t0);
    assume {:print "$track_local(75,9,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';

    // $t1 := 3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:25+21
    assume {:print "$at(2,26416,26437)"} true;
    $t1 := 3;
    assume $IsValid'u8'($t1);

    // $t2 := borrow_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.state($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+13
    $t2 := $ChildMutation($t0, 4, $Dereference($t0)->$state);

    // write_ref($t2, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+37
    $t2 := $UpdateMutation($t2, $t1);

    // write_back[Reference($t0).state (u8)]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+37
    $t0 := $UpdateMutation($t0, $Update'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_state($Dereference($t0), $Dereference($t2)));

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+37
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' := $Dereference($t0);
    assume {:print "$track_local(75,9,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:46+1
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' := $Dereference($t0);
    assume {:print "$track_local(75,9,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:743:5+1
    assume {:print "$at(2,26443,26444)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:743:5+1
    assume {:print "$at(2,26443,26444)"} true;
    $ret0 := $t0;
    return;

}

// fun atomic_bridge_store::cancel<#0, #1> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:741:5+160
procedure {:inline 1} $1_atomic_bridge_store_cancel'#0_#1'(_$t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')) returns ($ret0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))
{
    // declare local variables
    var $t1: int;
    var $t2: $Mutation (int);
    var $t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Eq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t0), 1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:114:9+46
    assume {:print "$at(3,5408,5454)"} true;
    assume $IsEqual'u8'($Dereference($t0)->$state, 1);

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:741:5+1
    assume {:print "$at(2,26284,26285)"} true;
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,9,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // $t1 := 3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:25+21
    assume {:print "$at(2,26416,26437)"} true;
    $t1 := 3;
    assume $IsValid'u8'($t1);

    // $t2 := borrow_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.state($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+13
    $t2 := $ChildMutation($t0, 4, $Dereference($t0)->$state);

    // write_ref($t2, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+37
    $t2 := $UpdateMutation($t2, $t1);

    // write_back[Reference($t0).state (u8)]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+37
    $t0 := $UpdateMutation($t0, $Update'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_state($Dereference($t0), $Dereference($t2)));

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+37
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,9,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:46+1
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,9,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:743:5+1
    assume {:print "$at(2,26443,26444)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:743:5+1
    assume {:print "$at(2,26443,26444)"} true;
    $ret0 := $t0;
    return;

}

// fun atomic_bridge_store::cancel [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:741:5+160
procedure {:timeLimit 40} $1_atomic_bridge_store_cancel$verify(_$t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')) returns ($ret0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))
{
    // declare local variables
    var $t1: int;
    var $t2: $Mutation (int);
    var $t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:741:5+1
    assume {:print "$at(2,26284,26285)"} true;
    assume $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($Dereference($t0));

    // assume Eq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t0), 1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:114:9+46
    assume {:print "$at(3,5408,5454)"} true;
    assume $IsEqual'u8'($Dereference($t0)->$state, 1);

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:741:5+1
    assume {:print "$at(2,26284,26285)"} true;
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,9,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // $t1 := 3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:25+21
    assume {:print "$at(2,26416,26437)"} true;
    $t1 := 3;
    assume $IsValid'u8'($t1);

    // $t2 := borrow_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.state($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+13
    $t2 := $ChildMutation($t0, 4, $Dereference($t0)->$state);

    // write_ref($t2, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+37
    $t2 := $UpdateMutation($t2, $t1);

    // write_back[Reference($t0).state (u8)]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+37
    $t0 := $UpdateMutation($t0, $Update'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_state($Dereference($t0), $Dereference($t2)));

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:9+37
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,9,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:742:46+1
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,9,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:743:5+1
    assume {:print "$at(2,26443,26444)"} true;
L1:

    // assert Eq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t0), 3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:115:9+47
    assume {:print "$at(3,5463,5510)"} true;
    assert {:msg "assert_failed(3,5463,5510): post-condition does not hold"}
      $IsEqual'u8'($Dereference($t0)->$state, 3);

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:115:9+47
    $ret0 := $t0;
    return;

}

// fun atomic_bridge_store::cancel_details<address, ethereum::EthereumAddress> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+301
procedure {:inline 1} $1_atomic_bridge_store_cancel_details'address_$1_ethereum_EthereumAddress'(_$t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')) returns ($ret0: int, $ret1: int, $ret2: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'))
{
    // declare local variables
    var $t1: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $t2: int;
    var $t3: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $t4: $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress';
    var $t5: int;
    var $t6: int;
    var $t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+1
    assume {:print "$at(2,28741,28742)"} true;
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' := $Dereference($t0);
    assume {:print "$track_local(75,10,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';

    // $t1 := read_ref($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:786:24+7
    assume {:print "$at(2,28906,28913)"} true;
    $t1 := $Dereference($t0);

    // atomic_bridge_store::assert_pending<#0, #1>($t1) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:786:9+23
    call $1_atomic_bridge_store_assert_pending'address_$1_ethereum_EthereumAddress'($t1);
    if ($abort_flag) {
        assume {:print "$at(2,28891,28914)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,10):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := read_ref($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:787:31+7
    assume {:print "$at(2,28946,28953)"} true;
    $t3 := $Dereference($t0);

    // atomic_bridge_store::assert_timed_out_lock<#0, #1>($t3) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:787:9+30
    call $1_atomic_bridge_store_assert_timed_out_lock'address_$1_ethereum_EthereumAddress'($t3);
    if ($abort_flag) {
        assume {:print "$at(2,28924,28954)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,10):", $t2} $t2 == $t2;
        goto L2;
    }

    // atomic_bridge_store::cancel<#0, #1>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:789:9+15
    assume {:print "$at(2,28965,28980)"} true;
    call $t0 := $1_atomic_bridge_store_cancel'address_$1_ethereum_EthereumAddress'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,28965,28980)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,10):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t4 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.addresses($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:10+17
    assume {:print "$at(2,28992,29009)"} true;
    $t4 := $Dereference($t0)->$addresses;

    // $t5 := get_field<atomic_bridge_store::AddressPair<#0, #1>>.initiator($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:10+27
    $t5 := $t4->$initiator;

    // $t6 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.amount($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:39+14
    $t6 := $Dereference($t0)->$amount;

    // trace_return[0]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:9+45
    assume {:print "$track_return(75,10,0):", $t5} $t5 == $t5;

    // trace_return[1]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:9+45
    assume {:print "$track_return(75,10,1):", $t6} $t6 == $t6;

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:9+45
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' := $Dereference($t0);
    assume {:print "$track_local(75,10,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:792:5+1
    assume {:print "$at(2,29041,29042)"} true;
L1:

    // return ($t5, $t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:792:5+1
    assume {:print "$at(2,29041,29042)"} true;
    $ret0 := $t5;
    $ret1 := $t6;
    $ret2 := $t0;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:792:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:792:5+1
    assume {:print "$at(2,29041,29042)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::cancel_details<ethereum::EthereumAddress, address> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+301
procedure {:inline 1} $1_atomic_bridge_store_cancel_details'$1_ethereum_EthereumAddress_address'(_$t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')) returns ($ret0: $1_ethereum_EthereumAddress, $ret1: int, $ret2: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'))
{
    // declare local variables
    var $t1: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $t2: int;
    var $t3: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $t4: $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address';
    var $t5: $1_ethereum_EthereumAddress;
    var $t6: int;
    var $t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'': $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $temp_0'$1_ethereum_EthereumAddress': $1_ethereum_EthereumAddress;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+1
    assume {:print "$at(2,28741,28742)"} true;
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' := $Dereference($t0);
    assume {:print "$track_local(75,10,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';

    // $t1 := read_ref($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:786:24+7
    assume {:print "$at(2,28906,28913)"} true;
    $t1 := $Dereference($t0);

    // atomic_bridge_store::assert_pending<#0, #1>($t1) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:786:9+23
    call $1_atomic_bridge_store_assert_pending'$1_ethereum_EthereumAddress_address'($t1);
    if ($abort_flag) {
        assume {:print "$at(2,28891,28914)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,10):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := read_ref($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:787:31+7
    assume {:print "$at(2,28946,28953)"} true;
    $t3 := $Dereference($t0);

    // atomic_bridge_store::assert_timed_out_lock<#0, #1>($t3) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:787:9+30
    call $1_atomic_bridge_store_assert_timed_out_lock'$1_ethereum_EthereumAddress_address'($t3);
    if ($abort_flag) {
        assume {:print "$at(2,28924,28954)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,10):", $t2} $t2 == $t2;
        goto L2;
    }

    // atomic_bridge_store::cancel<#0, #1>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:789:9+15
    assume {:print "$at(2,28965,28980)"} true;
    call $t0 := $1_atomic_bridge_store_cancel'$1_ethereum_EthereumAddress_address'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,28965,28980)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,10):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t4 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.addresses($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:10+17
    assume {:print "$at(2,28992,29009)"} true;
    $t4 := $Dereference($t0)->$addresses;

    // $t5 := get_field<atomic_bridge_store::AddressPair<#0, #1>>.initiator($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:10+27
    $t5 := $t4->$initiator;

    // $t6 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.amount($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:39+14
    $t6 := $Dereference($t0)->$amount;

    // trace_return[0]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:9+45
    assume {:print "$track_return(75,10,0):", $t5} $t5 == $t5;

    // trace_return[1]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:9+45
    assume {:print "$track_return(75,10,1):", $t6} $t6 == $t6;

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:9+45
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' := $Dereference($t0);
    assume {:print "$track_local(75,10,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:792:5+1
    assume {:print "$at(2,29041,29042)"} true;
L1:

    // return ($t5, $t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:792:5+1
    assume {:print "$at(2,29041,29042)"} true;
    $ret0 := $t5;
    $ret1 := $t6;
    $ret2 := $t0;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:792:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:792:5+1
    assume {:print "$at(2,29041,29042)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::cancel_details<#0, #1> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+301
procedure {:inline 1} $1_atomic_bridge_store_cancel_details'#0_#1'(_$t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')) returns ($ret0: #0, $ret1: int, $ret2: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))
{
    // declare local variables
    var $t1: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t2: int;
    var $t3: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t4: $1_atomic_bridge_store_AddressPair'#0_#1';
    var $t5: #0;
    var $t6: int;
    var $t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var $temp_0'#0': #0;
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+1
    assume {:print "$at(2,28741,28742)"} true;
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,10,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // $t1 := read_ref($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:786:24+7
    assume {:print "$at(2,28906,28913)"} true;
    $t1 := $Dereference($t0);

    // atomic_bridge_store::assert_pending<#0, #1>($t1) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:786:9+23
    call $1_atomic_bridge_store_assert_pending'#0_#1'($t1);
    if ($abort_flag) {
        assume {:print "$at(2,28891,28914)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,10):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := read_ref($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:787:31+7
    assume {:print "$at(2,28946,28953)"} true;
    $t3 := $Dereference($t0);

    // atomic_bridge_store::assert_timed_out_lock<#0, #1>($t3) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:787:9+30
    call $1_atomic_bridge_store_assert_timed_out_lock'#0_#1'($t3);
    if ($abort_flag) {
        assume {:print "$at(2,28924,28954)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,10):", $t2} $t2 == $t2;
        goto L2;
    }

    // atomic_bridge_store::cancel<#0, #1>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:789:9+15
    assume {:print "$at(2,28965,28980)"} true;
    call $t0 := $1_atomic_bridge_store_cancel'#0_#1'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,28965,28980)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,10):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t4 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.addresses($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:10+17
    assume {:print "$at(2,28992,29009)"} true;
    $t4 := $Dereference($t0)->$addresses;

    // $t5 := get_field<atomic_bridge_store::AddressPair<#0, #1>>.initiator($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:10+27
    $t5 := $t4->$initiator;

    // $t6 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.amount($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:39+14
    $t6 := $Dereference($t0)->$amount;

    // trace_return[0]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:9+45
    assume {:print "$track_return(75,10,0):", $t5} $t5 == $t5;

    // trace_return[1]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:9+45
    assume {:print "$track_return(75,10,1):", $t6} $t6 == $t6;

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:9+45
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,10,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:792:5+1
    assume {:print "$at(2,29041,29042)"} true;
L1:

    // return ($t5, $t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:792:5+1
    assume {:print "$at(2,29041,29042)"} true;
    $ret0 := $t5;
    $ret1 := $t6;
    $ret2 := $t0;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:792:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:792:5+1
    assume {:print "$at(2,29041,29042)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::cancel_details [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+301
procedure {:timeLimit 40} $1_atomic_bridge_store_cancel_details$verify(_$t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')) returns ($ret0: #0, $ret1: int, $ret2: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))
{
    // declare local variables
    var $t1: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t2: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t3: int;
    var $t4: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t5: $1_atomic_bridge_store_AddressPair'#0_#1';
    var $t6: #0;
    var $t7: int;
    var $t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var $temp_0'#0': #0;
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'u64': int;
    var $1_timestamp_CurrentTimeMicroseconds_$memory#158: $Memory $1_timestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+1
    assume {:print "$at(2,28741,28742)"} true;
    assume $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($Dereference($t0));

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+301
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+301
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // @158 := save_mem(timestamp::CurrentTimeMicroseconds) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+1
    $1_timestamp_CurrentTimeMicroseconds_$memory#158 := $1_timestamp_CurrentTimeMicroseconds_$memory;

    // $t1 := read_ref($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+1
    $t1 := $Dereference($t0);

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:785:5+1
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,10,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // $t2 := read_ref($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:786:24+7
    assume {:print "$at(2,28906,28913)"} true;
    $t2 := $Dereference($t0);

    // atomic_bridge_store::assert_pending<#0, #1>($t2) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:786:9+23
    call $1_atomic_bridge_store_assert_pending'#0_#1'($t2);
    if ($abort_flag) {
        assume {:print "$at(2,28891,28914)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,10):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := read_ref($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:787:31+7
    assume {:print "$at(2,28946,28953)"} true;
    $t4 := $Dereference($t0);

    // atomic_bridge_store::assert_timed_out_lock<#0, #1>($t4) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:787:9+30
    call $1_atomic_bridge_store_assert_timed_out_lock'#0_#1'($t4);
    if ($abort_flag) {
        assume {:print "$at(2,28924,28954)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,10):", $t3} $t3 == $t3;
        goto L2;
    }

    // assert Eq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t0), 1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:114:9+46
    assume {:print "$at(3,5408,5454)"} true;
    assert {:msg "assert_failed(3,5408,5454): precondition does not hold at this call"}
      $IsEqual'u8'($Dereference($t0)->$state, 1);

    // atomic_bridge_store::cancel<#0, #1>($t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:789:9+15
    assume {:print "$at(2,28965,28980)"} true;
    call $t0 := $1_atomic_bridge_store_cancel'#0_#1'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,28965,28980)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,10):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t5 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.addresses($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:10+17
    assume {:print "$at(2,28992,29009)"} true;
    $t5 := $Dereference($t0)->$addresses;

    // $t6 := get_field<atomic_bridge_store::AddressPair<#0, #1>>.initiator($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:10+27
    $t6 := $t5->$initiator;

    // $t7 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.amount($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:39+14
    $t7 := $Dereference($t0)->$amount;

    // trace_return[0]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:9+45
    assume {:print "$track_return(75,10,0):", $t6} $t6 == $t6;

    // trace_return[1]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:9+45
    assume {:print "$track_return(75,10,1):", $t7} $t7 == $t7;

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:791:9+45
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,10,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:792:5+1
    assume {:print "$at(2,29041,29042)"} true;
L1:

    // assert Not(Neq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t1), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:94:9+47
    assume {:print "$at(3,4688,4735)"} true;
    assert {:msg "assert_failed(3,4688,4735): function does not abort under this condition"}
      !!$IsEqual'u8'($t1->$state, 1);

    // assert Not(Not(Gt(timestamp::spec_now_seconds[@158](), select atomic_bridge_store::BridgeTransferDetails.time_lock<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t1)))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:95:9+63
    assume {:print "$at(3,4744,4807)"} true;
    assert {:msg "assert_failed(3,4744,4807): function does not abort under this condition"}
      !!($1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory#158) > $t1->$time_lock);

    // assert Not(Not(exists[@158]<timestamp::CurrentTimeMicroseconds>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:96:9+61
    assume {:print "$at(3,4816,4877)"} true;
    assert {:msg "assert_failed(3,4816,4877): function does not abort under this condition"}
      !!$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory#158, 1);

    // assert Eq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t0), 3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:97:9+47
    assume {:print "$at(3,4886,4933)"} true;
    assert {:msg "assert_failed(3,4886,4933): post-condition does not hold"}
      $IsEqual'u8'($Dereference($t0)->$state, 3);

    // return ($t6, $t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:97:9+47
    $ret0 := $t6;
    $ret1 := $t7;
    $ret2 := $t0;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:792:5+1
    assume {:print "$at(2,29041,29042)"} true;
L2:

    // assert Or(Or(Neq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t1), 1), Not(Gt(timestamp::spec_now_seconds[@158](), select atomic_bridge_store::BridgeTransferDetails.time_lock<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t1)))), Not(exists[@158]<timestamp::CurrentTimeMicroseconds>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:100:5+224
    assume {:print "$at(3,4945,5169)"} true;
    assert {:msg "assert_failed(3,4945,5169): abort not covered by any of the `aborts_if` clauses"}
      ((!$IsEqual'u8'($t1->$state, 1) || !($1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory#158) > $t1->$time_lock)) || !$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory#158, 1));

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:100:5+224
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::cancel_transfer<address, ethereum::EthereumAddress> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:799:5+549
procedure {:inline 1} $1_atomic_bridge_store_cancel_transfer'address_$1_ethereum_EthereumAddress'(_$t0: Vec (int)) returns ($ret0: int, $ret1: int)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation ($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'');
    var $t6: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'));
    var $t7: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var $t8: int;
    var $t9: int;
    var $t0: Vec (int);
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:799:5+1
    assume {:print "$at(2,29429,29430)"} true;
    assume {:print "$track_local(75,11,0):", $t0} $t0 == $t0;

    // $t1 := features::abort_atomic_bridge_enabled() on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:17+39
    assume {:print "$at(2,29603,29642)"} true;
    call $t1 := $1_features_abort_atomic_bridge_enabled();
    if ($abort_flag) {
        assume {:print "$at(2,29603,29642)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,11):", $t2} $t2 == $t2;
        goto L4;
    }

    // if ($t1) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    assume {:print "$at(2,29595,29671)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:58+26
L0:

    // $t3 := 9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:58+26
    assume {:print "$at(2,29644,29670)"} true;
    $t3 := 9;
    assume $IsValid'u64'($t3);

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    assume {:print "$at(2,29595,29671)"} true;
    assume {:print "$track_abort(75,11):", $t3} $t3 == $t3;

    // $t2 := move($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    $t2 := $t3;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:802:115+16
    assume {:print "$at(2,29788,29804)"} true;
L2:

    // $t4 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:802:115+16
    assume {:print "$at(2,29788,29804)"} true;
    $t4 := 1;
    assume $IsValid'address'($t4);

    // $t5 := borrow_global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>($t4) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:802:21+17
    if (!$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $Mutation($Global($t4), EmptyVec(), $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $t4));
    }
    if ($abort_flag) {
        assume {:print "$at(2,29694,29711)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,11):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t6 := borrow_field<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>.inner($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:805:13+16
    assume {:print "$at(2,29867,29883)"} true;
    $t6 := $ChildMutation($t5, 0, $Dereference($t5)->$inner);

    // $t7 := smart_table::borrow_mut<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t6, $t0) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:804:23+86
    assume {:print "$at(2,29830,29916)"} true;
    call $t7,$t6 := $1_smart_table_borrow_mut'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''($t6, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,29830,29916)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,11):", $t2} $t2 == $t2;
        goto L4;
    }

    // ($t8, $t9) := atomic_bridge_store::cancel_details<#0, #1>($t7) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    assume {:print "$at(2,29927,29972)"} true;
    call $t8,$t9,$t7 := $1_atomic_bridge_store_cancel_details'address_$1_ethereum_EthereumAddress'($t7);
    if ($abort_flag) {
        assume {:print "$at(2,29927,29972)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,11):", $t2} $t2 == $t2;
        goto L4;
    }

    // write_back[Reference($t6)[]]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    $t6 := $UpdateMutation($t6, UpdateTable($Dereference($t6), ReadVec($t7->p, LenVec($t6->p)), $Dereference($t7)));

    // write_back[Reference($t5).inner (smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>)]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    $t5 := $UpdateMutation($t5, $Update'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''_inner($Dereference($t5), $Dereference($t6)));

    // write_back[atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>@]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory := $ResourceUpdate($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $GlobalLocationAddress($t5),
        $Dereference($t5));

    // trace_return[0]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    assume {:print "$track_return(75,11,0):", $t8} $t8 == $t8;

    // trace_return[1]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    assume {:print "$track_return(75,11,1):", $t9} $t9 == $t9;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:809:5+1
    assume {:print "$at(2,29977,29978)"} true;
L3:

    // return ($t8, $t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:809:5+1
    assume {:print "$at(2,29977,29978)"} true;
    $ret0 := $t8;
    $ret1 := $t9;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:809:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:809:5+1
    assume {:print "$at(2,29977,29978)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::cancel_transfer<ethereum::EthereumAddress, address> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:799:5+549
procedure {:inline 1} $1_atomic_bridge_store_cancel_transfer'$1_ethereum_EthereumAddress_address'(_$t0: Vec (int)) returns ($ret0: $1_ethereum_EthereumAddress, $ret1: int)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation ($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'');
    var $t6: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'));
    var $t7: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var $t8: $1_ethereum_EthereumAddress;
    var $t9: int;
    var $t0: Vec (int);
    var $temp_0'$1_ethereum_EthereumAddress': $1_ethereum_EthereumAddress;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:799:5+1
    assume {:print "$at(2,29429,29430)"} true;
    assume {:print "$track_local(75,11,0):", $t0} $t0 == $t0;

    // $t1 := features::abort_atomic_bridge_enabled() on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:17+39
    assume {:print "$at(2,29603,29642)"} true;
    call $t1 := $1_features_abort_atomic_bridge_enabled();
    if ($abort_flag) {
        assume {:print "$at(2,29603,29642)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,11):", $t2} $t2 == $t2;
        goto L4;
    }

    // if ($t1) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    assume {:print "$at(2,29595,29671)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:58+26
L0:

    // $t3 := 9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:58+26
    assume {:print "$at(2,29644,29670)"} true;
    $t3 := 9;
    assume $IsValid'u64'($t3);

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    assume {:print "$at(2,29595,29671)"} true;
    assume {:print "$track_abort(75,11):", $t3} $t3 == $t3;

    // $t2 := move($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    $t2 := $t3;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:802:115+16
    assume {:print "$at(2,29788,29804)"} true;
L2:

    // $t4 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:802:115+16
    assume {:print "$at(2,29788,29804)"} true;
    $t4 := 1;
    assume $IsValid'address'($t4);

    // $t5 := borrow_global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>($t4) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:802:21+17
    if (!$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $Mutation($Global($t4), EmptyVec(), $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $t4));
    }
    if ($abort_flag) {
        assume {:print "$at(2,29694,29711)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,11):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t6 := borrow_field<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>.inner($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:805:13+16
    assume {:print "$at(2,29867,29883)"} true;
    $t6 := $ChildMutation($t5, 0, $Dereference($t5)->$inner);

    // $t7 := smart_table::borrow_mut<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t6, $t0) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:804:23+86
    assume {:print "$at(2,29830,29916)"} true;
    call $t7,$t6 := $1_smart_table_borrow_mut'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''($t6, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,29830,29916)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,11):", $t2} $t2 == $t2;
        goto L4;
    }

    // ($t8, $t9) := atomic_bridge_store::cancel_details<#0, #1>($t7) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    assume {:print "$at(2,29927,29972)"} true;
    call $t8,$t9,$t7 := $1_atomic_bridge_store_cancel_details'$1_ethereum_EthereumAddress_address'($t7);
    if ($abort_flag) {
        assume {:print "$at(2,29927,29972)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,11):", $t2} $t2 == $t2;
        goto L4;
    }

    // write_back[Reference($t6)[]]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    $t6 := $UpdateMutation($t6, UpdateTable($Dereference($t6), ReadVec($t7->p, LenVec($t6->p)), $Dereference($t7)));

    // write_back[Reference($t5).inner (smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>)]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    $t5 := $UpdateMutation($t5, $Update'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''_inner($Dereference($t5), $Dereference($t6)));

    // write_back[atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>@]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory := $ResourceUpdate($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $GlobalLocationAddress($t5),
        $Dereference($t5));

    // trace_return[0]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    assume {:print "$track_return(75,11,0):", $t8} $t8 == $t8;

    // trace_return[1]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    assume {:print "$track_return(75,11,1):", $t9} $t9 == $t9;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:809:5+1
    assume {:print "$at(2,29977,29978)"} true;
L3:

    // return ($t8, $t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:809:5+1
    assume {:print "$at(2,29977,29978)"} true;
    $ret0 := $t8;
    $ret1 := $t9;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:809:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:809:5+1
    assume {:print "$at(2,29977,29978)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::cancel_transfer [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:799:5+549
procedure {:timeLimit 40} $1_atomic_bridge_store_cancel_transfer$verify(_$t0: Vec (int)) returns ($ret0: #0, $ret1: int)
{
    // declare local variables
    var $t1: bool;
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation ($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'');
    var $t6: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'));
    var $t7: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var $t8: #0;
    var $t9: int;
    var $t0: Vec (int);
    var $temp_0'#0': #0;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:799:5+1
    assume {:print "$at(2,29429,29430)"} true;
    assume $IsValid'vec'u8''($t0);

    // assume forall $rsc: features::Features: ResourceDomain<features::Features>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:799:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:799:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:799:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:799:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:799:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:799:5+549
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:799:5+549
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:799:5+1
    assume {:print "$track_local(75,11,0):", $t0} $t0 == $t0;

    // $t1 := features::abort_atomic_bridge_enabled() on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:17+39
    assume {:print "$at(2,29603,29642)"} true;
    call $t1 := $1_features_abort_atomic_bridge_enabled();
    if ($abort_flag) {
        assume {:print "$at(2,29603,29642)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,11):", $t2} $t2 == $t2;
        goto L4;
    }

    // if ($t1) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    if ($t1) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    assume {:print "$at(2,29595,29671)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:58+26
L0:

    // $t3 := 9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:58+26
    assume {:print "$at(2,29644,29670)"} true;
    $t3 := 9;
    assume $IsValid'u64'($t3);

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    assume {:print "$at(2,29595,29671)"} true;
    assume {:print "$track_abort(75,11):", $t3} $t3 == $t3;

    // $t2 := move($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    $t2 := $t3;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:800:9+76
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:802:115+16
    assume {:print "$at(2,29788,29804)"} true;
L2:

    // $t4 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:802:115+16
    assume {:print "$at(2,29788,29804)"} true;
    $t4 := 1;
    assume $IsValid'address'($t4);

    // $t5 := borrow_global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>($t4) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:802:21+17
    if (!$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $Mutation($Global($t4), EmptyVec(), $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $t4));
    }
    if ($abort_flag) {
        assume {:print "$at(2,29694,29711)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,11):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t6 := borrow_field<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>.inner($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:805:13+16
    assume {:print "$at(2,29867,29883)"} true;
    $t6 := $ChildMutation($t5, 0, $Dereference($t5)->$inner);

    // $t7 := smart_table::borrow_mut<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t6, $t0) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:804:23+86
    assume {:print "$at(2,29830,29916)"} true;
    call $t7,$t6 := $1_smart_table_borrow_mut'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t6, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,29830,29916)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,11):", $t2} $t2 == $t2;
        goto L4;
    }

    // ($t8, $t9) := atomic_bridge_store::cancel_details<#0, #1>($t7) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    assume {:print "$at(2,29927,29972)"} true;
    call $t8,$t9,$t7 := $1_atomic_bridge_store_cancel_details'#0_#1'($t7);
    if ($abort_flag) {
        assume {:print "$at(2,29927,29972)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,11):", $t2} $t2 == $t2;
        goto L4;
    }

    // write_back[Reference($t6)[]]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    $t6 := $UpdateMutation($t6, UpdateTable($Dereference($t6), ReadVec($t7->p, LenVec($t6->p)), $Dereference($t7)));

    // write_back[Reference($t5).inner (smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>)]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    $t5 := $UpdateMutation($t5, $Update'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''_inner($Dereference($t5), $Dereference($t6)));

    // write_back[atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>@]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory := $ResourceUpdate($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $GlobalLocationAddress($t5),
        $Dereference($t5));

    // trace_return[0]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    assume {:print "$track_return(75,11,0):", $t8} $t8 == $t8;

    // trace_return[1]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:808:9+45
    assume {:print "$track_return(75,11,1):", $t9} $t9 == $t9;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:809:5+1
    assume {:print "$at(2,29977,29978)"} true;
L3:

    // return ($t8, $t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:809:5+1
    assume {:print "$at(2,29977,29978)"} true;
    $ret0 := $t8;
    $ret1 := $t9;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:809:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:809:5+1
    assume {:print "$at(2,29977,29978)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::complete<address, ethereum::EthereumAddress> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:734:5+162
procedure {:inline 1} $1_atomic_bridge_store_complete'address_$1_ethereum_EthereumAddress'(_$t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')) returns ($ret0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'))
{
    // declare local variables
    var $t1: int;
    var $t2: $Mutation (int);
    var $t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Eq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t0), 1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:109:9+46
    assume {:print "$at(3,5272,5318)"} true;
    assume $IsEqual'u8'($Dereference($t0)->$state, 1);

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:734:5+1
    assume {:print "$at(2,26009,26010)"} true;
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' := $Dereference($t0);
    assume {:print "$track_local(75,12,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';

    // $t1 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:25+21
    assume {:print "$at(2,26143,26164)"} true;
    $t1 := 2;
    assume $IsValid'u8'($t1);

    // $t2 := borrow_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.state($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+13
    $t2 := $ChildMutation($t0, 4, $Dereference($t0)->$state);

    // write_ref($t2, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+37
    $t2 := $UpdateMutation($t2, $t1);

    // write_back[Reference($t0).state (u8)]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+37
    $t0 := $UpdateMutation($t0, $Update'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_state($Dereference($t0), $Dereference($t2)));

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+37
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' := $Dereference($t0);
    assume {:print "$track_local(75,12,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:46+1
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' := $Dereference($t0);
    assume {:print "$track_local(75,12,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:736:5+1
    assume {:print "$at(2,26170,26171)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:736:5+1
    assume {:print "$at(2,26170,26171)"} true;
    $ret0 := $t0;
    return;

}

// fun atomic_bridge_store::complete<ethereum::EthereumAddress, address> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:734:5+162
procedure {:inline 1} $1_atomic_bridge_store_complete'$1_ethereum_EthereumAddress_address'(_$t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')) returns ($ret0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'))
{
    // declare local variables
    var $t1: int;
    var $t2: $Mutation (int);
    var $t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'': $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Eq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t0), 1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:109:9+46
    assume {:print "$at(3,5272,5318)"} true;
    assume $IsEqual'u8'($Dereference($t0)->$state, 1);

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:734:5+1
    assume {:print "$at(2,26009,26010)"} true;
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' := $Dereference($t0);
    assume {:print "$track_local(75,12,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';

    // $t1 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:25+21
    assume {:print "$at(2,26143,26164)"} true;
    $t1 := 2;
    assume $IsValid'u8'($t1);

    // $t2 := borrow_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.state($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+13
    $t2 := $ChildMutation($t0, 4, $Dereference($t0)->$state);

    // write_ref($t2, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+37
    $t2 := $UpdateMutation($t2, $t1);

    // write_back[Reference($t0).state (u8)]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+37
    $t0 := $UpdateMutation($t0, $Update'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_state($Dereference($t0), $Dereference($t2)));

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+37
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' := $Dereference($t0);
    assume {:print "$track_local(75,12,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:46+1
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' := $Dereference($t0);
    assume {:print "$track_local(75,12,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:736:5+1
    assume {:print "$at(2,26170,26171)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:736:5+1
    assume {:print "$at(2,26170,26171)"} true;
    $ret0 := $t0;
    return;

}

// fun atomic_bridge_store::complete<#0, #1> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:734:5+162
procedure {:inline 1} $1_atomic_bridge_store_complete'#0_#1'(_$t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')) returns ($ret0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))
{
    // declare local variables
    var $t1: int;
    var $t2: $Mutation (int);
    var $t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    $t0 := _$t0;

    // bytecode translation starts here
    // assume Eq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t0), 1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:109:9+46
    assume {:print "$at(3,5272,5318)"} true;
    assume $IsEqual'u8'($Dereference($t0)->$state, 1);

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:734:5+1
    assume {:print "$at(2,26009,26010)"} true;
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,12,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // $t1 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:25+21
    assume {:print "$at(2,26143,26164)"} true;
    $t1 := 2;
    assume $IsValid'u8'($t1);

    // $t2 := borrow_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.state($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+13
    $t2 := $ChildMutation($t0, 4, $Dereference($t0)->$state);

    // write_ref($t2, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+37
    $t2 := $UpdateMutation($t2, $t1);

    // write_back[Reference($t0).state (u8)]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+37
    $t0 := $UpdateMutation($t0, $Update'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_state($Dereference($t0), $Dereference($t2)));

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+37
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,12,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:46+1
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,12,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:736:5+1
    assume {:print "$at(2,26170,26171)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:736:5+1
    assume {:print "$at(2,26170,26171)"} true;
    $ret0 := $t0;
    return;

}

// fun atomic_bridge_store::complete [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:734:5+162
procedure {:timeLimit 40} $1_atomic_bridge_store_complete$verify(_$t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')) returns ($ret0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))
{
    // declare local variables
    var $t1: int;
    var $t2: $Mutation (int);
    var $t0: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t0->l == $Param(0);

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:734:5+1
    assume {:print "$at(2,26009,26010)"} true;
    assume $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($Dereference($t0));

    // assume Eq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t0), 1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:109:9+46
    assume {:print "$at(3,5272,5318)"} true;
    assume $IsEqual'u8'($Dereference($t0)->$state, 1);

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:734:5+1
    assume {:print "$at(2,26009,26010)"} true;
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,12,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // $t1 := 2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:25+21
    assume {:print "$at(2,26143,26164)"} true;
    $t1 := 2;
    assume $IsValid'u8'($t1);

    // $t2 := borrow_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.state($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+13
    $t2 := $ChildMutation($t0, 4, $Dereference($t0)->$state);

    // write_ref($t2, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+37
    $t2 := $UpdateMutation($t2, $t1);

    // write_back[Reference($t0).state (u8)]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+37
    $t0 := $UpdateMutation($t0, $Update'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_state($Dereference($t0), $Dereference($t2)));

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:9+37
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,12,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // trace_local[details]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:735:46+1
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t0);
    assume {:print "$track_local(75,12,0):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:736:5+1
    assume {:print "$at(2,26170,26171)"} true;
L1:

    // assert Eq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t0), 2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:110:9+47
    assume {:print "$at(3,5327,5374)"} true;
    assert {:msg "assert_failed(3,5327,5374): post-condition does not hold"}
      $IsEqual'u8'($Dereference($t0)->$state, 2);

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:110:9+47
    $ret0 := $t0;
    return;

}

// fun atomic_bridge_store::complete_details<address, ethereum::EthereumAddress> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+427
procedure {:inline 1} $1_atomic_bridge_store_complete_details'address_$1_ethereum_EthereumAddress'(_$t0: Vec (int), _$t1: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')) returns ($ret0: $1_ethereum_EthereumAddress, $ret1: int, $ret2: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'))
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: int;
    var $t4: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $t5: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $t6: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $t7: $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress';
    var $t8: $1_ethereum_EthereumAddress;
    var $t9: int;
    var $t0: Vec (int);
    var $t1: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'$1_ethereum_EthereumAddress': $1_ethereum_EthereumAddress;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[hash_lock]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    assume {:print "$at(2,26897,26898)"} true;
    assume {:print "$track_local(75,13,0):", $t0} $t0 == $t0;

    // trace_local[details]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' := $Dereference($t1);
    assume {:print "$track_local(75,13,1):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';

    // atomic_bridge_store::assert_valid_hash_lock($t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:752:9+34
    assume {:print "$at(2,27072,27106)"} true;
    call $1_atomic_bridge_store_assert_valid_hash_lock($t0);
    if ($abort_flag) {
        assume {:print "$at(2,27072,27106)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := read_ref($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:753:24+7
    assume {:print "$at(2,27131,27138)"} true;
    $t4 := $Dereference($t1);

    // atomic_bridge_store::assert_pending<#0, #1>($t4) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:753:9+23
    call $1_atomic_bridge_store_assert_pending'address_$1_ethereum_EthereumAddress'($t4);
    if ($abort_flag) {
        assume {:print "$at(2,27116,27139)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t5 := read_ref($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:754:33+20
    assume {:print "$at(2,27173,27193)"} true;
    $t5 := $Dereference($t1);

    // atomic_bridge_store::assert_correct_hash_lock<#0, #1>($t5, $t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:754:9+44
    call $1_atomic_bridge_store_assert_correct_hash_lock'address_$1_ethereum_EthereumAddress'($t5, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,27149,27193)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t6 := read_ref($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:755:32+7
    assume {:print "$at(2,27226,27233)"} true;
    $t6 := $Dereference($t1);

    // atomic_bridge_store::assert_within_timelock<#0, #1>($t6) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:755:9+31
    call $1_atomic_bridge_store_assert_within_timelock'address_$1_ethereum_EthereumAddress'($t6);
    if ($abort_flag) {
        assume {:print "$at(2,27203,27234)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // atomic_bridge_store::complete<#0, #1>($t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:757:9+17
    assume {:print "$at(2,27245,27262)"} true;
    call $t1 := $1_atomic_bridge_store_complete'address_$1_ethereum_EthereumAddress'($t1);
    if ($abort_flag) {
        assume {:print "$at(2,27245,27262)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t7 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.addresses($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:10+17
    assume {:print "$at(2,27274,27291)"} true;
    $t7 := $Dereference($t1)->$addresses;

    // $t8 := get_field<atomic_bridge_store::AddressPair<#0, #1>>.recipient($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:10+27
    $t8 := $t7->$recipient;

    // $t9 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.amount($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:39+14
    $t9 := $Dereference($t1)->$amount;

    // trace_return[0]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:9+45
    assume {:print "$track_return(75,13,0):", $t8} $t8 == $t8;

    // trace_return[1]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:9+45
    assume {:print "$track_return(75,13,1):", $t9} $t9 == $t9;

    // trace_local[details]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:9+45
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' := $Dereference($t1);
    assume {:print "$track_local(75,13,1):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:760:5+1
    assume {:print "$at(2,27323,27324)"} true;
L1:

    // return ($t8, $t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:760:5+1
    assume {:print "$at(2,27323,27324)"} true;
    $ret0 := $t8;
    $ret1 := $t9;
    $ret2 := $t1;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:760:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:760:5+1
    assume {:print "$at(2,27323,27324)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::complete_details<ethereum::EthereumAddress, address> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+427
procedure {:inline 1} $1_atomic_bridge_store_complete_details'$1_ethereum_EthereumAddress_address'(_$t0: Vec (int), _$t1: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')) returns ($ret0: int, $ret1: int, $ret2: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'))
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: int;
    var $t4: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $t5: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $t6: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $t7: $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address';
    var $t8: int;
    var $t9: int;
    var $t0: Vec (int);
    var $t1: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'': $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[hash_lock]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    assume {:print "$at(2,26897,26898)"} true;
    assume {:print "$track_local(75,13,0):", $t0} $t0 == $t0;

    // trace_local[details]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' := $Dereference($t1);
    assume {:print "$track_local(75,13,1):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';

    // atomic_bridge_store::assert_valid_hash_lock($t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:752:9+34
    assume {:print "$at(2,27072,27106)"} true;
    call $1_atomic_bridge_store_assert_valid_hash_lock($t0);
    if ($abort_flag) {
        assume {:print "$at(2,27072,27106)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := read_ref($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:753:24+7
    assume {:print "$at(2,27131,27138)"} true;
    $t4 := $Dereference($t1);

    // atomic_bridge_store::assert_pending<#0, #1>($t4) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:753:9+23
    call $1_atomic_bridge_store_assert_pending'$1_ethereum_EthereumAddress_address'($t4);
    if ($abort_flag) {
        assume {:print "$at(2,27116,27139)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t5 := read_ref($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:754:33+20
    assume {:print "$at(2,27173,27193)"} true;
    $t5 := $Dereference($t1);

    // atomic_bridge_store::assert_correct_hash_lock<#0, #1>($t5, $t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:754:9+44
    call $1_atomic_bridge_store_assert_correct_hash_lock'$1_ethereum_EthereumAddress_address'($t5, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,27149,27193)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t6 := read_ref($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:755:32+7
    assume {:print "$at(2,27226,27233)"} true;
    $t6 := $Dereference($t1);

    // atomic_bridge_store::assert_within_timelock<#0, #1>($t6) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:755:9+31
    call $1_atomic_bridge_store_assert_within_timelock'$1_ethereum_EthereumAddress_address'($t6);
    if ($abort_flag) {
        assume {:print "$at(2,27203,27234)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // atomic_bridge_store::complete<#0, #1>($t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:757:9+17
    assume {:print "$at(2,27245,27262)"} true;
    call $t1 := $1_atomic_bridge_store_complete'$1_ethereum_EthereumAddress_address'($t1);
    if ($abort_flag) {
        assume {:print "$at(2,27245,27262)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t7 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.addresses($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:10+17
    assume {:print "$at(2,27274,27291)"} true;
    $t7 := $Dereference($t1)->$addresses;

    // $t8 := get_field<atomic_bridge_store::AddressPair<#0, #1>>.recipient($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:10+27
    $t8 := $t7->$recipient;

    // $t9 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.amount($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:39+14
    $t9 := $Dereference($t1)->$amount;

    // trace_return[0]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:9+45
    assume {:print "$track_return(75,13,0):", $t8} $t8 == $t8;

    // trace_return[1]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:9+45
    assume {:print "$track_return(75,13,1):", $t9} $t9 == $t9;

    // trace_local[details]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:9+45
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' := $Dereference($t1);
    assume {:print "$track_local(75,13,1):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:760:5+1
    assume {:print "$at(2,27323,27324)"} true;
L1:

    // return ($t8, $t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:760:5+1
    assume {:print "$at(2,27323,27324)"} true;
    $ret0 := $t8;
    $ret1 := $t9;
    $ret2 := $t1;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:760:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:760:5+1
    assume {:print "$at(2,27323,27324)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::complete_details<#0, #1> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+427
procedure {:inline 1} $1_atomic_bridge_store_complete_details'#0_#1'(_$t0: Vec (int), _$t1: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')) returns ($ret0: #1, $ret1: int, $ret2: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: int;
    var $t4: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t5: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t6: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t7: $1_atomic_bridge_store_AddressPair'#0_#1';
    var $t8: #1;
    var $t9: int;
    var $t0: Vec (int);
    var $t1: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var $temp_0'#1': #1;
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[hash_lock]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    assume {:print "$at(2,26897,26898)"} true;
    assume {:print "$track_local(75,13,0):", $t0} $t0 == $t0;

    // trace_local[details]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t1);
    assume {:print "$track_local(75,13,1):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // atomic_bridge_store::assert_valid_hash_lock($t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:752:9+34
    assume {:print "$at(2,27072,27106)"} true;
    call $1_atomic_bridge_store_assert_valid_hash_lock($t0);
    if ($abort_flag) {
        assume {:print "$at(2,27072,27106)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := read_ref($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:753:24+7
    assume {:print "$at(2,27131,27138)"} true;
    $t4 := $Dereference($t1);

    // atomic_bridge_store::assert_pending<#0, #1>($t4) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:753:9+23
    call $1_atomic_bridge_store_assert_pending'#0_#1'($t4);
    if ($abort_flag) {
        assume {:print "$at(2,27116,27139)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t5 := read_ref($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:754:33+20
    assume {:print "$at(2,27173,27193)"} true;
    $t5 := $Dereference($t1);

    // atomic_bridge_store::assert_correct_hash_lock<#0, #1>($t5, $t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:754:9+44
    call $1_atomic_bridge_store_assert_correct_hash_lock'#0_#1'($t5, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,27149,27193)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t6 := read_ref($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:755:32+7
    assume {:print "$at(2,27226,27233)"} true;
    $t6 := $Dereference($t1);

    // atomic_bridge_store::assert_within_timelock<#0, #1>($t6) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:755:9+31
    call $1_atomic_bridge_store_assert_within_timelock'#0_#1'($t6);
    if ($abort_flag) {
        assume {:print "$at(2,27203,27234)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // atomic_bridge_store::complete<#0, #1>($t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:757:9+17
    assume {:print "$at(2,27245,27262)"} true;
    call $t1 := $1_atomic_bridge_store_complete'#0_#1'($t1);
    if ($abort_flag) {
        assume {:print "$at(2,27245,27262)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,13):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t7 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.addresses($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:10+17
    assume {:print "$at(2,27274,27291)"} true;
    $t7 := $Dereference($t1)->$addresses;

    // $t8 := get_field<atomic_bridge_store::AddressPair<#0, #1>>.recipient($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:10+27
    $t8 := $t7->$recipient;

    // $t9 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.amount($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:39+14
    $t9 := $Dereference($t1)->$amount;

    // trace_return[0]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:9+45
    assume {:print "$track_return(75,13,0):", $t8} $t8 == $t8;

    // trace_return[1]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:9+45
    assume {:print "$track_return(75,13,1):", $t9} $t9 == $t9;

    // trace_local[details]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:9+45
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t1);
    assume {:print "$track_local(75,13,1):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:760:5+1
    assume {:print "$at(2,27323,27324)"} true;
L1:

    // return ($t8, $t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:760:5+1
    assume {:print "$at(2,27323,27324)"} true;
    $ret0 := $t8;
    $ret1 := $t9;
    $ret2 := $t1;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:760:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:760:5+1
    assume {:print "$at(2,27323,27324)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::complete_details [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+427
procedure {:timeLimit 40} $1_atomic_bridge_store_complete_details$verify(_$t0: Vec (int), _$t1: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1')) returns ($ret0: #1, $ret1: int, $ret2: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'))
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t4: int;
    var $t5: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t6: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t7: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t8: $1_atomic_bridge_store_AddressPair'#0_#1';
    var $t9: #1;
    var $t10: int;
    var $t0: Vec (int);
    var $t1: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var $temp_0'#1': #1;
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_timestamp_CurrentTimeMicroseconds_$memory#160: $Memory $1_timestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();
    assume $t1->l == $Param(1);

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    assume {:print "$at(2,26897,26898)"} true;
    assume $IsValid'vec'u8''($t0);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    assume $IsValid'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($Dereference($t1));

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+427
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+427
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // @160 := save_mem(timestamp::CurrentTimeMicroseconds) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    $1_timestamp_CurrentTimeMicroseconds_$memory#160 := $1_timestamp_CurrentTimeMicroseconds_$memory;

    // $t3 := read_ref($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    $t3 := $Dereference($t1);

    // trace_local[hash_lock]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    assume {:print "$track_local(75,13,0):", $t0} $t0 == $t0;

    // trace_local[details]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:751:5+1
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t1);
    assume {:print "$track_local(75,13,1):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // atomic_bridge_store::assert_valid_hash_lock($t0) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:752:9+34
    assume {:print "$at(2,27072,27106)"} true;
    call $1_atomic_bridge_store_assert_valid_hash_lock($t0);
    if ($abort_flag) {
        assume {:print "$at(2,27072,27106)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,13):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := read_ref($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:753:24+7
    assume {:print "$at(2,27131,27138)"} true;
    $t5 := $Dereference($t1);

    // atomic_bridge_store::assert_pending<#0, #1>($t5) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:753:9+23
    call $1_atomic_bridge_store_assert_pending'#0_#1'($t5);
    if ($abort_flag) {
        assume {:print "$at(2,27116,27139)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,13):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t6 := read_ref($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:754:33+20
    assume {:print "$at(2,27173,27193)"} true;
    $t6 := $Dereference($t1);

    // atomic_bridge_store::assert_correct_hash_lock<#0, #1>($t6, $t0) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:754:9+44
    call $1_atomic_bridge_store_assert_correct_hash_lock'#0_#1'($t6, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,27149,27193)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,13):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t7 := read_ref($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:755:32+7
    assume {:print "$at(2,27226,27233)"} true;
    $t7 := $Dereference($t1);

    // atomic_bridge_store::assert_within_timelock<#0, #1>($t7) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:755:9+31
    call $1_atomic_bridge_store_assert_within_timelock'#0_#1'($t7);
    if ($abort_flag) {
        assume {:print "$at(2,27203,27234)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,13):", $t4} $t4 == $t4;
        goto L2;
    }

    // assert Eq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t1), 1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:109:9+46
    assume {:print "$at(3,5272,5318)"} true;
    assert {:msg "assert_failed(3,5272,5318): precondition does not hold at this call"}
      $IsEqual'u8'($Dereference($t1)->$state, 1);

    // atomic_bridge_store::complete<#0, #1>($t1) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:757:9+17
    assume {:print "$at(2,27245,27262)"} true;
    call $t1 := $1_atomic_bridge_store_complete'#0_#1'($t1);
    if ($abort_flag) {
        assume {:print "$at(2,27245,27262)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(75,13):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t8 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.addresses($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:10+17
    assume {:print "$at(2,27274,27291)"} true;
    $t8 := $Dereference($t1)->$addresses;

    // $t9 := get_field<atomic_bridge_store::AddressPair<#0, #1>>.recipient($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:10+27
    $t9 := $t8->$recipient;

    // $t10 := get_field<atomic_bridge_store::BridgeTransferDetails<#0, #1>>.amount($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:39+14
    $t10 := $Dereference($t1)->$amount;

    // trace_return[0]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:9+45
    assume {:print "$track_return(75,13,0):", $t9} $t9 == $t9;

    // trace_return[1]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:9+45
    assume {:print "$track_return(75,13,1):", $t10} $t10 == $t10;

    // trace_local[details]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:759:9+45
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t1);
    assume {:print "$track_local(75,13,1):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:760:5+1
    assume {:print "$at(2,27323,27324)"} true;
L1:

    // assert Not(Gt(timestamp::spec_now_seconds[@160](), select atomic_bridge_store::BridgeTransferDetails.time_lock<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t3))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:72:9+60
    assume {:print "$at(3,3359,3419)"} true;
    assert {:msg "assert_failed(3,3359,3419): function does not abort under this condition"}
      !($1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory#160) > $t3->$time_lock);

    // assert Not(Not(exists[@160]<timestamp::CurrentTimeMicroseconds>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:73:9+61
    assume {:print "$at(3,3428,3489)"} true;
    assert {:msg "assert_failed(3,3428,3489): function does not abort under this condition"}
      !!$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory#160, 1);

    // assert Not(Neq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t3), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:74:9+47
    assume {:print "$at(3,3498,3545)"} true;
    assert {:msg "assert_failed(3,3498,3545): function does not abort under this condition"}
      !!$IsEqual'u8'($t3->$state, 1);

    // assert Not(Neq<vector<u8>>(select atomic_bridge_store::BridgeTransferDetails.hash_lock<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t3), $t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:75:9+41
    assume {:print "$at(3,3554,3595)"} true;
    assert {:msg "assert_failed(3,3554,3595): function does not abort under this condition"}
      !!$IsEqual'vec'u8''($t3->$hash_lock, $t0);

    // assert Not(Neq<num>(Len<u8>($t0), 32)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:64:9+31
    assume {:print "$at(3,3113,3144)"} true;
    assert {:msg "assert_failed(3,3113,3144): function does not abort under this condition"}
      !!$IsEqual'num'(LenVec($t0), 32);

    // return ($t9, $t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:64:9+31
    $ret0 := $t9;
    $ret1 := $t10;
    $ret2 := $t1;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:760:5+1
    assume {:print "$at(2,27323,27324)"} true;
L2:

    // assert Or(Or(Or(Or(Gt(timestamp::spec_now_seconds[@160](), select atomic_bridge_store::BridgeTransferDetails.time_lock<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t3)), Not(exists[@160]<timestamp::CurrentTimeMicroseconds>(0x1))), Neq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t3), 1)), Neq<vector<u8>>(select atomic_bridge_store::BridgeTransferDetails.hash_lock<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t3), $t0)), Neq<num>(Len<u8>($t0), 32)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:78:5+243
    assume {:print "$at(3,3607,3850)"} true;
    assert {:msg "assert_failed(3,3607,3850): abort not covered by any of the `aborts_if` clauses"}
      ((((($1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory#160) > $t3->$time_lock) || !$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory#160, 1)) || !$IsEqual'u8'($t3->$state, 1)) || !$IsEqual'vec'u8''($t3->$hash_lock, $t0)) || !$IsEqual'num'(LenVec($t0), 32));

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:78:5+243
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::complete_transfer<address, ethereum::EthereumAddress> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+587
procedure {:inline 1} $1_atomic_bridge_store_complete_transfer'address_$1_ethereum_EthereumAddress'(_$t0: Vec (int), _$t1: Vec (int)) returns ($ret0: $1_ethereum_EthereumAddress, $ret1: int)
{
    // declare local variables
    var $t2: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var $t3: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var $t4: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation ($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'');
    var $t10: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'));
    var $t11: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var $t12: $1_ethereum_EthereumAddress;
    var $t13: int;
    var $t0: Vec (int);
    var $t1: Vec (int);
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'$1_ethereum_EthereumAddress': $1_ethereum_EthereumAddress;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, select atomic_bridge_store::SmartTableWrapper.inner<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:83:9+119
    assume {:print "$at(3,4006,4125)"} true;
    assume ($t3 == $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, 1)->$inner);

    // assume Identical($t4, smart_table::spec_get<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t3, $t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:87:9+63
    assume {:print "$at(3,4400,4463)"} true;
    assume ($t4 == $1_smart_table_spec_get'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''($t3, $t0));

    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    assume {:print "$at(2,27791,27792)"} true;
    assume {:print "$track_local(75,14,0):", $t0} $t0 == $t0;

    // trace_local[hash_lock]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    assume {:print "$track_local(75,14,1):", $t1} $t1 == $t1;

    // $t5 := features::abort_atomic_bridge_enabled() on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:17+39
    assume {:print "$at(2,27990,28029)"} true;
    call $t5 := $1_features_abort_atomic_bridge_enabled();
    if ($abort_flag) {
        assume {:print "$at(2,27990,28029)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(75,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // if ($t5) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    assume {:print "$at(2,27982,28058)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:58+26
L0:

    // $t7 := 9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:58+26
    assume {:print "$at(2,28031,28057)"} true;
    $t7 := 9;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    assume {:print "$at(2,27982,28058)"} true;
    assume {:print "$track_abort(75,14):", $t7} $t7 == $t7;

    // $t6 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    $t6 := $t7;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:771:115+16
    assume {:print "$at(2,28175,28191)"} true;
L2:

    // $t8 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:771:115+16
    assume {:print "$at(2,28175,28191)"} true;
    $t8 := 1;
    assume $IsValid'address'($t8);

    // $t9 := borrow_global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>($t8) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:771:21+17
    if (!$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(2,28081,28098)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(75,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t10 := borrow_field<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>.inner($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:774:13+16
    assume {:print "$at(2,28254,28270)"} true;
    $t10 := $ChildMutation($t9, 0, $Dereference($t9)->$inner);

    // $t11 := smart_table::borrow_mut<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t10, $t0) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:773:23+86
    assume {:print "$at(2,28217,28303)"} true;
    call $t11,$t10 := $1_smart_table_borrow_mut'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''($t10, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,28217,28303)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(75,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // trace_local[details]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:773:13+7
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' := $Dereference($t11);
    assume {:print "$track_local(75,14,2):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';

    // ($t12, $t13) := atomic_bridge_store::complete_details<#0, #1>($t1, $t11) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    assume {:print "$at(2,28314,28372)"} true;
    call $t12,$t13,$t11 := $1_atomic_bridge_store_complete_details'address_$1_ethereum_EthereumAddress'($t1, $t11);
    if ($abort_flag) {
        assume {:print "$at(2,28314,28372)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(75,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // write_back[Reference($t10)[]]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    $t10 := $UpdateMutation($t10, UpdateTable($Dereference($t10), ReadVec($t11->p, LenVec($t10->p)), $Dereference($t11)));

    // write_back[Reference($t9).inner (smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>)]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    $t9 := $UpdateMutation($t9, $Update'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''_inner($Dereference($t9), $Dereference($t10)));

    // write_back[atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>@]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory := $ResourceUpdate($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // trace_return[0]($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    assume {:print "$track_return(75,14,0):", $t12} $t12 == $t12;

    // trace_return[1]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    assume {:print "$track_return(75,14,1):", $t13} $t13 == $t13;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:778:5+1
    assume {:print "$at(2,28377,28378)"} true;
L3:

    // return ($t12, $t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:778:5+1
    assume {:print "$at(2,28377,28378)"} true;
    $ret0 := $t12;
    $ret1 := $t13;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:778:5+1
L4:

    // abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:778:5+1
    assume {:print "$at(2,28377,28378)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::complete_transfer<ethereum::EthereumAddress, address> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+587
procedure {:inline 1} $1_atomic_bridge_store_complete_transfer'$1_ethereum_EthereumAddress_address'(_$t0: Vec (int), _$t1: Vec (int)) returns ($ret0: int, $ret1: int)
{
    // declare local variables
    var $t2: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var $t3: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var $t4: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation ($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'');
    var $t10: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'));
    var $t11: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var $t12: int;
    var $t13: int;
    var $t0: Vec (int);
    var $t1: Vec (int);
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'': $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // assume Identical($t3, select atomic_bridge_store::SmartTableWrapper.inner<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:83:9+119
    assume {:print "$at(3,4006,4125)"} true;
    assume ($t3 == $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, 1)->$inner);

    // assume Identical($t4, smart_table::spec_get<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t3, $t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:87:9+63
    assume {:print "$at(3,4400,4463)"} true;
    assume ($t4 == $1_smart_table_spec_get'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''($t3, $t0));

    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    assume {:print "$at(2,27791,27792)"} true;
    assume {:print "$track_local(75,14,0):", $t0} $t0 == $t0;

    // trace_local[hash_lock]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    assume {:print "$track_local(75,14,1):", $t1} $t1 == $t1;

    // $t5 := features::abort_atomic_bridge_enabled() on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:17+39
    assume {:print "$at(2,27990,28029)"} true;
    call $t5 := $1_features_abort_atomic_bridge_enabled();
    if ($abort_flag) {
        assume {:print "$at(2,27990,28029)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(75,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // if ($t5) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    assume {:print "$at(2,27982,28058)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:58+26
L0:

    // $t7 := 9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:58+26
    assume {:print "$at(2,28031,28057)"} true;
    $t7 := 9;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    assume {:print "$at(2,27982,28058)"} true;
    assume {:print "$track_abort(75,14):", $t7} $t7 == $t7;

    // $t6 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    $t6 := $t7;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:771:115+16
    assume {:print "$at(2,28175,28191)"} true;
L2:

    // $t8 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:771:115+16
    assume {:print "$at(2,28175,28191)"} true;
    $t8 := 1;
    assume $IsValid'address'($t8);

    // $t9 := borrow_global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>($t8) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:771:21+17
    if (!$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(2,28081,28098)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(75,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t10 := borrow_field<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>.inner($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:774:13+16
    assume {:print "$at(2,28254,28270)"} true;
    $t10 := $ChildMutation($t9, 0, $Dereference($t9)->$inner);

    // $t11 := smart_table::borrow_mut<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t10, $t0) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:773:23+86
    assume {:print "$at(2,28217,28303)"} true;
    call $t11,$t10 := $1_smart_table_borrow_mut'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''($t10, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,28217,28303)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(75,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // trace_local[details]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:773:13+7
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' := $Dereference($t11);
    assume {:print "$track_local(75,14,2):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';

    // ($t12, $t13) := atomic_bridge_store::complete_details<#0, #1>($t1, $t11) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    assume {:print "$at(2,28314,28372)"} true;
    call $t12,$t13,$t11 := $1_atomic_bridge_store_complete_details'$1_ethereum_EthereumAddress_address'($t1, $t11);
    if ($abort_flag) {
        assume {:print "$at(2,28314,28372)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(75,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // write_back[Reference($t10)[]]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    $t10 := $UpdateMutation($t10, UpdateTable($Dereference($t10), ReadVec($t11->p, LenVec($t10->p)), $Dereference($t11)));

    // write_back[Reference($t9).inner (smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>)]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    $t9 := $UpdateMutation($t9, $Update'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''_inner($Dereference($t9), $Dereference($t10)));

    // write_back[atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>@]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory := $ResourceUpdate($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // trace_return[0]($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    assume {:print "$track_return(75,14,0):", $t12} $t12 == $t12;

    // trace_return[1]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    assume {:print "$track_return(75,14,1):", $t13} $t13 == $t13;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:778:5+1
    assume {:print "$at(2,28377,28378)"} true;
L3:

    // return ($t12, $t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:778:5+1
    assume {:print "$at(2,28377,28378)"} true;
    $ret0 := $t12;
    $ret1 := $t13;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:778:5+1
L4:

    // abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:778:5+1
    assume {:print "$at(2,28377,28378)"} true;
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::complete_transfer [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+587
procedure {:timeLimit 40} $1_atomic_bridge_store_complete_transfer$verify(_$t0: Vec (int), _$t1: Vec (int)) returns ($ret0: #1, $ret1: int)
{
    // declare local variables
    var $t2: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var $t3: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var $t4: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t5: bool;
    var $t6: int;
    var $t7: int;
    var $t8: int;
    var $t9: $Mutation ($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'');
    var $t10: $Mutation (Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1'));
    var $t11: $Mutation ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var $t12: #1;
    var $t13: int;
    var $t0: Vec (int);
    var $t1: Vec (int);
    var $temp_0'#1': #1;
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory#162: $Memory $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';
    var $1_timestamp_CurrentTimeMicroseconds_$memory#163: $Memory $1_timestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    assume {:print "$at(2,27791,27792)"} true;
    assume $IsValid'vec'u8''($t0);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    assume $IsValid'vec'u8''($t1);

    // assume forall $rsc: features::Features: ResourceDomain<features::Features>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+587
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+587
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // assume Identical($t3, select atomic_bridge_store::SmartTableWrapper.inner<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:83:9+119
    assume {:print "$at(3,4006,4125)"} true;
    assume ($t3 == $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, 1)->$inner);

    // assume Identical($t4, smart_table::spec_get<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t3, $t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:87:9+63
    assume {:print "$at(3,4400,4463)"} true;
    assume ($t4 == $1_smart_table_spec_get'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t3, $t0));

    // @163 := save_mem(timestamp::CurrentTimeMicroseconds) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    assume {:print "$at(2,27791,27792)"} true;
    $1_timestamp_CurrentTimeMicroseconds_$memory#163 := $1_timestamp_CurrentTimeMicroseconds_$memory;

    // @162 := save_mem(atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory#162 := $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory;

    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    assume {:print "$track_local(75,14,0):", $t0} $t0 == $t0;

    // trace_local[hash_lock]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:768:5+1
    assume {:print "$track_local(75,14,1):", $t1} $t1 == $t1;

    // $t5 := features::abort_atomic_bridge_enabled() on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:17+39
    assume {:print "$at(2,27990,28029)"} true;
    call $t5 := $1_features_abort_atomic_bridge_enabled();
    if ($abort_flag) {
        assume {:print "$at(2,27990,28029)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(75,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // if ($t5) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    assume {:print "$at(2,27982,28058)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:58+26
L0:

    // $t7 := 9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:58+26
    assume {:print "$at(2,28031,28057)"} true;
    $t7 := 9;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    assume {:print "$at(2,27982,28058)"} true;
    assume {:print "$track_abort(75,14):", $t7} $t7 == $t7;

    // $t6 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    $t6 := $t7;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:769:9+76
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:771:115+16
    assume {:print "$at(2,28175,28191)"} true;
L2:

    // $t8 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:771:115+16
    assume {:print "$at(2,28175,28191)"} true;
    $t8 := 1;
    assume $IsValid'address'($t8);

    // $t9 := borrow_global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>($t8) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:771:21+17
    if (!$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $t8)) {
        call $ExecFailureAbort();
    } else {
        $t9 := $Mutation($Global($t8), EmptyVec(), $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $t8));
    }
    if ($abort_flag) {
        assume {:print "$at(2,28081,28098)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(75,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // $t10 := borrow_field<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>.inner($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:774:13+16
    assume {:print "$at(2,28254,28270)"} true;
    $t10 := $ChildMutation($t9, 0, $Dereference($t9)->$inner);

    // $t11 := smart_table::borrow_mut<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t10, $t0) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:773:23+86
    assume {:print "$at(2,28217,28303)"} true;
    call $t11,$t10 := $1_smart_table_borrow_mut'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t10, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,28217,28303)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(75,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // trace_local[details]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:773:13+7
    $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' := $Dereference($t11);
    assume {:print "$track_local(75,14,2):", $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''} $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'' == $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';

    // ($t12, $t13) := atomic_bridge_store::complete_details<#0, #1>($t1, $t11) on_abort goto L4 with $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    assume {:print "$at(2,28314,28372)"} true;
    call $t12,$t13,$t11 := $1_atomic_bridge_store_complete_details'#0_#1'($t1, $t11);
    if ($abort_flag) {
        assume {:print "$at(2,28314,28372)"} true;
        $t6 := $abort_code;
        assume {:print "$track_abort(75,14):", $t6} $t6 == $t6;
        goto L4;
    }

    // write_back[Reference($t10)[]]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    $t10 := $UpdateMutation($t10, UpdateTable($Dereference($t10), ReadVec($t11->p, LenVec($t10->p)), $Dereference($t11)));

    // write_back[Reference($t9).inner (smart_table::SmartTable<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>)]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    $t9 := $UpdateMutation($t9, $Update'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''_inner($Dereference($t9), $Dereference($t10)));

    // write_back[atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>@]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory := $ResourceUpdate($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $GlobalLocationAddress($t9),
        $Dereference($t9));

    // trace_return[0]($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    assume {:print "$track_return(75,14,0):", $t12} $t12 == $t12;

    // trace_return[1]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:777:9+58
    assume {:print "$track_return(75,14,1):", $t13} $t13 == $t13;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:778:5+1
    assume {:print "$at(2,28377,28378)"} true;
L3:

    // assert Not(Not(features::spec_is_enabled[](71))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:84:9+62
    assume {:print "$at(3,4134,4196)"} true;
    assert {:msg "assert_failed(3,4134,4196): function does not abort under this condition"}
      !!$1_features_spec_is_enabled(71);

    // assert Not(Not(exists[@162]<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:85:9+112
    assume {:print "$at(3,4205,4317)"} true;
    assert {:msg "assert_failed(3,4205,4317): function does not abort under this condition"}
      !!$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory#162, 1);

    // assert Not(Not(smart_table::spec_contains[]<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t3, $t0))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:86:9+65
    assume {:print "$at(3,4326,4391)"} true;
    assert {:msg "assert_failed(3,4326,4391): function does not abort under this condition"}
      !!$1_smart_table_spec_contains'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t3, $t0);

    // assert Not(Gt(timestamp::spec_now_seconds[@163](), select atomic_bridge_store::BridgeTransferDetails.time_lock<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t4))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:72:9+60
    assume {:print "$at(3,3359,3419)"} true;
    assert {:msg "assert_failed(3,3359,3419): function does not abort under this condition"}
      !($1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory#163) > $t4->$time_lock);

    // assert Not(Not(exists[@163]<timestamp::CurrentTimeMicroseconds>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:73:9+61
    assume {:print "$at(3,3428,3489)"} true;
    assert {:msg "assert_failed(3,3428,3489): function does not abort under this condition"}
      !!$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory#163, 1);

    // assert Not(Neq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t4), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:74:9+47
    assume {:print "$at(3,3498,3545)"} true;
    assert {:msg "assert_failed(3,3498,3545): function does not abort under this condition"}
      !!$IsEqual'u8'($t4->$state, 1);

    // assert Not(Neq<vector<u8>>(select atomic_bridge_store::BridgeTransferDetails.hash_lock<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t4), $t1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:75:9+41
    assume {:print "$at(3,3554,3595)"} true;
    assert {:msg "assert_failed(3,3554,3595): function does not abort under this condition"}
      !!$IsEqual'vec'u8''($t4->$hash_lock, $t1);

    // assert Not(Neq<num>(Len<u8>($t1), 32)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:64:9+31
    assume {:print "$at(3,3113,3144)"} true;
    assert {:msg "assert_failed(3,3113,3144): function does not abort under this condition"}
      !!$IsEqual'num'(LenVec($t1), 32);

    // return ($t12, $t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:64:9+31
    $ret0 := $t12;
    $ret1 := $t13;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:778:5+1
    assume {:print "$at(2,28377,28378)"} true;
L4:

    // assert Or(Or(Or(Or(Or(Or(Or(Not(features::spec_is_enabled[](71)), Not(exists[@162]<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(0x1))), Not(smart_table::spec_contains[]<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t3, $t0))), Gt(timestamp::spec_now_seconds[@163](), select atomic_bridge_store::BridgeTransferDetails.time_lock<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t4))), Not(exists[@163]<timestamp::CurrentTimeMicroseconds>(0x1))), Neq<u8>(select atomic_bridge_store::BridgeTransferDetails.state<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t4), 1)), Neq<vector<u8>>(select atomic_bridge_store::BridgeTransferDetails.hash_lock<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t4), $t1)), Neq<num>(Len<u8>($t1), 32)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:82:5+683
    assume {:print "$at(3,3856,4539)"} true;
    assert {:msg "assert_failed(3,3856,4539): abort not covered by any of the `aborts_if` clauses"}
      (((((((!$1_features_spec_is_enabled(71) || !$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory#162, 1)) || !$1_smart_table_spec_contains'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t3, $t0)) || ($1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory#163) > $t4->$time_lock)) || !$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory#163, 1)) || !$IsEqual'u8'($t4->$state, 1)) || !$IsEqual'vec'u8''($t4->$hash_lock, $t1)) || !$IsEqual'num'(LenVec($t1), 32));

    // abort($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:82:5+683
    $abort_code := $t6;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::create_details<address, ethereum::EthereumAddress> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+617
procedure {:inline 1} $1_atomic_bridge_store_create_details'address_$1_ethereum_EthereumAddress'(_$t0: int, _$t1: $1_ethereum_EthereumAddress, _$t2: int, _$t3: Vec (int), _$t4: int) returns ($ret0: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')
{
    // declare local variables
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress';
    var $t11: int;
    var $t12: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $t0: int;
    var $t1: $1_ethereum_EthereumAddress;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: int;
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'$1_ethereum_EthereumAddress': $1_ethereum_EthereumAddress;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // bytecode translation starts here
    // trace_local[initiator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$at(2,21880,21881)"} true;
    assume {:print "$track_local(75,15,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$track_local(75,15,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$track_local(75,15,2):", $t2} $t2 == $t2;

    // trace_local[hash_lock]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$track_local(75,15,3):", $t3} $t3 == $t3;

    // trace_local[time_lock]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$track_local(75,15,4):", $t4} $t4 == $t4;

    // $t5 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:26+1
    assume {:print "$at(2,22127,22128)"} true;
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t6 := >($t2, $t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:24+1
    call $t6 := $Gt($t2, $t5);

    // if ($t6) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    assume {:print "$at(2,22110,22143)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:29+12
L0:

    // $t7 := 7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:29+12
    assume {:print "$at(2,22130,22142)"} true;
    $t7 := 7;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    assume {:print "$at(2,22110,22143)"} true;
    assume {:print "$track_abort(75,15):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    $t8 := $t7;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:638:32+10
    assume {:print "$at(2,22176,22186)"} true;
L2:

    // atomic_bridge_store::assert_valid_hash_lock($t3) on_abort goto L4 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:638:9+34
    assume {:print "$at(2,22153,22187)"} true;
    call $1_atomic_bridge_store_assert_valid_hash_lock($t3);
    if ($abort_flag) {
        assume {:print "$at(2,22153,22187)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(75,15):", $t8} $t8 == $t8;
        goto L4;
    }

    // $t9 := atomic_bridge_store::create_time_lock($t4) on_abort goto L4 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:639:21+27
    assume {:print "$at(2,22209,22236)"} true;
    call $t9 := $1_atomic_bridge_store_create_time_lock($t4);
    if ($abort_flag) {
        assume {:print "$at(2,22209,22236)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(75,15):", $t8} $t8 == $t8;
        goto L4;
    }

    // trace_local[time_lock]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:639:9+9
    assume {:print "$track_local(75,15,4):", $t9} $t9 == $t9;

    // $t10 := pack atomic_bridge_store::AddressPair<#0, #1>($t0, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:642:24+80
    assume {:print "$at(2,22294,22374)"} true;
    $t10 := $1_atomic_bridge_store_AddressPair'address_$1_ethereum_EthereumAddress'($t0, $t1);

    // $t11 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:649:20+19
    assume {:print "$at(2,22461,22480)"} true;
    $t11 := 1;
    assume $IsValid'u8'($t11);

    // $t12 := pack atomic_bridge_store::BridgeTransferDetails<#0, #1>($t10, $t2, $t3, $t9, $t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:641:9+244
    assume {:print "$at(2,22247,22491)"} true;
    $t12 := $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'($t10, $t2, $t3, $t9, $t11);

    // trace_return[0]($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:641:9+244
    assume {:print "$track_return(75,15,0):", $t12} $t12 == $t12;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:651:5+1
    assume {:print "$at(2,22496,22497)"} true;
L3:

    // return $t12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:651:5+1
    assume {:print "$at(2,22496,22497)"} true;
    $ret0 := $t12;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:651:5+1
L4:

    // abort($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:651:5+1
    assume {:print "$at(2,22496,22497)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::create_details<ethereum::EthereumAddress, address> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+617
procedure {:inline 1} $1_atomic_bridge_store_create_details'$1_ethereum_EthereumAddress_address'(_$t0: $1_ethereum_EthereumAddress, _$t1: int, _$t2: int, _$t3: Vec (int), _$t4: int) returns ($ret0: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')
{
    // declare local variables
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address';
    var $t11: int;
    var $t12: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $t0: $1_ethereum_EthereumAddress;
    var $t1: int;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: int;
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'': $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $temp_0'$1_ethereum_EthereumAddress': $1_ethereum_EthereumAddress;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // bytecode translation starts here
    // trace_local[initiator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$at(2,21880,21881)"} true;
    assume {:print "$track_local(75,15,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$track_local(75,15,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$track_local(75,15,2):", $t2} $t2 == $t2;

    // trace_local[hash_lock]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$track_local(75,15,3):", $t3} $t3 == $t3;

    // trace_local[time_lock]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$track_local(75,15,4):", $t4} $t4 == $t4;

    // $t5 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:26+1
    assume {:print "$at(2,22127,22128)"} true;
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t6 := >($t2, $t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:24+1
    call $t6 := $Gt($t2, $t5);

    // if ($t6) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    assume {:print "$at(2,22110,22143)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:29+12
L0:

    // $t7 := 7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:29+12
    assume {:print "$at(2,22130,22142)"} true;
    $t7 := 7;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    assume {:print "$at(2,22110,22143)"} true;
    assume {:print "$track_abort(75,15):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    $t8 := $t7;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:638:32+10
    assume {:print "$at(2,22176,22186)"} true;
L2:

    // atomic_bridge_store::assert_valid_hash_lock($t3) on_abort goto L4 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:638:9+34
    assume {:print "$at(2,22153,22187)"} true;
    call $1_atomic_bridge_store_assert_valid_hash_lock($t3);
    if ($abort_flag) {
        assume {:print "$at(2,22153,22187)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(75,15):", $t8} $t8 == $t8;
        goto L4;
    }

    // $t9 := atomic_bridge_store::create_time_lock($t4) on_abort goto L4 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:639:21+27
    assume {:print "$at(2,22209,22236)"} true;
    call $t9 := $1_atomic_bridge_store_create_time_lock($t4);
    if ($abort_flag) {
        assume {:print "$at(2,22209,22236)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(75,15):", $t8} $t8 == $t8;
        goto L4;
    }

    // trace_local[time_lock]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:639:9+9
    assume {:print "$track_local(75,15,4):", $t9} $t9 == $t9;

    // $t10 := pack atomic_bridge_store::AddressPair<#0, #1>($t0, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:642:24+80
    assume {:print "$at(2,22294,22374)"} true;
    $t10 := $1_atomic_bridge_store_AddressPair'$1_ethereum_EthereumAddress_address'($t0, $t1);

    // $t11 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:649:20+19
    assume {:print "$at(2,22461,22480)"} true;
    $t11 := 1;
    assume $IsValid'u8'($t11);

    // $t12 := pack atomic_bridge_store::BridgeTransferDetails<#0, #1>($t10, $t2, $t3, $t9, $t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:641:9+244
    assume {:print "$at(2,22247,22491)"} true;
    $t12 := $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'($t10, $t2, $t3, $t9, $t11);

    // trace_return[0]($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:641:9+244
    assume {:print "$track_return(75,15,0):", $t12} $t12 == $t12;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:651:5+1
    assume {:print "$at(2,22496,22497)"} true;
L3:

    // return $t12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:651:5+1
    assume {:print "$at(2,22496,22497)"} true;
    $ret0 := $t12;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:651:5+1
L4:

    // abort($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:651:5+1
    assume {:print "$at(2,22496,22497)"} true;
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::create_details [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+617
procedure {:timeLimit 40} $1_atomic_bridge_store_create_details$verify(_$t0: #0, _$t1: #1, _$t2: int, _$t3: Vec (int), _$t4: int) returns ($ret0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1')
{
    // declare local variables
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t8: int;
    var $t9: int;
    var $t10: $1_atomic_bridge_store_AddressPair'#0_#1';
    var $t11: int;
    var $t12: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t0: #0;
    var $t1: #1;
    var $t2: int;
    var $t3: Vec (int);
    var $t4: int;
    var $temp_0'#0': #0;
    var $temp_0'#1': #1;
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    var $1_timestamp_CurrentTimeMicroseconds_$memory#168: $Memory $1_timestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$at(2,21880,21881)"} true;
    assume $IsValid'#0'($t0);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume $IsValid'#1'($t1);

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume $IsValid'u64'($t2);

    // assume WellFormed($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume $IsValid'u64'($t4);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+617
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+617
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // @168 := save_mem(timestamp::CurrentTimeMicroseconds) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    $1_timestamp_CurrentTimeMicroseconds_$memory#168 := $1_timestamp_CurrentTimeMicroseconds_$memory;

    // trace_local[initiator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$track_local(75,15,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$track_local(75,15,1):", $t1} $t1 == $t1;

    // trace_local[amount]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$track_local(75,15,2):", $t2} $t2 == $t2;

    // trace_local[hash_lock]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$track_local(75,15,3):", $t3} $t3 == $t3;

    // trace_local[time_lock]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:635:5+1
    assume {:print "$track_local(75,15,4):", $t4} $t4 == $t4;

    // $t5 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:26+1
    assume {:print "$at(2,22127,22128)"} true;
    $t5 := 0;
    assume $IsValid'u64'($t5);

    // $t6 := >($t2, $t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:24+1
    call $t6 := $Gt($t2, $t5);

    // if ($t6) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    assume {:print "$at(2,22110,22143)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:29+12
L0:

    // $t7 := 7 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:29+12
    assume {:print "$at(2,22130,22142)"} true;
    $t7 := 7;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    assume {:print "$at(2,22110,22143)"} true;
    assume {:print "$track_abort(75,15):", $t7} $t7 == $t7;

    // $t8 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    $t8 := $t7;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:637:9+33
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:638:32+10
    assume {:print "$at(2,22176,22186)"} true;
L2:

    // atomic_bridge_store::assert_valid_hash_lock($t3) on_abort goto L4 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:638:9+34
    assume {:print "$at(2,22153,22187)"} true;
    call $1_atomic_bridge_store_assert_valid_hash_lock($t3);
    if ($abort_flag) {
        assume {:print "$at(2,22153,22187)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(75,15):", $t8} $t8 == $t8;
        goto L4;
    }

    // $t9 := atomic_bridge_store::create_time_lock($t4) on_abort goto L4 with $t8 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:639:21+27
    assume {:print "$at(2,22209,22236)"} true;
    call $t9 := $1_atomic_bridge_store_create_time_lock($t4);
    if ($abort_flag) {
        assume {:print "$at(2,22209,22236)"} true;
        $t8 := $abort_code;
        assume {:print "$track_abort(75,15):", $t8} $t8 == $t8;
        goto L4;
    }

    // trace_local[time_lock]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:639:9+9
    assume {:print "$track_local(75,15,4):", $t9} $t9 == $t9;

    // $t10 := pack atomic_bridge_store::AddressPair<#0, #1>($t0, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:642:24+80
    assume {:print "$at(2,22294,22374)"} true;
    $t10 := $1_atomic_bridge_store_AddressPair'#0_#1'($t0, $t1);

    // $t11 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:649:20+19
    assume {:print "$at(2,22461,22480)"} true;
    $t11 := 1;
    assume $IsValid'u8'($t11);

    // $t12 := pack atomic_bridge_store::BridgeTransferDetails<#0, #1>($t10, $t2, $t3, $t9, $t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:641:9+244
    assume {:print "$at(2,22247,22491)"} true;
    $t12 := $1_atomic_bridge_store_BridgeTransferDetails'#0_#1'($t10, $t2, $t3, $t9, $t11);

    // trace_return[0]($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:641:9+244
    assume {:print "$track_return(75,15,0):", $t12} $t12 == $t12;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:651:5+1
    assume {:print "$at(2,22496,22497)"} true;
L3:

    // assert Not(Lt($t4, 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:11:9+36
    assume {:print "$at(3,453,489)"} true;
    assert {:msg "assert_failed(3,453,489): function does not abort under this condition"}
      !($t4 < 1);

    // assert Not(Not(exists[@168]<timestamp::CurrentTimeMicroseconds>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:12:9+61
    assume {:print "$at(3,498,559)"} true;
    assert {:msg "assert_failed(3,498,559): function does not abort under this condition"}
      !!$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory#168, 1);

    // assert Not(Gt($t4, Sub(18446744073709551615, timestamp::spec_now_seconds[@168]()))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:13:9+62
    assume {:print "$at(3,568,630)"} true;
    assert {:msg "assert_failed(3,568,630): function does not abort under this condition"}
      !($t4 > (18446744073709551615 - $1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory#168)));

    // assert Not(Eq<u64>($t2, 0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:26:9+22
    assume {:print "$at(3,1274,1296)"} true;
    assert {:msg "assert_failed(3,1274,1296): function does not abort under this condition"}
      !$IsEqual'u64'($t2, 0);

    // assert Not(Neq<num>(Len<u8>($t3), 32)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:27:9+31
    assume {:print "$at(3,1305,1336)"} true;
    assert {:msg "assert_failed(3,1305,1336): function does not abort under this condition"}
      !!$IsEqual'num'(LenVec($t3), 32);

    // assert Eq<atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t12, pack atomic_bridge_store::BridgeTransferDetails<#0, #1>(pack atomic_bridge_store::AddressPair<#0, #1>($t0, $t1), $t2, $t3, Add(timestamp::spec_now_seconds(), $t4), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:28:9+354
    assume {:print "$at(3,1345,1699)"} true;
    assert {:msg "assert_failed(3,1345,1699): post-condition does not hold"}
      $IsEqual'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t12, $1_atomic_bridge_store_BridgeTransferDetails'#0_#1'($1_atomic_bridge_store_AddressPair'#0_#1'($t0, $t1), $t2, $t3, ($1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory) + $t4), 1));

    // return $t12 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:28:9+354
    $ret0 := $t12;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:651:5+1
    assume {:print "$at(2,22496,22497)"} true;
L4:

    // assert Or(Or(Or(Or(Lt($t4, 1), Not(exists[@168]<timestamp::CurrentTimeMicroseconds>(0x1))), Gt($t4, Sub(18446744073709551615, timestamp::spec_now_seconds[@168]()))), Eq<u64>($t2, 0)), Neq<num>(Len<u8>($t3), 32)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:23:5+677
    assume {:print "$at(3,1028,1705)"} true;
    assert {:msg "assert_failed(3,1028,1705): abort not covered by any of the `aborts_if` clauses"}
      ((((($t4 < 1) || !$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory#168, 1)) || ($t4 > (18446744073709551615 - $1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory#168)))) || $IsEqual'u64'($t2, 0)) || !$IsEqual'num'(LenVec($t3), 32));

    // abort($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:23:5+677
    $abort_code := $t8;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::create_hashlock [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:701:5+176
procedure {:inline 1} $1_atomic_bridge_store_create_hashlock(_$t0: Vec (int)) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: Vec (int);
    var $t0: Vec (int);
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[pre_image]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:701:5+1
    assume {:print "$at(2,24581,24582)"} true;
    assume {:print "$track_local(75,16,0):", $t0} $t0 == $t0;

    // $t1 := vector::length<u8>($t0) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:17+26
    assume {:print "$at(2,24670,24696)"} true;
    call $t1 := $1_vector_length'u8'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,24670,24696)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,16):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:46+1
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // $t4 := >($t1, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:44+1
    call $t4 := $Gt($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:9+59
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:9+59
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:9+59
    assume {:print "$at(2,24662,24721)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:49+18
L0:

    // $t5 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:49+18
    assume {:print "$at(2,24702,24720)"} true;
    $t5 := 1;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:9+59
    assume {:print "$at(2,24662,24721)"} true;
    assume {:print "$track_abort(75,16):", $t5} $t5 == $t5;

    // $t2 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:9+59
    $t2 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:9+59
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:703:19+9
    assume {:print "$at(2,24741,24750)"} true;
L2:

    // $t6 := opaque begin: aptos_hash::keccak256($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:703:9+20
    assume {:print "$at(2,24731,24751)"} true;

    // assume WellFormed($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:703:9+20
    assume $IsValid'vec'u8''($t6);

    // assume Eq<vector<u8>>($t6, aptos_hash::spec_keccak256($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:703:9+20
    assume $IsEqual'vec'u8''($t6, $1_aptos_hash_spec_keccak256($t0));

    // $t6 := opaque end: aptos_hash::keccak256($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:703:9+20

    // trace_return[0]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:703:9+20
    assume {:print "$track_return(75,16,0):", $t6} $t6 == $t6;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:704:5+1
    assume {:print "$at(2,24756,24757)"} true;
L3:

    // return $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:704:5+1
    assume {:print "$at(2,24756,24757)"} true;
    $ret0 := $t6;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:704:5+1
L4:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:704:5+1
    assume {:print "$at(2,24756,24757)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::create_hashlock [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:701:5+176
procedure {:timeLimit 40} $1_atomic_bridge_store_create_hashlock$verify(_$t0: Vec (int)) returns ($ret0: Vec (int))
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: Vec (int);
    var $t0: Vec (int);
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:701:5+1
    assume {:print "$at(2,24581,24582)"} true;
    assume $IsValid'vec'u8''($t0);

    // trace_local[pre_image]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:701:5+1
    assume {:print "$track_local(75,16,0):", $t0} $t0 == $t0;

    // $t1 := vector::length<u8>($t0) on_abort goto L4 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:17+26
    assume {:print "$at(2,24670,24696)"} true;
    call $t1 := $1_vector_length'u8'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,24670,24696)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,16):", $t2} $t2 == $t2;
        goto L4;
    }

    // $t3 := 0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:46+1
    $t3 := 0;
    assume $IsValid'u64'($t3);

    // $t4 := >($t1, $t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:44+1
    call $t4 := $Gt($t1, $t3);

    // if ($t4) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:9+59
    if ($t4) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:9+59
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:9+59
    assume {:print "$at(2,24662,24721)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:49+18
L0:

    // $t5 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:49+18
    assume {:print "$at(2,24702,24720)"} true;
    $t5 := 1;
    assume $IsValid'u64'($t5);

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:9+59
    assume {:print "$at(2,24662,24721)"} true;
    assume {:print "$track_abort(75,16):", $t5} $t5 == $t5;

    // $t2 := move($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:9+59
    $t2 := $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:702:9+59
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:703:19+9
    assume {:print "$at(2,24741,24750)"} true;
L2:

    // $t6 := opaque begin: aptos_hash::keccak256($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:703:9+20
    assume {:print "$at(2,24731,24751)"} true;

    // assume WellFormed($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:703:9+20
    assume $IsValid'vec'u8''($t6);

    // assume Eq<vector<u8>>($t6, aptos_hash::spec_keccak256($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:703:9+20
    assume $IsEqual'vec'u8''($t6, $1_aptos_hash_spec_keccak256($t0));

    // $t6 := opaque end: aptos_hash::keccak256($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:703:9+20

    // trace_return[0]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:703:9+20
    assume {:print "$track_return(75,16,0):", $t6} $t6 == $t6;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:704:5+1
    assume {:print "$at(2,24756,24757)"} true;
L3:

    // assert Not(Eq<num>(Len<u8>($t0), 0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:105:9+30
    assume {:print "$at(3,5206,5236)"} true;
    assert {:msg "assert_failed(3,5206,5236): function does not abort under this condition"}
      !$IsEqual'num'(LenVec($t0), 0);

    // return $t6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:105:9+30
    $ret0 := $t6;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:704:5+1
    assume {:print "$at(2,24756,24757)"} true;
L4:

    // assert Eq<num>(Len<u8>($t0), 0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:104:5+67
    assume {:print "$at(3,5175,5242)"} true;
    assert {:msg "assert_failed(3,5175,5242): abort not covered by any of the `aborts_if` clauses"}
      $IsEqual'num'(LenVec($t0), 0);

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:104:5+67
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::create_time_lock [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:621:5+132
procedure {:inline 1} $1_atomic_bridge_store_create_time_lock(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[time_lock]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:621:5+1
    assume {:print "$at(2,21277,21278)"} true;
    assume {:print "$track_local(75,17,0):", $t0} $t0 == $t0;

    // atomic_bridge_store::assert_min_time_lock($t0) on_abort goto L2 with $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:622:9+31
    assume {:print "$at(2,21345,21376)"} true;
    call $1_atomic_bridge_store_assert_min_time_lock($t0);
    if ($abort_flag) {
        assume {:print "$at(2,21345,21376)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(75,17):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := atomic_bridge_store::now() on_abort goto L2 with $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:623:9+5
    assume {:print "$at(2,21386,21391)"} true;
    call $t2 := $1_atomic_bridge_store_now();
    if ($abort_flag) {
        assume {:print "$at(2,21386,21391)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(75,17):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := +($t2, $t0) on_abort goto L2 with $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:623:15+1
    call $t3 := $AddU64($t2, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,21392,21393)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(75,17):", $t1} $t1 == $t1;
        goto L2;
    }

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:623:9+17
    assume {:print "$track_return(75,17,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:624:5+1
    assume {:print "$at(2,21408,21409)"} true;
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:624:5+1
    assume {:print "$at(2,21408,21409)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:624:5+1
L2:

    // abort($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:624:5+1
    assume {:print "$at(2,21408,21409)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::create_time_lock [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:621:5+132
procedure {:timeLimit 40} $1_atomic_bridge_store_create_time_lock$verify(_$t0: int) returns ($ret0: int)
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t3: int;
    var $t0: int;
    var $temp_0'u64': int;
    var $1_timestamp_CurrentTimeMicroseconds_$memory#166: $Memory $1_timestamp_CurrentTimeMicroseconds;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:621:5+1
    assume {:print "$at(2,21277,21278)"} true;
    assume $IsValid'u64'($t0);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:621:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:621:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:621:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:621:5+132
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:621:5+132
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // @166 := save_mem(timestamp::CurrentTimeMicroseconds) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:621:5+1
    $1_timestamp_CurrentTimeMicroseconds_$memory#166 := $1_timestamp_CurrentTimeMicroseconds_$memory;

    // trace_local[time_lock]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:621:5+1
    assume {:print "$track_local(75,17,0):", $t0} $t0 == $t0;

    // atomic_bridge_store::assert_min_time_lock($t0) on_abort goto L2 with $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:622:9+31
    assume {:print "$at(2,21345,21376)"} true;
    call $1_atomic_bridge_store_assert_min_time_lock($t0);
    if ($abort_flag) {
        assume {:print "$at(2,21345,21376)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(75,17):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t2 := atomic_bridge_store::now() on_abort goto L2 with $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:623:9+5
    assume {:print "$at(2,21386,21391)"} true;
    call $t2 := $1_atomic_bridge_store_now();
    if ($abort_flag) {
        assume {:print "$at(2,21386,21391)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(75,17):", $t1} $t1 == $t1;
        goto L2;
    }

    // $t3 := +($t2, $t0) on_abort goto L2 with $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:623:15+1
    call $t3 := $AddU64($t2, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,21392,21393)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(75,17):", $t1} $t1 == $t1;
        goto L2;
    }

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:623:9+17
    assume {:print "$track_return(75,17,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:624:5+1
    assume {:print "$at(2,21408,21409)"} true;
L1:

    // assert Not(Lt($t0, 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:11:9+36
    assume {:print "$at(3,453,489)"} true;
    assert {:msg "assert_failed(3,453,489): function does not abort under this condition"}
      !($t0 < 1);

    // assert Not(Not(exists[@166]<timestamp::CurrentTimeMicroseconds>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:12:9+61
    assume {:print "$at(3,498,559)"} true;
    assert {:msg "assert_failed(3,498,559): function does not abort under this condition"}
      !!$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory#166, 1);

    // assert Not(Gt($t0, Sub(18446744073709551615, timestamp::spec_now_seconds[@166]()))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:13:9+62
    assume {:print "$at(3,568,630)"} true;
    assert {:msg "assert_failed(3,568,630): function does not abort under this condition"}
      !($t0 > (18446744073709551615 - $1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory#166)));

    // assert Eq<u64>($t3, Add(timestamp::spec_now_seconds(), $t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:18:9+60
    assume {:print "$at(3,708,768)"} true;
    assert {:msg "assert_failed(3,708,768): post-condition does not hold"}
      $IsEqual'u64'($t3, ($1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory) + $t0));

    // assert Implies(Le(Add(timestamp::spec_now_seconds(), $t0), 18446744073709551615), Eq<u64>($t3, Add(timestamp::spec_now_seconds(), $t0))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:20:9+130
    assume {:print "$at(3,886,1016)"} true;
    assert {:msg "assert_failed(3,886,1016): post-condition does not hold"}
      ((($1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory) + $t0) <= 18446744073709551615) ==> $IsEqual'u64'($t3, ($1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory) + $t0)));

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:20:9+130
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:624:5+1
    assume {:print "$at(2,21408,21409)"} true;
L2:

    // assert Or(Or(Lt($t0, 1), Not(exists[@166]<timestamp::CurrentTimeMicroseconds>(0x1))), Gt($t0, Sub(18446744073709551615, timestamp::spec_now_seconds[@166]()))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:16:5+380
    assume {:print "$at(3,642,1022)"} true;
    assert {:msg "assert_failed(3,642,1022): abort not covered by any of the `aborts_if` clauses"}
      ((($t0 < 1) || !$ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory#166, 1)) || ($t0 > (18446744073709551615 - $1_timestamp_spec_now_seconds($1_timestamp_CurrentTimeMicroseconds_$memory#166))));

    // abort($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:16:5+380
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::get_bridge_transfer_details<address, ethereum::EthereumAddress> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:855:5+465
procedure {:inline 1} $1_atomic_bridge_store_get_bridge_transfer_details'address_$1_ethereum_EthereumAddress'(_$t0: Vec (int)) returns ($ret0: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'';
    var $t3: int;
    var $t4: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var $t5: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $t0: Vec (int);
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:855:5+1
    assume {:print "$at(2,32098,32099)"} true;
    assume {:print "$track_local(75,18,0):", $t0} $t0 == $t0;

    // $t1 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:857:111+16
    assume {:print "$at(2,32401,32417)"} true;
    $t1 := 1;
    assume $IsValid'address'($t1);

    // $t2 := get_global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>($t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:857:21+13
    if (!$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(2,32311,32324)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,18):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := get_field<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>.inner($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:860:13+12
    assume {:print "$at(2,32480,32492)"} true;
    $t4 := $t2->$inner;

    // $t5 := smart_table::borrow<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t4, $t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:859:27+87
    assume {:print "$at(2,32447,32534)"} true;
    call $t5 := $1_smart_table_borrow'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''($t4, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,32447,32534)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,18):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:864:9+12
    assume {:print "$at(2,32545,32557)"} true;
    assume {:print "$track_return(75,18,0):", $t5} $t5 == $t5;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:865:5+1
    assume {:print "$at(2,32562,32563)"} true;
L1:

    // return $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:865:5+1
    assume {:print "$at(2,32562,32563)"} true;
    $ret0 := $t5;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:865:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:865:5+1
    assume {:print "$at(2,32562,32563)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::get_bridge_transfer_details<ethereum::EthereumAddress, address> [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:855:5+465
procedure {:inline 1} $1_atomic_bridge_store_get_bridge_transfer_details'$1_ethereum_EthereumAddress_address'(_$t0: Vec (int)) returns ($ret0: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'';
    var $t3: int;
    var $t4: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var $t5: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $t0: Vec (int);
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'': $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:855:5+1
    assume {:print "$at(2,32098,32099)"} true;
    assume {:print "$track_local(75,18,0):", $t0} $t0 == $t0;

    // $t1 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:857:111+16
    assume {:print "$at(2,32401,32417)"} true;
    $t1 := 1;
    assume $IsValid'address'($t1);

    // $t2 := get_global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>($t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:857:21+13
    if (!$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(2,32311,32324)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,18):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := get_field<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>.inner($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:860:13+12
    assume {:print "$at(2,32480,32492)"} true;
    $t4 := $t2->$inner;

    // $t5 := smart_table::borrow<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t4, $t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:859:27+87
    assume {:print "$at(2,32447,32534)"} true;
    call $t5 := $1_smart_table_borrow'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''($t4, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,32447,32534)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,18):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:864:9+12
    assume {:print "$at(2,32545,32557)"} true;
    assume {:print "$track_return(75,18,0):", $t5} $t5 == $t5;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:865:5+1
    assume {:print "$at(2,32562,32563)"} true;
L1:

    // return $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:865:5+1
    assume {:print "$at(2,32562,32563)"} true;
    $ret0 := $t5;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:865:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:865:5+1
    assume {:print "$at(2,32562,32563)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::get_bridge_transfer_details [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:855:5+465
procedure {:timeLimit 40} $1_atomic_bridge_store_get_bridge_transfer_details$verify(_$t0: Vec (int)) returns ($ret0: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1')
{
    // declare local variables
    var $t1: int;
    var $t2: $1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'';
    var $t3: int;
    var $t4: Table int ($1_atomic_bridge_store_BridgeTransferDetails'#0_#1');
    var $t5: $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $t0: Vec (int);
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'': $1_atomic_bridge_store_BridgeTransferDetails'#0_#1';
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:855:5+1
    assume {:print "$at(2,32098,32099)"} true;
    assume $IsValid'vec'u8''($t0);

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:855:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1'''($rsc))));

    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:855:5+1
    assume {:print "$track_local(75,18,0):", $t0} $t0 == $t0;

    // $t1 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:857:111+16
    assume {:print "$at(2,32401,32417)"} true;
    $t1 := 1;
    assume $IsValid'address'($t1);

    // $t2 := get_global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>($t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:857:21+13
    if (!$ResourceExists($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(2,32311,32324)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,18):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := get_field<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>>.inner($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:860:13+12
    assume {:print "$at(2,32480,32492)"} true;
    $t4 := $t2->$inner;

    // $t5 := smart_table::borrow<vector<u8>, atomic_bridge_store::BridgeTransferDetails<#0, #1>>($t4, $t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:859:27+87
    assume {:print "$at(2,32447,32534)"} true;
    call $t5 := $1_smart_table_borrow'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'#0_#1''($t4, $t0);
    if ($abort_flag) {
        assume {:print "$at(2,32447,32534)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(75,18):", $t3} $t3 == $t3;
        goto L2;
    }

    // trace_return[0]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:864:9+12
    assume {:print "$at(2,32545,32557)"} true;
    assume {:print "$track_return(75,18,0):", $t5} $t5 == $t5;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:865:5+1
    assume {:print "$at(2,32562,32563)"} true;
L1:

    // return $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:865:5+1
    assume {:print "$at(2,32562,32563)"} true;
    $ret0 := $t5;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:865:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:865:5+1
    assume {:print "$at(2,32562,32563)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::get_bridge_transfer_details_counterparty [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:849:5+237
procedure {:timeLimit 40} $1_atomic_bridge_store_get_bridge_transfer_details_counterparty$verify(_$t0: Vec (int)) returns ($ret0: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address')
{
    // declare local variables
    var $t1: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $t2: int;
    var $t0: Vec (int);
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'': $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:849:5+1
    assume {:print "$at(2,31855,31856)"} true;
    assume $IsValid'vec'u8''($t0);

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:849:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''($rsc))));

    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:849:5+1
    assume {:print "$track_local(75,19,0):", $t0} $t0 == $t0;

    // $t1 := atomic_bridge_store::get_bridge_transfer_details<ethereum::EthereumAddress, address>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:852:9+47
    assume {:print "$at(2,32039,32086)"} true;
    call $t1 := $1_atomic_bridge_store_get_bridge_transfer_details'$1_ethereum_EthereumAddress_address'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,32039,32086)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,19):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:852:9+47
    assume {:print "$track_return(75,19,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:853:5+1
    assume {:print "$at(2,32091,32092)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:853:5+1
    assume {:print "$at(2,32091,32092)"} true;
    $ret0 := $t1;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:853:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:853:5+1
    assume {:print "$at(2,32091,32092)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_store::get_bridge_transfer_details_initiator [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:837:5+234
procedure {:timeLimit 40} $1_atomic_bridge_store_get_bridge_transfer_details_initiator$verify(_$t0: Vec (int)) returns ($ret0: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress')
{
    // declare local variables
    var $t1: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $t2: int;
    var $t0: Vec (int);
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:837:5+1
    assume {:print "$at(2,31322,31323)"} true;
    assume $IsValid'vec'u8''($t0);

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:837:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''($rsc))));

    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:837:5+1
    assume {:print "$track_local(75,20,0):", $t0} $t0 == $t0;

    // $t1 := atomic_bridge_store::get_bridge_transfer_details<address, ethereum::EthereumAddress>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:840:9+47
    assume {:print "$at(2,31503,31550)"} true;
    call $t1 := $1_atomic_bridge_store_get_bridge_transfer_details'address_$1_ethereum_EthereumAddress'($t0);
    if ($abort_flag) {
        assume {:print "$at(2,31503,31550)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(75,20):", $t2} $t2 == $t2;
        goto L2;
    }

    // trace_return[0]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:840:9+47
    assume {:print "$track_return(75,20,0):", $t1} $t1 == $t1;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:841:5+1
    assume {:print "$at(2,31555,31556)"} true;
L1:

    // return $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:841:5+1
    assume {:print "$at(2,31555,31556)"} true;
    $ret0 := $t1;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:841:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:841:5+1
    assume {:print "$at(2,31555,31556)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// struct atomic_bridge_configuration::BridgeConfig at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:997:5+140
datatype $1_atomic_bridge_configuration_BridgeConfig {
    $1_atomic_bridge_configuration_BridgeConfig($bridge_operator: int, $initiator_time_lock: int, $counterparty_time_lock: int)
}
function {:inline} $Update'$1_atomic_bridge_configuration_BridgeConfig'_bridge_operator(s: $1_atomic_bridge_configuration_BridgeConfig, x: int): $1_atomic_bridge_configuration_BridgeConfig {
    $1_atomic_bridge_configuration_BridgeConfig(x, s->$initiator_time_lock, s->$counterparty_time_lock)
}
function {:inline} $Update'$1_atomic_bridge_configuration_BridgeConfig'_initiator_time_lock(s: $1_atomic_bridge_configuration_BridgeConfig, x: int): $1_atomic_bridge_configuration_BridgeConfig {
    $1_atomic_bridge_configuration_BridgeConfig(s->$bridge_operator, x, s->$counterparty_time_lock)
}
function {:inline} $Update'$1_atomic_bridge_configuration_BridgeConfig'_counterparty_time_lock(s: $1_atomic_bridge_configuration_BridgeConfig, x: int): $1_atomic_bridge_configuration_BridgeConfig {
    $1_atomic_bridge_configuration_BridgeConfig(s->$bridge_operator, s->$initiator_time_lock, x)
}
function $IsValid'$1_atomic_bridge_configuration_BridgeConfig'(s: $1_atomic_bridge_configuration_BridgeConfig): bool {
    $IsValid'address'(s->$bridge_operator)
      && $IsValid'u64'(s->$initiator_time_lock)
      && $IsValid'u64'(s->$counterparty_time_lock)
}
function {:inline} $IsEqual'$1_atomic_bridge_configuration_BridgeConfig'(s1: $1_atomic_bridge_configuration_BridgeConfig, s2: $1_atomic_bridge_configuration_BridgeConfig): bool {
    s1 == s2
}
var $1_atomic_bridge_configuration_BridgeConfig_$memory: $Memory $1_atomic_bridge_configuration_BridgeConfig;

// struct atomic_bridge_configuration::BridgeConfigOperatorUpdated at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1005:5+120
datatype $1_atomic_bridge_configuration_BridgeConfigOperatorUpdated {
    $1_atomic_bridge_configuration_BridgeConfigOperatorUpdated($old_operator: int, $new_operator: int)
}
function {:inline} $Update'$1_atomic_bridge_configuration_BridgeConfigOperatorUpdated'_old_operator(s: $1_atomic_bridge_configuration_BridgeConfigOperatorUpdated, x: int): $1_atomic_bridge_configuration_BridgeConfigOperatorUpdated {
    $1_atomic_bridge_configuration_BridgeConfigOperatorUpdated(x, s->$new_operator)
}
function {:inline} $Update'$1_atomic_bridge_configuration_BridgeConfigOperatorUpdated'_new_operator(s: $1_atomic_bridge_configuration_BridgeConfigOperatorUpdated, x: int): $1_atomic_bridge_configuration_BridgeConfigOperatorUpdated {
    $1_atomic_bridge_configuration_BridgeConfigOperatorUpdated(s->$old_operator, x)
}
function $IsValid'$1_atomic_bridge_configuration_BridgeConfigOperatorUpdated'(s: $1_atomic_bridge_configuration_BridgeConfigOperatorUpdated): bool {
    $IsValid'address'(s->$old_operator)
      && $IsValid'address'(s->$new_operator)
}
function {:inline} $IsEqual'$1_atomic_bridge_configuration_BridgeConfigOperatorUpdated'(s1: $1_atomic_bridge_configuration_BridgeConfigOperatorUpdated, s2: $1_atomic_bridge_configuration_BridgeConfigOperatorUpdated): bool {
    s1 == s2
}

// struct atomic_bridge_configuration::CounterpartyTimeLockUpdated at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1018:5+82
datatype $1_atomic_bridge_configuration_CounterpartyTimeLockUpdated {
    $1_atomic_bridge_configuration_CounterpartyTimeLockUpdated($time_lock: int)
}
function {:inline} $Update'$1_atomic_bridge_configuration_CounterpartyTimeLockUpdated'_time_lock(s: $1_atomic_bridge_configuration_CounterpartyTimeLockUpdated, x: int): $1_atomic_bridge_configuration_CounterpartyTimeLockUpdated {
    $1_atomic_bridge_configuration_CounterpartyTimeLockUpdated(x)
}
function $IsValid'$1_atomic_bridge_configuration_CounterpartyTimeLockUpdated'(s: $1_atomic_bridge_configuration_CounterpartyTimeLockUpdated): bool {
    $IsValid'u64'(s->$time_lock)
}
function {:inline} $IsEqual'$1_atomic_bridge_configuration_CounterpartyTimeLockUpdated'(s1: $1_atomic_bridge_configuration_CounterpartyTimeLockUpdated, s2: $1_atomic_bridge_configuration_CounterpartyTimeLockUpdated): bool {
    s1 == s2
}

// struct atomic_bridge_configuration::InitiatorTimeLockUpdated at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1012:5+79
datatype $1_atomic_bridge_configuration_InitiatorTimeLockUpdated {
    $1_atomic_bridge_configuration_InitiatorTimeLockUpdated($time_lock: int)
}
function {:inline} $Update'$1_atomic_bridge_configuration_InitiatorTimeLockUpdated'_time_lock(s: $1_atomic_bridge_configuration_InitiatorTimeLockUpdated, x: int): $1_atomic_bridge_configuration_InitiatorTimeLockUpdated {
    $1_atomic_bridge_configuration_InitiatorTimeLockUpdated(x)
}
function $IsValid'$1_atomic_bridge_configuration_InitiatorTimeLockUpdated'(s: $1_atomic_bridge_configuration_InitiatorTimeLockUpdated): bool {
    $IsValid'u64'(s->$time_lock)
}
function {:inline} $IsEqual'$1_atomic_bridge_configuration_InitiatorTimeLockUpdated'(s1: $1_atomic_bridge_configuration_InitiatorTimeLockUpdated, s2: $1_atomic_bridge_configuration_InitiatorTimeLockUpdated): bool {
    s1 == s2
}

// fun atomic_bridge_configuration::initialize [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1025:5+423
procedure {:inline 1} $1_atomic_bridge_configuration_initialize(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: $1_atomic_bridge_configuration_BridgeConfig;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_atomic_bridge_configuration_BridgeConfig;
    var $t0: $signer;
    var $temp_0'$1_atomic_bridge_configuration_BridgeConfig': $1_atomic_bridge_configuration_BridgeConfig;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[aptos_framework]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1025:5+1
    assume {:print "$at(2,37947,37948)"} true;
    assume {:print "$track_local(76,3,0):", $t0} $t0 == $t0;

    // opaque begin: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
    assume {:print "$at(2,38005,38062)"} true;

    // assume Identical($t2, Neq<address>(signer::$address_of($t0), 0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
    assume ($t2 == !$IsEqual'address'($1_signer_$address_of($t0), 1));

    // if ($t2) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
L4:

    // assume And(Neq<address>(signer::$address_of($t0), 0x1), Eq(5, $t3)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
    assume {:print "$at(2,38005,38062)"} true;
    assume (!$IsEqual'address'($1_signer_$address_of($t0), 1) && $IsEqual'num'(5, $t3));

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
    assume {:print "$at(2,38005,38062)"} true;
    assume {:print "$track_abort(76,3):", $t3} $t3 == $t3;

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
    goto L2;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
L3:

    // opaque end: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
    assume {:print "$at(2,38005,38062)"} true;

    // $t4 := signer::address_of($t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1028:30+35
    assume {:print "$at(2,38136,38171)"} true;
    call $t4 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,38136,38171)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(76,3):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t5 := 172800 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1029:34+28
    assume {:print "$at(2,38206,38234)"} true;
    $t5 := 172800;
    assume $IsValid'u64'($t5);

    // $t6 := 86400 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1030:37+31
    assume {:print "$at(2,38272,38303)"} true;
    $t6 := 86400;
    assume $IsValid'u64'($t6);

    // $t7 := pack atomic_bridge_configuration::BridgeConfig($t4, $t5, $t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1027:29+222
    assume {:print "$at(2,38092,38314)"} true;
    $t7 := $1_atomic_bridge_configuration_BridgeConfig($t4, $t5, $t6);

    // trace_local[bridge_config]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1027:13+13
    assume {:print "$track_local(76,3,1):", $t7} $t7 == $t7;

    // move_to<atomic_bridge_configuration::BridgeConfig>($t7, $t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1032:9+7
    assume {:print "$at(2,38324,38331)"} true;
    if ($ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_atomic_bridge_configuration_BridgeConfig_$memory := $ResourceUpdate($1_atomic_bridge_configuration_BridgeConfig_$memory, $t0->$addr, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(2,38324,38331)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(76,3):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1033:5+1
    assume {:print "$at(2,38369,38370)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1033:5+1
    assume {:print "$at(2,38369,38370)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1033:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1033:5+1
    assume {:print "$at(2,38369,38370)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_configuration::initialize [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1025:5+423
procedure {:timeLimit 40} $1_atomic_bridge_configuration_initialize$verify(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: $1_atomic_bridge_configuration_BridgeConfig;
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: int;
    var $t7: $1_atomic_bridge_configuration_BridgeConfig;
    var $t0: $signer;
    var $temp_0'$1_atomic_bridge_configuration_BridgeConfig': $1_atomic_bridge_configuration_BridgeConfig;
    var $temp_0'signer': $signer;
    var $1_atomic_bridge_configuration_BridgeConfig_$memory#170: $Memory $1_atomic_bridge_configuration_BridgeConfig;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1025:5+1
    assume {:print "$at(2,37947,37948)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume forall $rsc: atomic_bridge_configuration::BridgeConfig: ResourceDomain<atomic_bridge_configuration::BridgeConfig>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1025:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_configuration_BridgeConfig'($rsc))));

    // @170 := save_mem(atomic_bridge_configuration::BridgeConfig) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1025:5+1
    $1_atomic_bridge_configuration_BridgeConfig_$memory#170 := $1_atomic_bridge_configuration_BridgeConfig_$memory;

    // trace_local[aptos_framework]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1025:5+1
    assume {:print "$track_local(76,3,0):", $t0} $t0 == $t0;

    // opaque begin: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
    assume {:print "$at(2,38005,38062)"} true;

    // assume Identical($t2, Neq<address>(signer::$address_of($t0), 0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
    assume ($t2 == !$IsEqual'address'($1_signer_$address_of($t0), 1));

    // if ($t2) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
L4:

    // assume And(Neq<address>(signer::$address_of($t0), 0x1), Eq(5, $t3)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
    assume {:print "$at(2,38005,38062)"} true;
    assume (!$IsEqual'address'($1_signer_$address_of($t0), 1) && $IsEqual'num'(5, $t3));

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
    assume {:print "$at(2,38005,38062)"} true;
    assume {:print "$track_abort(76,3):", $t3} $t3 == $t3;

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
    goto L2;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
L3:

    // opaque end: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1026:9+57
    assume {:print "$at(2,38005,38062)"} true;

    // $t4 := signer::address_of($t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1028:30+35
    assume {:print "$at(2,38136,38171)"} true;
    call $t4 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,38136,38171)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(76,3):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t5 := 172800 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1029:34+28
    assume {:print "$at(2,38206,38234)"} true;
    $t5 := 172800;
    assume $IsValid'u64'($t5);

    // $t6 := 86400 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1030:37+31
    assume {:print "$at(2,38272,38303)"} true;
    $t6 := 86400;
    assume $IsValid'u64'($t6);

    // $t7 := pack atomic_bridge_configuration::BridgeConfig($t4, $t5, $t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1027:29+222
    assume {:print "$at(2,38092,38314)"} true;
    $t7 := $1_atomic_bridge_configuration_BridgeConfig($t4, $t5, $t6);

    // trace_local[bridge_config]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1027:13+13
    assume {:print "$track_local(76,3,1):", $t7} $t7 == $t7;

    // move_to<atomic_bridge_configuration::BridgeConfig>($t7, $t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1032:9+7
    assume {:print "$at(2,38324,38331)"} true;
    if ($ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_atomic_bridge_configuration_BridgeConfig_$memory := $ResourceUpdate($1_atomic_bridge_configuration_BridgeConfig_$memory, $t0->$addr, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(2,38324,38331)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(76,3):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1033:5+1
    assume {:print "$at(2,38369,38370)"} true;
L1:

    // assert Not(Not(system_addresses::$is_aptos_framework_address[](signer::$address_of[]($t0)))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:121:9+93
    assume {:print "$at(3,5628,5721)"} true;
    assert {:msg "assert_failed(3,5628,5721): function does not abort under this condition"}
      !!$1_system_addresses_$is_aptos_framework_address($1_signer_$address_of($t0));

    // assert Not(exists[@170]<atomic_bridge_configuration::BridgeConfig>(signer::$address_of[]($t0))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:122:9+68
    assume {:print "$at(3,5730,5798)"} true;
    assert {:msg "assert_failed(3,5730,5798): function does not abort under this condition"}
      !$ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory#170, $1_signer_$address_of($t0));

    // assert Eq<address>(select atomic_bridge_configuration::BridgeConfig.bridge_operator<atomic_bridge_configuration::BridgeConfig>(global<atomic_bridge_configuration::BridgeConfig>(signer::$address_of($t0))), signer::$address_of($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:124:9+121
    assume {:print "$at(3,5808,5929)"} true;
    assert {:msg "assert_failed(3,5808,5929): post-condition does not hold"}
      $IsEqual'address'($ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $1_signer_$address_of($t0))->$bridge_operator, $1_signer_$address_of($t0));

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:124:9+121
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1033:5+1
    assume {:print "$at(2,38369,38370)"} true;
L2:

    // assert Or(Not(system_addresses::$is_aptos_framework_address[](signer::$address_of[]($t0))), exists[@170]<atomic_bridge_configuration::BridgeConfig>(signer::$address_of[]($t0))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:120:5+359
    assume {:print "$at(3,5576,5935)"} true;
    assert {:msg "assert_failed(3,5576,5935): abort not covered by any of the `aborts_if` clauses"}
      (!$1_system_addresses_$is_aptos_framework_address($1_signer_$address_of($t0)) || $ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory#170, $1_signer_$address_of($t0)));

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:120:5+359
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_configuration::assert_is_caller_operator [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1100:5+227
procedure {:inline 1} $1_atomic_bridge_configuration_assert_is_caller_operator(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: $1_atomic_bridge_configuration_BridgeConfig;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t0: $signer;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // bytecode translation starts here
    // trace_local[caller]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1100:5+1
    assume {:print "$at(2,40908,40909)"} true;
    assume {:print "$track_local(76,0,0):", $t0} $t0 == $t0;

    // $t1 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:45+16
    assume {:print "$at(2,41038,41054)"} true;
    $t1 := 1;
    assume $IsValid'address'($t1);

    // $t2 := get_global<atomic_bridge_configuration::BridgeConfig>($t1) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:17+13
    if (!$ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(2,41010,41023)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(76,0):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t4 := get_field<atomic_bridge_configuration::BridgeConfig>.bridge_operator($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:17+61
    $t4 := $t2->$bridge_operator;

    // $t5 := signer::address_of($t0) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:82+26
    call $t5 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,41075,41101)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(76,0):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t6 := ==($t4, $t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:79+2
    $t6 := $IsEqual'address'($t4, $t5);

    // if ($t6) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:9+126
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:9+126
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:9+126
    assume {:print "$at(2,41002,41128)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:110+24
L0:

    // $t7 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:110+24
    assume {:print "$at(2,41103,41127)"} true;
    $t7 := 1;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:9+126
    assume {:print "$at(2,41002,41128)"} true;
    assume {:print "$track_abort(76,0):", $t7} $t7 == $t7;

    // $t3 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:9+126
    $t3 := $t7;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:9+126
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:135+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1102:5+1
    assume {:print "$at(2,41134,41135)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1102:5+1
    assume {:print "$at(2,41134,41135)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1102:5+1
L4:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1102:5+1
    assume {:print "$at(2,41134,41135)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_configuration::assert_is_caller_operator [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1100:5+227
procedure {:timeLimit 40} $1_atomic_bridge_configuration_assert_is_caller_operator$verify(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: $1_atomic_bridge_configuration_BridgeConfig;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: bool;
    var $t7: int;
    var $t0: $signer;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1100:5+1
    assume {:print "$at(2,40908,40909)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume forall $rsc: atomic_bridge_configuration::BridgeConfig: ResourceDomain<atomic_bridge_configuration::BridgeConfig>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1100:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_configuration_BridgeConfig'($rsc))));

    // trace_local[caller]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1100:5+1
    assume {:print "$track_local(76,0,0):", $t0} $t0 == $t0;

    // $t1 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:45+16
    assume {:print "$at(2,41038,41054)"} true;
    $t1 := 1;
    assume $IsValid'address'($t1);

    // $t2 := get_global<atomic_bridge_configuration::BridgeConfig>($t1) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:17+13
    if (!$ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory, $t1)) {
        call $ExecFailureAbort();
    } else {
        $t2 := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $t1);
    }
    if ($abort_flag) {
        assume {:print "$at(2,41010,41023)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(76,0):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t4 := get_field<atomic_bridge_configuration::BridgeConfig>.bridge_operator($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:17+61
    $t4 := $t2->$bridge_operator;

    // $t5 := signer::address_of($t0) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:82+26
    call $t5 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,41075,41101)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(76,0):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t6 := ==($t4, $t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:79+2
    $t6 := $IsEqual'address'($t4, $t5);

    // if ($t6) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:9+126
    if ($t6) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:9+126
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:9+126
    assume {:print "$at(2,41002,41128)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:110+24
L0:

    // $t7 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:110+24
    assume {:print "$at(2,41103,41127)"} true;
    $t7 := 1;
    assume $IsValid'u64'($t7);

    // trace_abort($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:9+126
    assume {:print "$at(2,41002,41128)"} true;
    assume {:print "$track_abort(76,0):", $t7} $t7 == $t7;

    // $t3 := move($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:9+126
    $t3 := $t7;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:9+126
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1101:135+1
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1102:5+1
    assume {:print "$at(2,41134,41135)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1102:5+1
    assume {:print "$at(2,41134,41135)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1102:5+1
L4:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1102:5+1
    assume {:print "$at(2,41134,41135)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_configuration::bridge_operator [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1092:5+141
procedure {:timeLimit 40} $1_atomic_bridge_configuration_bridge_operator$verify() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: $Mutation ($1_atomic_bridge_configuration_BridgeConfig);
    var $t2: int;
    var $t3: int;
    var $temp_0'address': int;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: atomic_bridge_configuration::BridgeConfig: ResourceDomain<atomic_bridge_configuration::BridgeConfig>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1092:5+1
    assume {:print "$at(2,40557,40558)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_configuration_BridgeConfig'($rsc))));

    // $t0 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1093:41+16
    assume {:print "$at(2,40659,40675)"} true;
    $t0 := 1;
    assume $IsValid'address'($t0);

    // $t1 := borrow_global<atomic_bridge_configuration::BridgeConfig>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1093:9+17
    if (!$ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $Mutation($Global($t0), EmptyVec(), $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $t0));
    }
    if ($abort_flag) {
        assume {:print "$at(2,40627,40644)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(76,1):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<atomic_bridge_configuration::BridgeConfig>.bridge_operator($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1093:9+65
    $t3 := $Dereference($t1)->$bridge_operator;

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1093:9+65
    assume {:print "$track_return(76,1,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1094:5+1
    assume {:print "$at(2,40697,40698)"} true;
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1094:5+1
    assume {:print "$at(2,40697,40698)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1094:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1094:5+1
    assume {:print "$at(2,40697,40698)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_configuration::counterparty_timelock_duration [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1084:5+156
procedure {:inline 1} $1_atomic_bridge_configuration_counterparty_timelock_duration() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: $1_atomic_bridge_configuration_BridgeConfig;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t0 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1085:37+16
    assume {:print "$at(2,40363,40379)"} true;
    $t0 := 1;
    assume $IsValid'address'($t0);

    // $t1 := get_global<atomic_bridge_configuration::BridgeConfig>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1085:9+13
    if (!$ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,40335,40348)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(76,2):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<atomic_bridge_configuration::BridgeConfig>.counterparty_time_lock($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1085:9+68
    $t3 := $t1->$counterparty_time_lock;

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1085:9+68
    assume {:print "$track_return(76,2,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1086:5+1
    assume {:print "$at(2,40408,40409)"} true;
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1086:5+1
    assume {:print "$at(2,40408,40409)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1086:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1086:5+1
    assume {:print "$at(2,40408,40409)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_configuration::counterparty_timelock_duration [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1084:5+156
procedure {:timeLimit 40} $1_atomic_bridge_configuration_counterparty_timelock_duration$verify() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: $1_atomic_bridge_configuration_BridgeConfig;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: atomic_bridge_configuration::BridgeConfig: ResourceDomain<atomic_bridge_configuration::BridgeConfig>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1084:5+1
    assume {:print "$at(2,40253,40254)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_configuration_BridgeConfig'($rsc))));

    // $t0 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1085:37+16
    assume {:print "$at(2,40363,40379)"} true;
    $t0 := 1;
    assume $IsValid'address'($t0);

    // $t1 := get_global<atomic_bridge_configuration::BridgeConfig>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1085:9+13
    if (!$ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,40335,40348)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(76,2):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<atomic_bridge_configuration::BridgeConfig>.counterparty_time_lock($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1085:9+68
    $t3 := $t1->$counterparty_time_lock;

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1085:9+68
    assume {:print "$track_return(76,2,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1086:5+1
    assume {:print "$at(2,40408,40409)"} true;
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1086:5+1
    assume {:print "$at(2,40408,40409)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1086:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1086:5+1
    assume {:print "$at(2,40408,40409)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_configuration::initiator_timelock_duration [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1079:5+150
procedure {:inline 1} $1_atomic_bridge_configuration_initiator_timelock_duration() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: $1_atomic_bridge_configuration_BridgeConfig;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // bytecode translation starts here
    // $t0 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1080:37+16
    assume {:print "$at(2,40192,40208)"} true;
    $t0 := 1;
    assume $IsValid'address'($t0);

    // $t1 := get_global<atomic_bridge_configuration::BridgeConfig>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1080:9+13
    if (!$ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,40164,40177)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(76,4):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<atomic_bridge_configuration::BridgeConfig>.initiator_time_lock($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1080:9+65
    $t3 := $t1->$initiator_time_lock;

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1080:9+65
    assume {:print "$track_return(76,4,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1081:5+1
    assume {:print "$at(2,40234,40235)"} true;
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1081:5+1
    assume {:print "$at(2,40234,40235)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1081:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1081:5+1
    assume {:print "$at(2,40234,40235)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_configuration::initiator_timelock_duration [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1079:5+150
procedure {:timeLimit 40} $1_atomic_bridge_configuration_initiator_timelock_duration$verify() returns ($ret0: int)
{
    // declare local variables
    var $t0: int;
    var $t1: $1_atomic_bridge_configuration_BridgeConfig;
    var $t2: int;
    var $t3: int;
    var $temp_0'u64': int;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume forall $rsc: atomic_bridge_configuration::BridgeConfig: ResourceDomain<atomic_bridge_configuration::BridgeConfig>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1079:5+1
    assume {:print "$at(2,40085,40086)"} true;
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_configuration_BridgeConfig'($rsc))));

    // $t0 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1080:37+16
    assume {:print "$at(2,40192,40208)"} true;
    $t0 := 1;
    assume $IsValid'address'($t0);

    // $t1 := get_global<atomic_bridge_configuration::BridgeConfig>($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1080:9+13
    if (!$ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory, $t0)) {
        call $ExecFailureAbort();
    } else {
        $t1 := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $t0);
    }
    if ($abort_flag) {
        assume {:print "$at(2,40164,40177)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(76,4):", $t2} $t2 == $t2;
        goto L2;
    }

    // $t3 := get_field<atomic_bridge_configuration::BridgeConfig>.initiator_time_lock($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1080:9+65
    $t3 := $t1->$initiator_time_lock;

    // trace_return[0]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1080:9+65
    assume {:print "$track_return(76,4,0):", $t3} $t3 == $t3;

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1081:5+1
    assume {:print "$at(2,40234,40235)"} true;
L1:

    // return $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1081:5+1
    assume {:print "$at(2,40234,40235)"} true;
    $ret0 := $t3;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1081:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1081:5+1
    assume {:print "$at(2,40234,40235)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_configuration::set_counterparty_time_lock_duration [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1067:5+395
procedure {:timeLimit 40} $1_atomic_bridge_configuration_set_counterparty_time_lock_duration$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation ($1_atomic_bridge_configuration_BridgeConfig);
    var $t6: $Mutation (int);
    var $t7: $1_atomic_bridge_configuration_CounterpartyTimeLockUpdated;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1067:5+1
    assume {:print "$at(2,39672,39673)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1067:5+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: atomic_bridge_configuration::BridgeConfig: ResourceDomain<atomic_bridge_configuration::BridgeConfig>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1067:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_configuration_BridgeConfig'($rsc))));

    // trace_local[aptos_framework]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1067:5+1
    assume {:print "$track_local(76,5,0):", $t0} $t0 == $t0;

    // trace_local[time_lock]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1067:5+1
    assume {:print "$track_local(76,5,1):", $t1} $t1 == $t1;

    // opaque begin: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1068:9+57
    assume {:print "$at(2,39793,39850)"} true;

    // assume Identical($t2, Neq<address>(signer::$address_of($t0), 0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1068:9+57
    assume ($t2 == !$IsEqual'address'($1_signer_$address_of($t0), 1));

    // if ($t2) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1068:9+57
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1068:9+57
L4:

    // assume And(Neq<address>(signer::$address_of($t0), 0x1), Eq(5, $t3)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1068:9+57
    assume {:print "$at(2,39793,39850)"} true;
    assume (!$IsEqual'address'($1_signer_$address_of($t0), 1) && $IsEqual'num'(5, $t3));

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1068:9+57
    assume {:print "$at(2,39793,39850)"} true;
    assume {:print "$track_abort(76,5):", $t3} $t3 == $t3;

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1068:9+57
    goto L2;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1068:9+57
L3:

    // opaque end: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1068:9+57
    assume {:print "$at(2,39793,39850)"} true;

    // $t4 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1069:41+16
    assume {:print "$at(2,39892,39908)"} true;
    $t4 := 1;
    assume $IsValid'address'($t4);

    // $t5 := borrow_global<atomic_bridge_configuration::BridgeConfig>($t4) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1069:9+17
    if (!$ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $Mutation($Global($t4), EmptyVec(), $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $t4));
    }
    if ($abort_flag) {
        assume {:print "$at(2,39860,39877)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(76,5):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t6 := borrow_field<atomic_bridge_configuration::BridgeConfig>.counterparty_time_lock($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1069:9+72
    $t6 := $ChildMutation($t5, 2, $Dereference($t5)->$counterparty_time_lock);

    // write_ref($t6, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1069:9+84
    $t6 := $UpdateMutation($t6, $t1);

    // write_back[Reference($t5).counterparty_time_lock (u64)]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1069:9+84
    $t5 := $UpdateMutation($t5, $Update'$1_atomic_bridge_configuration_BridgeConfig'_counterparty_time_lock($Dereference($t5), $Dereference($t6)));

    // write_back[atomic_bridge_configuration::BridgeConfig@]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1069:9+84
    $1_atomic_bridge_configuration_BridgeConfig_$memory := $ResourceUpdate($1_atomic_bridge_configuration_BridgeConfig_$memory, $GlobalLocationAddress($t5),
        $Dereference($t5));

    // $t7 := pack atomic_bridge_configuration::CounterpartyTimeLockUpdated($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1072:13+69
    assume {:print "$at(2,39980,40049)"} true;
    $t7 := $1_atomic_bridge_configuration_CounterpartyTimeLockUpdated($t1);

    // opaque begin: event::emit<atomic_bridge_configuration::CounterpartyTimeLockUpdated>($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1071:9+105
    assume {:print "$at(2,39955,40060)"} true;

    // opaque end: event::emit<atomic_bridge_configuration::CounterpartyTimeLockUpdated>($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1071:9+105

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1076:5+1
    assume {:print "$at(2,40066,40067)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1076:5+1
    assume {:print "$at(2,40066,40067)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1076:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1076:5+1
    assume {:print "$at(2,40066,40067)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_configuration::set_initiator_time_lock_duration [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1056:5+386
procedure {:timeLimit 40} $1_atomic_bridge_configuration_set_initiator_time_lock_duration$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: $Mutation ($1_atomic_bridge_configuration_BridgeConfig);
    var $t6: $Mutation (int);
    var $t7: $1_atomic_bridge_configuration_InitiatorTimeLockUpdated;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1056:5+1
    assume {:print "$at(2,39280,39281)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1056:5+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: atomic_bridge_configuration::BridgeConfig: ResourceDomain<atomic_bridge_configuration::BridgeConfig>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1056:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_configuration_BridgeConfig'($rsc))));

    // trace_local[aptos_framework]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1056:5+1
    assume {:print "$track_local(76,6,0):", $t0} $t0 == $t0;

    // trace_local[time_lock]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1056:5+1
    assume {:print "$track_local(76,6,1):", $t1} $t1 == $t1;

    // opaque begin: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1057:9+57
    assume {:print "$at(2,39398,39455)"} true;

    // assume Identical($t2, Neq<address>(signer::$address_of($t0), 0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1057:9+57
    assume ($t2 == !$IsEqual'address'($1_signer_$address_of($t0), 1));

    // if ($t2) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1057:9+57
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1057:9+57
L4:

    // assume And(Neq<address>(signer::$address_of($t0), 0x1), Eq(5, $t3)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1057:9+57
    assume {:print "$at(2,39398,39455)"} true;
    assume (!$IsEqual'address'($1_signer_$address_of($t0), 1) && $IsEqual'num'(5, $t3));

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1057:9+57
    assume {:print "$at(2,39398,39455)"} true;
    assume {:print "$track_abort(76,6):", $t3} $t3 == $t3;

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1057:9+57
    goto L2;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1057:9+57
L3:

    // opaque end: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1057:9+57
    assume {:print "$at(2,39398,39455)"} true;

    // $t4 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1058:41+16
    assume {:print "$at(2,39497,39513)"} true;
    $t4 := 1;
    assume $IsValid'address'($t4);

    // $t5 := borrow_global<atomic_bridge_configuration::BridgeConfig>($t4) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1058:9+17
    if (!$ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory, $t4)) {
        call $ExecFailureAbort();
    } else {
        $t5 := $Mutation($Global($t4), EmptyVec(), $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $t4));
    }
    if ($abort_flag) {
        assume {:print "$at(2,39465,39482)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(76,6):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t6 := borrow_field<atomic_bridge_configuration::BridgeConfig>.initiator_time_lock($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1058:9+69
    $t6 := $ChildMutation($t5, 1, $Dereference($t5)->$initiator_time_lock);

    // write_ref($t6, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1058:9+81
    $t6 := $UpdateMutation($t6, $t1);

    // write_back[Reference($t5).initiator_time_lock (u64)]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1058:9+81
    $t5 := $UpdateMutation($t5, $Update'$1_atomic_bridge_configuration_BridgeConfig'_initiator_time_lock($Dereference($t5), $Dereference($t6)));

    // write_back[atomic_bridge_configuration::BridgeConfig@]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1058:9+81
    $1_atomic_bridge_configuration_BridgeConfig_$memory := $ResourceUpdate($1_atomic_bridge_configuration_BridgeConfig_$memory, $GlobalLocationAddress($t5),
        $Dereference($t5));

    // $t7 := pack atomic_bridge_configuration::InitiatorTimeLockUpdated($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1061:13+66
    assume {:print "$at(2,39582,39648)"} true;
    $t7 := $1_atomic_bridge_configuration_InitiatorTimeLockUpdated($t1);

    // opaque begin: event::emit<atomic_bridge_configuration::InitiatorTimeLockUpdated>($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1060:9+102
    assume {:print "$at(2,39557,39659)"} true;

    // opaque end: event::emit<atomic_bridge_configuration::InitiatorTimeLockUpdated>($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1060:9+102

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1065:5+1
    assume {:print "$at(2,39665,39666)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1065:5+1
    assume {:print "$at(2,39665,39666)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1065:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1065:5+1
    assume {:print "$at(2,39665,39666)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_configuration::update_bridge_operator [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1040:5+594
procedure {:timeLimit 40} $1_atomic_bridge_configuration_update_bridge_operator$verify(_$t0: $signer, _$t1: int) returns ()
{
    // declare local variables
    var $t2: $Mutation ($1_atomic_bridge_configuration_BridgeConfig);
    var $t3: int;
    var $t4: bool;
    var $t5: int;
    var $t6: int;
    var $t7: $Mutation ($1_atomic_bridge_configuration_BridgeConfig);
    var $t8: int;
    var $t9: bool;
    var $t10: int;
    var $t11: $Mutation (int);
    var $t12: $1_atomic_bridge_configuration_BridgeConfigOperatorUpdated;
    var $t0: $signer;
    var $t1: int;
    var $temp_0'$1_atomic_bridge_configuration_BridgeConfig': $1_atomic_bridge_configuration_BridgeConfig;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $1_atomic_bridge_configuration_BridgeConfig_$memory#172: $Memory $1_atomic_bridge_configuration_BridgeConfig;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1040:5+1
    assume {:print "$at(2,38680,38681)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1040:5+1
    assume $IsValid'address'($t1);

    // assume forall $rsc: atomic_bridge_configuration::BridgeConfig: ResourceDomain<atomic_bridge_configuration::BridgeConfig>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1040:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_configuration_BridgeConfig'($rsc))));

    // @172 := save_mem(atomic_bridge_configuration::BridgeConfig) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1040:5+1
    $1_atomic_bridge_configuration_BridgeConfig_$memory#172 := $1_atomic_bridge_configuration_BridgeConfig_$memory;

    // trace_local[aptos_framework]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1040:5+1
    assume {:print "$track_local(76,7,0):", $t0} $t0 == $t0;

    // trace_local[new_operator]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1040:5+1
    assume {:print "$track_local(76,7,1):", $t1} $t1 == $t1;

    // opaque begin: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1041:9+57
    assume {:print "$at(2,38795,38852)"} true;

    // assume Identical($t4, Neq<address>(signer::$address_of($t0), 0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1041:9+57
    assume ($t4 == !$IsEqual'address'($1_signer_$address_of($t0), 1));

    // if ($t4) goto L6 else goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1041:9+57
    if ($t4) { goto L6; } else { goto L5; }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1041:9+57
L6:

    // assume And(Neq<address>(signer::$address_of($t0), 0x1), Eq(5, $t5)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1041:9+57
    assume {:print "$at(2,38795,38852)"} true;
    assume (!$IsEqual'address'($1_signer_$address_of($t0), 1) && $IsEqual'num'(5, $t5));

    // trace_abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1041:9+57
    assume {:print "$at(2,38795,38852)"} true;
    assume {:print "$track_abort(76,7):", $t5} $t5 == $t5;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1041:9+57
    goto L4;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1041:9+57
L5:

    // opaque end: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1041:9+57
    assume {:print "$at(2,38795,38852)"} true;

    // $t6 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1042:61+16
    assume {:print "$at(2,38914,38930)"} true;
    $t6 := 1;
    assume $IsValid'address'($t6);

    // $t7 := borrow_global<atomic_bridge_configuration::BridgeConfig>($t6) on_abort goto L4 with $t5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1042:29+17
    if (!$ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory, $t6)) {
        call $ExecFailureAbort();
    } else {
        $t7 := $Mutation($Global($t6), EmptyVec(), $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $t6));
    }
    if ($abort_flag) {
        assume {:print "$at(2,38882,38899)"} true;
        $t5 := $abort_code;
        assume {:print "$track_abort(76,7):", $t5} $t5 == $t5;
        goto L4;
    }

    // trace_local[bridge_config]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1042:13+13
    $temp_0'$1_atomic_bridge_configuration_BridgeConfig' := $Dereference($t7);
    assume {:print "$track_local(76,7,2):", $temp_0'$1_atomic_bridge_configuration_BridgeConfig'} $temp_0'$1_atomic_bridge_configuration_BridgeConfig' == $temp_0'$1_atomic_bridge_configuration_BridgeConfig';

    // $t8 := get_field<atomic_bridge_configuration::BridgeConfig>.bridge_operator($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1043:28+29
    assume {:print "$at(2,38960,38989)"} true;
    $t8 := $Dereference($t7)->$bridge_operator;

    // trace_local[old_operator]($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1043:13+12
    assume {:print "$track_local(76,7,3):", $t8} $t8 == $t8;

    // $t9 := !=($t8, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1044:30+2
    assume {:print "$at(2,39020,39022)"} true;
    $t9 := !$IsEqual'address'($t8, $t1);

    // if ($t9) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1044:9+63
    if ($t9) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1044:9+63
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1044:9+63
    assume {:print "$at(2,38999,39062)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1044:9+63
L0:

    // drop($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1044:9+63
    assume {:print "$at(2,38999,39062)"} true;

    // $t10 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1044:47+24
    $t10 := 1;
    assume $IsValid'u64'($t10);

    // trace_abort($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1044:9+63
    assume {:print "$at(2,38999,39062)"} true;
    assume {:print "$track_abort(76,7):", $t10} $t10 == $t10;

    // $t5 := move($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1044:9+63
    $t5 := $t10;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1044:9+63
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1046:41+12
    assume {:print "$at(2,39105,39117)"} true;
L2:

    // $t11 := borrow_field<atomic_bridge_configuration::BridgeConfig>.bridge_operator($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1046:9+29
    assume {:print "$at(2,39073,39102)"} true;
    $t11 := $ChildMutation($t7, 0, $Dereference($t7)->$bridge_operator);

    // write_ref($t11, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1046:9+44
    $t11 := $UpdateMutation($t11, $t1);

    // write_back[Reference($t7).bridge_operator (address)]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1046:9+44
    $t7 := $UpdateMutation($t7, $Update'$1_atomic_bridge_configuration_BridgeConfig'_bridge_operator($Dereference($t7), $Dereference($t11)));

    // write_back[atomic_bridge_configuration::BridgeConfig@]($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1046:9+44
    $1_atomic_bridge_configuration_BridgeConfig_$memory := $ResourceUpdate($1_atomic_bridge_configuration_BridgeConfig_$memory, $GlobalLocationAddress($t7),
        $Dereference($t7));

    // $t12 := pack atomic_bridge_configuration::BridgeConfigOperatorUpdated($t8, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1049:13+103
    assume {:print "$at(2,39153,39256)"} true;
    $t12 := $1_atomic_bridge_configuration_BridgeConfigOperatorUpdated($t8, $t1);

    // opaque begin: event::emit<atomic_bridge_configuration::BridgeConfigOperatorUpdated>($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1048:9+139
    assume {:print "$at(2,39128,39267)"} true;

    // opaque end: event::emit<atomic_bridge_configuration::BridgeConfigOperatorUpdated>($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1048:9+139

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1054:5+1
    assume {:print "$at(2,39273,39274)"} true;
L3:

    // assert Not(Not(system_addresses::$is_aptos_framework_address[](signer::$address_of[]($t0)))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:128:9+93
    assume {:print "$at(3,6028,6121)"} true;
    assert {:msg "assert_failed(3,6028,6121): function does not abort under this condition"}
      !!$1_system_addresses_$is_aptos_framework_address($1_signer_$address_of($t0));

    // assert Not(Not(exists[@172]<atomic_bridge_configuration::BridgeConfig>(signer::$address_of[]($t0)))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:129:9+69
    assume {:print "$at(3,6130,6199)"} true;
    assert {:msg "assert_failed(3,6130,6199): function does not abort under this condition"}
      !!$ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory#172, $1_signer_$address_of($t0));

    // assert Not(Eq<address>(select atomic_bridge_configuration::BridgeConfig.bridge_operator<atomic_bridge_configuration::BridgeConfig>(global[@172]<atomic_bridge_configuration::BridgeConfig>(signer::$address_of[]($t0))), $t1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:130:9+100
    assume {:print "$at(3,6208,6308)"} true;
    assert {:msg "assert_failed(3,6208,6308): function does not abort under this condition"}
      !$IsEqual'address'($ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory#172, $1_signer_$address_of($t0))->$bridge_operator, $t1);

    // assert Eq<address>(select atomic_bridge_configuration::BridgeConfig.bridge_operator<atomic_bridge_configuration::BridgeConfig>(global<atomic_bridge_configuration::BridgeConfig>(signer::$address_of($t0))), $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:132:9+98
    assume {:print "$at(3,6318,6416)"} true;
    assert {:msg "assert_failed(3,6318,6416): post-condition does not hold"}
      $IsEqual'address'($ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $1_signer_$address_of($t0))->$bridge_operator, $t1);

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:132:9+98
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1054:5+1
    assume {:print "$at(2,39273,39274)"} true;
L4:

    // assert Or(Or(Not(system_addresses::$is_aptos_framework_address[](signer::$address_of[]($t0))), Not(exists[@172]<atomic_bridge_configuration::BridgeConfig>(signer::$address_of[]($t0)))), Eq<address>(select atomic_bridge_configuration::BridgeConfig.bridge_operator<atomic_bridge_configuration::BridgeConfig>(global[@172]<atomic_bridge_configuration::BridgeConfig>(signer::$address_of[]($t0))), $t1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:127:5+481
    assume {:print "$at(3,5941,6422)"} true;
    assert {:msg "assert_failed(3,5941,6422): abort not covered by any of the `aborts_if` clauses"}
      ((!$1_system_addresses_$is_aptos_framework_address($1_signer_$address_of($t0)) || !$ResourceExists($1_atomic_bridge_configuration_BridgeConfig_$memory#172, $1_signer_$address_of($t0))) || $IsEqual'address'($ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory#172, $1_signer_$address_of($t0))->$bridge_operator, $t1));

    // abort($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:127:5+481
    $abort_code := $t5;
    $abort_flag := true;
    return;

}

// struct atomic_bridge::AptosCoinMintCapability at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1210:5+91
datatype $1_atomic_bridge_AptosCoinMintCapability {
    $1_atomic_bridge_AptosCoinMintCapability($mint_cap: $1_coin_MintCapability'$1_aptos_coin_AptosCoin')
}
function {:inline} $Update'$1_atomic_bridge_AptosCoinMintCapability'_mint_cap(s: $1_atomic_bridge_AptosCoinMintCapability, x: $1_coin_MintCapability'$1_aptos_coin_AptosCoin'): $1_atomic_bridge_AptosCoinMintCapability {
    $1_atomic_bridge_AptosCoinMintCapability(x)
}
function $IsValid'$1_atomic_bridge_AptosCoinMintCapability'(s: $1_atomic_bridge_AptosCoinMintCapability): bool {
    $IsValid'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''(s->$mint_cap)
}
function {:inline} $IsEqual'$1_atomic_bridge_AptosCoinMintCapability'(s1: $1_atomic_bridge_AptosCoinMintCapability, s2: $1_atomic_bridge_AptosCoinMintCapability): bool {
    s1 == s2
}
var $1_atomic_bridge_AptosCoinMintCapability_$memory: $Memory $1_atomic_bridge_AptosCoinMintCapability;

// struct atomic_bridge::AptosFABurnCapabilities at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1214:5+73
datatype $1_atomic_bridge_AptosFABurnCapabilities {
    $1_atomic_bridge_AptosFABurnCapabilities($burn_ref: $1_fungible_asset_BurnRef)
}
function {:inline} $Update'$1_atomic_bridge_AptosFABurnCapabilities'_burn_ref(s: $1_atomic_bridge_AptosFABurnCapabilities, x: $1_fungible_asset_BurnRef): $1_atomic_bridge_AptosFABurnCapabilities {
    $1_atomic_bridge_AptosFABurnCapabilities(x)
}
function $IsValid'$1_atomic_bridge_AptosFABurnCapabilities'(s: $1_atomic_bridge_AptosFABurnCapabilities): bool {
    $IsValid'$1_fungible_asset_BurnRef'(s->$burn_ref)
}
function {:inline} $IsEqual'$1_atomic_bridge_AptosFABurnCapabilities'(s1: $1_atomic_bridge_AptosFABurnCapabilities, s2: $1_atomic_bridge_AptosFABurnCapabilities): bool {
    s1 == s2
}
var $1_atomic_bridge_AptosFABurnCapabilities_$memory: $Memory $1_atomic_bridge_AptosFABurnCapabilities;

// struct atomic_bridge::AptosCoinBurnCapability at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1206:5+91
datatype $1_atomic_bridge_AptosCoinBurnCapability {
    $1_atomic_bridge_AptosCoinBurnCapability($burn_cap: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin')
}
function {:inline} $Update'$1_atomic_bridge_AptosCoinBurnCapability'_burn_cap(s: $1_atomic_bridge_AptosCoinBurnCapability, x: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin'): $1_atomic_bridge_AptosCoinBurnCapability {
    $1_atomic_bridge_AptosCoinBurnCapability(x)
}
function $IsValid'$1_atomic_bridge_AptosCoinBurnCapability'(s: $1_atomic_bridge_AptosCoinBurnCapability): bool {
    $IsValid'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''(s->$burn_cap)
}
function {:inline} $IsEqual'$1_atomic_bridge_AptosCoinBurnCapability'(s1: $1_atomic_bridge_AptosCoinBurnCapability, s2: $1_atomic_bridge_AptosCoinBurnCapability): bool {
    s1 == s2
}
var $1_atomic_bridge_AptosCoinBurnCapability_$memory: $Memory $1_atomic_bridge_AptosCoinBurnCapability;

// fun atomic_bridge::initialize [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1225:5+179
procedure {:timeLimit 40} $1_atomic_bridge_initialize$verify(_$t0: $signer) returns ()
{
    // declare local variables
    var $t1: int;
    var $t2: int;
    var $t0: $signer;
    var $temp_0'signer': $signer;
    $t0 := _$t0;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1225:5+1
    assume {:print "$at(2,46122,46123)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume forall $rsc: atomic_bridge_store::Nonce: ResourceDomain<atomic_bridge_store::Nonce>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1225:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_Nonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_Nonce_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_Nonce'($rsc))));

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1225:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''($rsc))));

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1225:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''($rsc))));

    // assume forall $rsc: atomic_bridge_configuration::BridgeConfig: ResourceDomain<atomic_bridge_configuration::BridgeConfig>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1225:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_configuration_BridgeConfig'($rsc))));

    // trace_local[aptos_framework]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1225:5+1
    assume {:print "$track_local(77,1,0):", $t0} $t0 == $t0;

    // atomic_bridge_configuration::initialize($t0) on_abort goto L2 with $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1226:9+56
    assume {:print "$at(2,46180,46236)"} true;
    call $1_atomic_bridge_configuration_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(2,46180,46236)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(77,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // assume Identical($t2, signer::$address_of($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:3:9+47
    assume {:print "$at(3,74,121)"} true;
    assume ($t2 == $1_signer_$address_of($t0));

    // atomic_bridge_store::initialize($t0) on_abort goto L2 with $t1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1227:9+48
    assume {:print "$at(2,46246,46294)"} true;
    call $1_atomic_bridge_store_initialize($t0);
    if ($abort_flag) {
        assume {:print "$at(2,46246,46294)"} true;
        $t1 := $abort_code;
        assume {:print "$track_abort(77,1):", $t1} $t1 == $t1;
        goto L2;
    }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1228:5+1
    assume {:print "$at(2,46300,46301)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1228:5+1
    assume {:print "$at(2,46300,46301)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1228:5+1
L2:

    // abort($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1228:5+1
    assume {:print "$at(2,46300,46301)"} true;
    $abort_code := $t1;
    $abort_flag := true;
    return;

}

// fun atomic_bridge::burn [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+333
procedure {:inline 1} $1_atomic_bridge_burn(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $1_atomic_bridge_AptosCoinBurnCapability;
    var $t7: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';
    var $t8: int;
    var $t9: $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $t10: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t11: $1_optional_aggregator_OptionalAggregator;
    var $t12: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[from]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume {:print "$at(2,49197,49198)"} true;
    assume {:print "$track_local(77,0,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume {:print "$track_local(77,0,1):", $t1} $t1 == $t1;

    // $t2 := features::abort_atomic_bridge_enabled() on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:17+39
    assume {:print "$at(2,49300,49339)"} true;
    call $t2 := $1_features_abort_atomic_bridge_enabled();
    if ($abort_flag) {
        assume {:print "$at(2,49300,49339)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,0):", $t3} $t3 == $t3;
        goto L4;
    }

    // if ($t2) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:9+76
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:9+76
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:9+76
    assume {:print "$at(2,49292,49368)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:58+26
L0:

    // $t4 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:58+26
    assume {:print "$at(2,49341,49367)"} true;
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:9+76
    assume {:print "$at(2,49292,49368)"} true;
    assume {:print "$track_abort(77,0):", $t4} $t4 == $t4;

    // $t3 := move($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:9+76
    $t3 := $t4;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:9+76
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1296:13+4
    assume {:print "$at(2,49408,49412)"} true;
L2:

    // $t5 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1298:53+16
    assume {:print "$at(2,49486,49502)"} true;
    $t5 := 1;
    assume $IsValid'address'($t5);

    // $t6 := get_global<atomic_bridge::AptosCoinBurnCapability>($t5) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1298:14+13
    if (!$ResourceExists($1_atomic_bridge_AptosCoinBurnCapability_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($1_atomic_bridge_AptosCoinBurnCapability_$memory, $t5);
    }
    if ($abort_flag) {
        assume {:print "$at(2,49447,49460)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,0):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t7 := get_field<atomic_bridge::AptosCoinBurnCapability>.burn_cap($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1298:13+66
    $t7 := $t6->$burn_cap;

    // assume Identical($t8, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<aptos_coin::AptosCoin>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:271:9+58
    assume {:print "$at(107,12303,12361)"} true;
    assume ($t8 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // assume Identical($t9, global<coin::CoinStore<aptos_coin::AptosCoin>>($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:272:9+59
    assume {:print "$at(107,12370,12429)"} true;
    assume ($t9 == $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0));

    // assume Identical($t10, select coin::CoinInfo.supply<coin::CoinInfo<aptos_coin::AptosCoin>>(global<coin::CoinInfo<aptos_coin::AptosCoin>>($t8))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:283:9+59
    assume {:print "$at(107,12858,12917)"} true;
    assume ($t10 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t8)->$supply);

    // assume Identical($t11, option::spec_borrow<optional_aggregator::OptionalAggregator>($t10)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:284:9+52
    assume {:print "$at(107,12926,12978)"} true;
    assume ($t11 == $1_option_spec_borrow'$1_optional_aggregator_OptionalAggregator'($t10));

    // assume Identical($t12, optional_aggregator::optional_aggregator_value($t11)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:285:9+72
    assume {:print "$at(107,12987,13059)"} true;
    assume ($t12 == $1_optional_aggregator_optional_aggregator_value($t11));

    // coin::burn_from<aptos_coin::AptosCoin>($t0, $t1, $t7) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1295:9+144
    assume {:print "$at(2,49379,49523)"} true;
    call $1_coin_burn_from'$1_aptos_coin_AptosCoin'($t0, $t1, $t7);
    if ($abort_flag) {
        assume {:print "$at(2,49379,49523)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,0):", $t3} $t3 == $t3;
        goto L4;
    }

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1300:5+1
    assume {:print "$at(2,49529,49530)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1300:5+1
    assume {:print "$at(2,49529,49530)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1300:5+1
L4:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1300:5+1
    assume {:print "$at(2,49529,49530)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge::burn [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+333
procedure {:timeLimit 40} $1_atomic_bridge_burn$verify(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $1_atomic_bridge_AptosCoinBurnCapability;
    var $t7: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';
    var $t8: int;
    var $t9: $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $t10: $1_option_Option'$1_optional_aggregator_OptionalAggregator';
    var $t11: $1_optional_aggregator_OptionalAggregator;
    var $t12: int;
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume {:print "$at(2,49197,49198)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: features::Features: ResourceDomain<features::Features>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: object::ObjectCore: ResourceDomain<object::ObjectCore>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: fungible_asset::ConcurrentFungibleBalance: ResourceDomain<fungible_asset::ConcurrentFungibleBalance>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($rsc))));

    // assume forall $rsc: fungible_asset::ConcurrentSupply: ResourceDomain<fungible_asset::ConcurrentSupply>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentSupply'($rsc))));

    // assume forall $rsc: fungible_asset::FungibleStore: ResourceDomain<fungible_asset::FungibleStore>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0);
    ($IsValid'$1_fungible_asset_FungibleStore'($rsc))));

    // assume forall $rsc: fungible_asset::Supply: ResourceDomain<fungible_asset::Supply>(): And(WellFormed($rsc), Le(Len<u128>(select option::Option.vec(select fungible_asset::Supply.maximum($rsc))), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Supply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Supply_$memory, $a_0);
    (($IsValid'$1_fungible_asset_Supply'($rsc) && (LenVec($rsc->$maximum->$vec) <= 1)))));

    // assume forall $rsc: coin::CoinConversionMap: ResourceDomain<coin::CoinConversionMap>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinConversionMap_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinConversionMap_$memory, $a_0);
    ($IsValid'$1_coin_CoinConversionMap'($rsc))));

    // assume forall $rsc: coin::PairedFungibleAssetRefs: ResourceDomain<coin::PairedFungibleAssetRefs>(): And(WellFormed($rsc), And(And(Le(Len<fungible_asset::MintRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.mint_ref_opt($rsc))), 1), Le(Len<fungible_asset::TransferRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.transfer_ref_opt($rsc))), 1)), Le(Len<fungible_asset::BurnRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.burn_ref_opt($rsc))), 1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_PairedFungibleAssetRefs_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_PairedFungibleAssetRefs_$memory, $a_0);
    (($IsValid'$1_coin_PairedFungibleAssetRefs'($rsc) && (((LenVec($rsc->$mint_ref_opt->$vec) <= 1) && (LenVec($rsc->$transfer_ref_opt->$vec) <= 1)) && (LenVec($rsc->$burn_ref_opt->$vec) <= 1))))));

    // assume forall $rsc: coin::CoinInfo<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinInfo<aptos_coin::AptosCoin>>(): And(WellFormed($rsc), And(Le(Len<optional_aggregator::OptionalAggregator>(select option::Option.vec(select coin::CoinInfo.supply($rsc))), 1), forall $elem: optional_aggregator::OptionalAggregator: select option::Option.vec(select coin::CoinInfo.supply($rsc)): And(And(And(And(And(Iff(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), option::$is_none<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), Iff(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), option::$is_none<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))), Implies(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), Le(select optional_aggregator::Integer.value<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), select optional_aggregator::Integer.limit<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)))))), Implies(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), Le(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem))), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))))), Le(Len<aggregator::Aggregator>(select option::Option.vec(select optional_aggregator::OptionalAggregator.aggregator($elem))), 1)), Le(Len<optional_aggregator::Integer>(select option::Option.vec(select optional_aggregator::OptionalAggregator.integer($elem))), 1)))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    (($IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($rsc) && ((LenVec($rsc->$supply->$vec) <= 1) && (var $range_1 := $rsc->$supply->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) <==> $1_option_$is_none'$1_optional_aggregator_Integer'($elem->$integer)) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) <==> $1_option_$is_none'$1_aggregator_Aggregator'($elem->$aggregator))) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) ==> ($1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$value <= $1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$limit))) && ($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) ==> ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator)) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator))))) && (LenVec($elem->$aggregator->$vec) <= 1)) && (LenVec($elem->$integer->$vec) <= 1)))))))))));

    // assume forall $rsc: coin::CoinStore<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinStore<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($rsc))));

    // assume forall $rsc: coin::Ghost$supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$supply<aptos_coin::AptosCoin>>(0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume $ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume $ResourceExists($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: atomic_bridge::AptosCoinBurnCapability: ResourceDomain<atomic_bridge::AptosCoinBurnCapability>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_AptosCoinBurnCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_AptosCoinBurnCapability_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_AptosCoinBurnCapability'($rsc))));

    // trace_local[from]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume {:print "$track_local(77,0,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1292:5+1
    assume {:print "$track_local(77,0,1):", $t1} $t1 == $t1;

    // $t2 := features::abort_atomic_bridge_enabled() on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:17+39
    assume {:print "$at(2,49300,49339)"} true;
    call $t2 := $1_features_abort_atomic_bridge_enabled();
    if ($abort_flag) {
        assume {:print "$at(2,49300,49339)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,0):", $t3} $t3 == $t3;
        goto L4;
    }

    // if ($t2) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:9+76
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:9+76
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:9+76
    assume {:print "$at(2,49292,49368)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:58+26
L0:

    // $t4 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:58+26
    assume {:print "$at(2,49341,49367)"} true;
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:9+76
    assume {:print "$at(2,49292,49368)"} true;
    assume {:print "$track_abort(77,0):", $t4} $t4 == $t4;

    // $t3 := move($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:9+76
    $t3 := $t4;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1293:9+76
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1296:13+4
    assume {:print "$at(2,49408,49412)"} true;
L2:

    // $t5 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1298:53+16
    assume {:print "$at(2,49486,49502)"} true;
    $t5 := 1;
    assume $IsValid'address'($t5);

    // $t6 := get_global<atomic_bridge::AptosCoinBurnCapability>($t5) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1298:14+13
    if (!$ResourceExists($1_atomic_bridge_AptosCoinBurnCapability_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($1_atomic_bridge_AptosCoinBurnCapability_$memory, $t5);
    }
    if ($abort_flag) {
        assume {:print "$at(2,49447,49460)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,0):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t7 := get_field<atomic_bridge::AptosCoinBurnCapability>.burn_cap($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1298:13+66
    $t7 := $t6->$burn_cap;

    // assume Identical($t8, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<aptos_coin::AptosCoin>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:271:9+58
    assume {:print "$at(107,12303,12361)"} true;
    assume ($t8 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // assume Identical($t9, global<coin::CoinStore<aptos_coin::AptosCoin>>($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:272:9+59
    assume {:print "$at(107,12370,12429)"} true;
    assume ($t9 == $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0));

    // assume Identical($t10, select coin::CoinInfo.supply<coin::CoinInfo<aptos_coin::AptosCoin>>(global<coin::CoinInfo<aptos_coin::AptosCoin>>($t8))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:283:9+59
    assume {:print "$at(107,12858,12917)"} true;
    assume ($t10 == $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $t8)->$supply);

    // assume Identical($t11, option::spec_borrow<optional_aggregator::OptionalAggregator>($t10)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:284:9+52
    assume {:print "$at(107,12926,12978)"} true;
    assume ($t11 == $1_option_spec_borrow'$1_optional_aggregator_OptionalAggregator'($t10));

    // assume Identical($t12, optional_aggregator::optional_aggregator_value($t11)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:285:9+72
    assume {:print "$at(107,12987,13059)"} true;
    assume ($t12 == $1_optional_aggregator_optional_aggregator_value($t11));

    // coin::burn_from<aptos_coin::AptosCoin>($t0, $t1, $t7) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1295:9+144
    assume {:print "$at(2,49379,49523)"} true;
    call $1_coin_burn_from'$1_aptos_coin_AptosCoin'($t0, $t1, $t7);
    if ($abort_flag) {
        assume {:print "$at(2,49379,49523)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,0):", $t3} $t3 == $t3;
        goto L4;
    }

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1300:5+1
    assume {:print "$at(2,49529,49530)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1300:5+1
    assume {:print "$at(2,49529,49530)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1300:5+1
L4:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1300:5+1
    assume {:print "$at(2,49529,49530)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge::mint [baseline] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+340
procedure {:inline 1} $1_atomic_bridge_mint(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $1_atomic_bridge_AptosCoinMintCapability;
    var $t7: $1_coin_MintCapability'$1_aptos_coin_AptosCoin';
    var $t8: int;
    var $t9: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t10: $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // bytecode translation starts here
    // trace_local[recipient]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume {:print "$at(2,48607,48608)"} true;
    assume {:print "$track_local(77,2,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume {:print "$track_local(77,2,1):", $t1} $t1 == $t1;

    // $t2 := features::abort_atomic_bridge_enabled() on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:17+39
    assume {:print "$at(2,48715,48754)"} true;
    call $t2 := $1_features_abort_atomic_bridge_enabled();
    if ($abort_flag) {
        assume {:print "$at(2,48715,48754)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,2):", $t3} $t3 == $t3;
        goto L4;
    }

    // if ($t2) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:9+76
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:9+76
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:9+76
    assume {:print "$at(2,48707,48783)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:58+26
L0:

    // $t4 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:58+26
    assume {:print "$at(2,48756,48782)"} true;
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:9+76
    assume {:print "$at(2,48707,48783)"} true;
    assume {:print "$track_abort(77,2):", $t4} $t4 == $t4;

    // $t3 := move($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:9+76
    $t3 := $t4;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:9+76
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1281:23+9
    assume {:print "$at(2,48808,48817)"} true;
L2:

    // $t5 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1283:53+16
    assume {:print "$at(2,48903,48919)"} true;
    $t5 := 1;
    assume $IsValid'address'($t5);

    // $t6 := get_global<atomic_bridge::AptosCoinMintCapability>($t5) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1283:14+13
    if (!$ResourceExists($1_atomic_bridge_AptosCoinMintCapability_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($1_atomic_bridge_AptosCoinMintCapability_$memory, $t5);
    }
    if ($abort_flag) {
        assume {:print "$at(2,48864,48877)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,2):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t7 := get_field<atomic_bridge::AptosCoinMintCapability>.mint_cap($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1283:13+66
    $t7 := $t6->$mint_cap;

    // assume Identical($t8, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<aptos_coin::AptosCoin>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:103:9+58
    assume {:print "$at(107,5935,5993)"} true;
    assume ($t8 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t9 := coin::mint<aptos_coin::AptosCoin>($t1, $t7) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1281:34+120
    assume {:print "$at(2,48819,48939)"} true;
    call $t9 := $1_coin_mint'$1_aptos_coin_AptosCoin'($t1, $t7);
    if ($abort_flag) {
        assume {:print "$at(2,48819,48939)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,2):", $t3} $t3 == $t3;
        goto L4;
    }

    // assume Identical($t10, global<coin::CoinStore<aptos_coin::AptosCoin>>($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:336:9+59
    assume {:print "$at(107,14990,15049)"} true;
    assume ($t10 == $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0));

    // coin::deposit<aptos_coin::AptosCoin>($t0, $t9) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1281:9+146
    assume {:print "$at(2,48794,48940)"} true;
    call $1_coin_deposit'$1_aptos_coin_AptosCoin'($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(2,48794,48940)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,2):", $t3} $t3 == $t3;
        goto L4;
    }

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1285:5+1
    assume {:print "$at(2,48946,48947)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1285:5+1
    assume {:print "$at(2,48946,48947)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1285:5+1
L4:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1285:5+1
    assume {:print "$at(2,48946,48947)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge::mint [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+340
procedure {:timeLimit 40} $1_atomic_bridge_mint$verify(_$t0: int, _$t1: int) returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: int;
    var $t5: int;
    var $t6: $1_atomic_bridge_AptosCoinMintCapability;
    var $t7: $1_coin_MintCapability'$1_aptos_coin_AptosCoin';
    var $t8: int;
    var $t9: $1_coin_Coin'$1_aptos_coin_AptosCoin';
    var $t10: $1_coin_CoinStore'$1_aptos_coin_AptosCoin';
    var $t0: int;
    var $t1: int;
    var $temp_0'address': int;
    var $temp_0'u64': int;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume {:print "$at(2,48607,48608)"} true;
    assume $IsValid'address'($t0);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume $IsValid'u64'($t1);

    // assume forall $rsc: features::Features: ResourceDomain<features::Features>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: object::ObjectCore: ResourceDomain<object::ObjectCore>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: object::Untransferable: ResourceDomain<object::Untransferable>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_Untransferable_$memory, $a_0);
    ($IsValid'$1_object_Untransferable'($rsc))));

    // assume forall $rsc: fungible_asset::Untransferable: ResourceDomain<fungible_asset::Untransferable>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0);
    ($IsValid'$1_fungible_asset_Untransferable'($rsc))));

    // assume forall $rsc: fungible_asset::ConcurrentFungibleBalance: ResourceDomain<fungible_asset::ConcurrentFungibleBalance>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($rsc))));

    // assume forall $rsc: fungible_asset::ConcurrentSupply: ResourceDomain<fungible_asset::ConcurrentSupply>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentSupply'($rsc))));

    // assume forall $rsc: fungible_asset::DispatchFunctionStore: ResourceDomain<fungible_asset::DispatchFunctionStore>(): And(WellFormed($rsc), And(And(Le(Len<function_info::FunctionInfo>(select option::Option.vec(select fungible_asset::DispatchFunctionStore.withdraw_function($rsc))), 1), Le(Len<function_info::FunctionInfo>(select option::Option.vec(select fungible_asset::DispatchFunctionStore.deposit_function($rsc))), 1)), Le(Len<function_info::FunctionInfo>(select option::Option.vec(select fungible_asset::DispatchFunctionStore.derived_balance_function($rsc))), 1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_DispatchFunctionStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_DispatchFunctionStore_$memory, $a_0);
    (($IsValid'$1_fungible_asset_DispatchFunctionStore'($rsc) && (((LenVec($rsc->$withdraw_function->$vec) <= 1) && (LenVec($rsc->$deposit_function->$vec) <= 1)) && (LenVec($rsc->$derived_balance_function->$vec) <= 1))))));

    // assume forall $rsc: fungible_asset::FungibleStore: ResourceDomain<fungible_asset::FungibleStore>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0);
    ($IsValid'$1_fungible_asset_FungibleStore'($rsc))));

    // assume forall $rsc: fungible_asset::Metadata: ResourceDomain<fungible_asset::Metadata>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Metadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Metadata_$memory, $a_0);
    ($IsValid'$1_fungible_asset_Metadata'($rsc))));

    // assume forall $rsc: fungible_asset::Supply: ResourceDomain<fungible_asset::Supply>(): And(WellFormed($rsc), Le(Len<u128>(select option::Option.vec(select fungible_asset::Supply.maximum($rsc))), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Supply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Supply_$memory, $a_0);
    (($IsValid'$1_fungible_asset_Supply'($rsc) && (LenVec($rsc->$maximum->$vec) <= 1)))));

    // assume forall $rsc: dispatchable_fungible_asset::TransferRefStore: ResourceDomain<dispatchable_fungible_asset::TransferRefStore>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_dispatchable_fungible_asset_TransferRefStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_dispatchable_fungible_asset_TransferRefStore_$memory, $a_0);
    ($IsValid'$1_dispatchable_fungible_asset_TransferRefStore'($rsc))));

    // assume forall $rsc: primary_fungible_store::DeriveRefPod: ResourceDomain<primary_fungible_store::DeriveRefPod>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0)}(var $rsc := $ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0);
    ($IsValid'$1_primary_fungible_store_DeriveRefPod'($rsc))));

    // assume forall $rsc: coin::CoinConversionMap: ResourceDomain<coin::CoinConversionMap>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinConversionMap_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinConversionMap_$memory, $a_0);
    ($IsValid'$1_coin_CoinConversionMap'($rsc))));

    // assume forall $rsc: coin::MigrationFlag: ResourceDomain<coin::MigrationFlag>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_MigrationFlag_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_MigrationFlag_$memory, $a_0);
    ($IsValid'$1_coin_MigrationFlag'($rsc))));

    // assume forall $rsc: coin::PairedCoinType: ResourceDomain<coin::PairedCoinType>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_PairedCoinType_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_PairedCoinType_$memory, $a_0);
    ($IsValid'$1_coin_PairedCoinType'($rsc))));

    // assume forall $rsc: coin::PairedFungibleAssetRefs: ResourceDomain<coin::PairedFungibleAssetRefs>(): And(WellFormed($rsc), And(And(Le(Len<fungible_asset::MintRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.mint_ref_opt($rsc))), 1), Le(Len<fungible_asset::TransferRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.transfer_ref_opt($rsc))), 1)), Le(Len<fungible_asset::BurnRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.burn_ref_opt($rsc))), 1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_PairedFungibleAssetRefs_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_PairedFungibleAssetRefs_$memory, $a_0);
    (($IsValid'$1_coin_PairedFungibleAssetRefs'($rsc) && (((LenVec($rsc->$mint_ref_opt->$vec) <= 1) && (LenVec($rsc->$transfer_ref_opt->$vec) <= 1)) && (LenVec($rsc->$burn_ref_opt->$vec) <= 1))))));

    // assume forall $rsc: coin::CoinInfo<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinInfo<aptos_coin::AptosCoin>>(): And(WellFormed($rsc), And(Le(Len<optional_aggregator::OptionalAggregator>(select option::Option.vec(select coin::CoinInfo.supply($rsc))), 1), forall $elem: optional_aggregator::OptionalAggregator: select option::Option.vec(select coin::CoinInfo.supply($rsc)): And(And(And(And(And(Iff(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), option::$is_none<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), Iff(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), option::$is_none<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))), Implies(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), Le(select optional_aggregator::Integer.value<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), select optional_aggregator::Integer.limit<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)))))), Implies(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), Le(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem))), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))))), Le(Len<aggregator::Aggregator>(select option::Option.vec(select optional_aggregator::OptionalAggregator.aggregator($elem))), 1)), Le(Len<optional_aggregator::Integer>(select option::Option.vec(select optional_aggregator::OptionalAggregator.integer($elem))), 1)))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    (($IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($rsc) && ((LenVec($rsc->$supply->$vec) <= 1) && (var $range_1 := $rsc->$supply->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) <==> $1_option_$is_none'$1_optional_aggregator_Integer'($elem->$integer)) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) <==> $1_option_$is_none'$1_aggregator_Aggregator'($elem->$aggregator))) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) ==> ($1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$value <= $1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$limit))) && ($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) ==> ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator)) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator))))) && (LenVec($elem->$aggregator->$vec) <= 1)) && (LenVec($elem->$integer->$vec) <= 1)))))))))));

    // assume forall $rsc: coin::CoinStore<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinStore<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($rsc))));

    // assume forall $rsc: coin::Ghost$supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$supply<aptos_coin::AptosCoin>>(0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume $ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume $ResourceExists($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: atomic_bridge::AptosCoinMintCapability: ResourceDomain<atomic_bridge::AptosCoinMintCapability>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_AptosCoinMintCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_AptosCoinMintCapability_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_AptosCoinMintCapability'($rsc))));

    // trace_local[recipient]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume {:print "$track_local(77,2,0):", $t0} $t0 == $t0;

    // trace_local[amount]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1278:5+1
    assume {:print "$track_local(77,2,1):", $t1} $t1 == $t1;

    // $t2 := features::abort_atomic_bridge_enabled() on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:17+39
    assume {:print "$at(2,48715,48754)"} true;
    call $t2 := $1_features_abort_atomic_bridge_enabled();
    if ($abort_flag) {
        assume {:print "$at(2,48715,48754)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,2):", $t3} $t3 == $t3;
        goto L4;
    }

    // if ($t2) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:9+76
    if ($t2) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:9+76
L1:

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:9+76
    assume {:print "$at(2,48707,48783)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:58+26
L0:

    // $t4 := 1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:58+26
    assume {:print "$at(2,48756,48782)"} true;
    $t4 := 1;
    assume $IsValid'u64'($t4);

    // trace_abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:9+76
    assume {:print "$at(2,48707,48783)"} true;
    assume {:print "$track_abort(77,2):", $t4} $t4 == $t4;

    // $t3 := move($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:9+76
    $t3 := $t4;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1279:9+76
    goto L4;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1281:23+9
    assume {:print "$at(2,48808,48817)"} true;
L2:

    // $t5 := 0x1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1283:53+16
    assume {:print "$at(2,48903,48919)"} true;
    $t5 := 1;
    assume $IsValid'address'($t5);

    // $t6 := get_global<atomic_bridge::AptosCoinMintCapability>($t5) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1283:14+13
    if (!$ResourceExists($1_atomic_bridge_AptosCoinMintCapability_$memory, $t5)) {
        call $ExecFailureAbort();
    } else {
        $t6 := $ResourceValue($1_atomic_bridge_AptosCoinMintCapability_$memory, $t5);
    }
    if ($abort_flag) {
        assume {:print "$at(2,48864,48877)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,2):", $t3} $t3 == $t3;
        goto L4;
    }

    // $t7 := get_field<atomic_bridge::AptosCoinMintCapability>.mint_cap($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1283:13+66
    $t7 := $t6->$mint_cap;

    // assume Identical($t8, select type_info::TypeInfo.account_address<type_info::TypeInfo>(type_info::$type_of<aptos_coin::AptosCoin>())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:103:9+58
    assume {:print "$at(107,5935,5993)"} true;
    assume ($t8 == $1_type_info_TypeInfo(1, Vec(DefaultVecMap()[0 := 97][1 := 112][2 := 116][3 := 111][4 := 115][5 := 95][6 := 99][7 := 111][8 := 105][9 := 110], 10), Vec(DefaultVecMap()[0 := 65][1 := 112][2 := 116][3 := 111][4 := 115][5 := 67][6 := 111][7 := 105][8 := 110], 9))->$account_address);

    // $t9 := coin::mint<aptos_coin::AptosCoin>($t1, $t7) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1281:34+120
    assume {:print "$at(2,48819,48939)"} true;
    call $t9 := $1_coin_mint'$1_aptos_coin_AptosCoin'($t1, $t7);
    if ($abort_flag) {
        assume {:print "$at(2,48819,48939)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,2):", $t3} $t3 == $t3;
        goto L4;
    }

    // assume Identical($t10, global<coin::CoinStore<aptos_coin::AptosCoin>>($t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/coin.spec.move:336:9+59
    assume {:print "$at(107,14990,15049)"} true;
    assume ($t10 == $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $t0));

    // coin::deposit<aptos_coin::AptosCoin>($t0, $t9) on_abort goto L4 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1281:9+146
    assume {:print "$at(2,48794,48940)"} true;
    call $1_coin_deposit'$1_aptos_coin_AptosCoin'($t0, $t9);
    if ($abort_flag) {
        assume {:print "$at(2,48794,48940)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,2):", $t3} $t3 == $t3;
        goto L4;
    }

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1285:5+1
    assume {:print "$at(2,48946,48947)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1285:5+1
    assume {:print "$at(2,48946,48947)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1285:5+1
L4:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1285:5+1
    assume {:print "$at(2,48946,48947)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge::store_aptos_coin_mint_cap [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1268:5+245
procedure {:timeLimit 40} $1_atomic_bridge_store_aptos_coin_mint_cap$verify(_$t0: $signer, _$t1: $1_coin_MintCapability'$1_aptos_coin_AptosCoin') returns ()
{
    // declare local variables
    var $t2: bool;
    var $t3: int;
    var $t4: $1_atomic_bridge_AptosCoinMintCapability;
    var $t0: $signer;
    var $t1: $1_coin_MintCapability'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_coin_MintCapability'$1_aptos_coin_AptosCoin'': $1_coin_MintCapability'$1_aptos_coin_AptosCoin';
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1268:5+1
    assume {:print "$at(2,48093,48094)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1268:5+1
    assume $IsValid'$1_coin_MintCapability'$1_aptos_coin_AptosCoin''($t1);

    // assume forall $rsc: atomic_bridge::AptosCoinMintCapability: ResourceDomain<atomic_bridge::AptosCoinMintCapability>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1268:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_AptosCoinMintCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_AptosCoinMintCapability_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_AptosCoinMintCapability'($rsc))));

    // trace_local[aptos_framework]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1268:5+1
    assume {:print "$track_local(77,4,0):", $t0} $t0 == $t0;

    // trace_local[mint_cap]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1268:5+1
    assume {:print "$track_local(77,4,1):", $t1} $t1 == $t1;

    // opaque begin: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1269:9+57
    assume {:print "$at(2,48203,48260)"} true;

    // assume Identical($t2, Neq<address>(signer::$address_of($t0), 0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1269:9+57
    assume ($t2 == !$IsEqual'address'($1_signer_$address_of($t0), 1));

    // if ($t2) goto L4 else goto L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1269:9+57
    if ($t2) { goto L4; } else { goto L3; }

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1269:9+57
L4:

    // assume And(Neq<address>(signer::$address_of($t0), 0x1), Eq(5, $t3)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1269:9+57
    assume {:print "$at(2,48203,48260)"} true;
    assume (!$IsEqual'address'($1_signer_$address_of($t0), 1) && $IsEqual'num'(5, $t3));

    // trace_abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1269:9+57
    assume {:print "$at(2,48203,48260)"} true;
    assume {:print "$track_abort(77,4):", $t3} $t3 == $t3;

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1269:9+57
    goto L2;

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1269:9+57
L3:

    // opaque end: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1269:9+57
    assume {:print "$at(2,48203,48260)"} true;

    // $t4 := pack atomic_bridge::AptosCoinMintCapability($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1270:34+36
    assume {:print "$at(2,48295,48331)"} true;
    $t4 := $1_atomic_bridge_AptosCoinMintCapability($t1);

    // move_to<atomic_bridge::AptosCoinMintCapability>($t4, $t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1270:9+7
    if ($ResourceExists($1_atomic_bridge_AptosCoinMintCapability_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_atomic_bridge_AptosCoinMintCapability_$memory := $ResourceUpdate($1_atomic_bridge_AptosCoinMintCapability_$memory, $t0->$addr, $t4);
    }
    if ($abort_flag) {
        assume {:print "$at(2,48270,48277)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(77,4):", $t3} $t3 == $t3;
        goto L2;
    }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1271:5+1
    assume {:print "$at(2,48337,48338)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1271:5+1
    assume {:print "$at(2,48337,48338)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1271:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1271:5+1
    assume {:print "$at(2,48337,48338)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge::store_aptos_coin_burn_cap [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+499
procedure {:timeLimit 40} $1_atomic_bridge_store_aptos_coin_burn_cap$verify(_$t0: $signer, _$t1: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin') returns ()
{
    // declare local variables
    var $t2: $1_fungible_asset_BurnRef;
    var $t3: bool;
    var $t4: int;
    var $t5: bool;
    var $t6: $1_fungible_asset_BurnRef;
    var $t7: $1_atomic_bridge_AptosFABurnCapabilities;
    var $t8: $1_atomic_bridge_AptosCoinBurnCapability;
    var $t0: $signer;
    var $t1: $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin'': $1_coin_BurnCapability'$1_aptos_coin_AptosCoin';
    var $temp_0'$1_fungible_asset_BurnRef': $1_fungible_asset_BurnRef;
    var $temp_0'signer': $signer;
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+1
    assume {:print "$at(2,47395,47396)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+1
    assume $IsValid'$1_coin_BurnCapability'$1_aptos_coin_AptosCoin''($t1);

    // assume forall $rsc: features::Features: ResourceDomain<features::Features>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: coin::CoinConversionMap: ResourceDomain<coin::CoinConversionMap>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinConversionMap_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinConversionMap_$memory, $a_0);
    ($IsValid'$1_coin_CoinConversionMap'($rsc))));

    // assume forall $rsc: coin::PairedFungibleAssetRefs: ResourceDomain<coin::PairedFungibleAssetRefs>(): And(WellFormed($rsc), And(And(Le(Len<fungible_asset::MintRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.mint_ref_opt($rsc))), 1), Le(Len<fungible_asset::TransferRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.transfer_ref_opt($rsc))), 1)), Le(Len<fungible_asset::BurnRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.burn_ref_opt($rsc))), 1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_PairedFungibleAssetRefs_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_PairedFungibleAssetRefs_$memory, $a_0);
    (($IsValid'$1_coin_PairedFungibleAssetRefs'($rsc) && (((LenVec($rsc->$mint_ref_opt->$vec) <= 1) && (LenVec($rsc->$transfer_ref_opt->$vec) <= 1)) && (LenVec($rsc->$burn_ref_opt->$vec) <= 1))))));

    // assume forall $rsc: coin::CoinInfo<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinInfo<aptos_coin::AptosCoin>>(): And(WellFormed($rsc), And(Le(Len<optional_aggregator::OptionalAggregator>(select option::Option.vec(select coin::CoinInfo.supply($rsc))), 1), forall $elem: optional_aggregator::OptionalAggregator: select option::Option.vec(select coin::CoinInfo.supply($rsc)): And(And(And(And(And(Iff(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), option::$is_none<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), Iff(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), option::$is_none<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))), Implies(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), Le(select optional_aggregator::Integer.value<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), select optional_aggregator::Integer.limit<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)))))), Implies(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), Le(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem))), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))))), Le(Len<aggregator::Aggregator>(select option::Option.vec(select optional_aggregator::OptionalAggregator.aggregator($elem))), 1)), Le(Len<optional_aggregator::Integer>(select option::Option.vec(select optional_aggregator::OptionalAggregator.integer($elem))), 1)))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    (($IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($rsc) && ((LenVec($rsc->$supply->$vec) <= 1) && (var $range_1 := $rsc->$supply->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) <==> $1_option_$is_none'$1_optional_aggregator_Integer'($elem->$integer)) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) <==> $1_option_$is_none'$1_aggregator_Aggregator'($elem->$aggregator))) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) ==> ($1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$value <= $1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$limit))) && ($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) ==> ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator)) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator))))) && (LenVec($elem->$aggregator->$vec) <= 1)) && (LenVec($elem->$integer->$vec) <= 1)))))))))));

    // assume forall $rsc: coin::Ghost$supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$supply<aptos_coin::AptosCoin>>(0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+1
    assume $ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+1
    assume $ResourceExists($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: atomic_bridge::AptosFABurnCapabilities: ResourceDomain<atomic_bridge::AptosFABurnCapabilities>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_AptosFABurnCapabilities_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_AptosFABurnCapabilities_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_AptosFABurnCapabilities'($rsc))));

    // assume forall $rsc: atomic_bridge::AptosCoinBurnCapability: ResourceDomain<atomic_bridge::AptosCoinBurnCapability>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_AptosCoinBurnCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_AptosCoinBurnCapability_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_AptosCoinBurnCapability'($rsc))));

    // trace_local[aptos_framework]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+1
    assume {:print "$track_local(77,3,0):", $t0} $t0 == $t0;

    // trace_local[burn_cap]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1254:5+1
    assume {:print "$track_local(77,3,1):", $t1} $t1 == $t1;

    // opaque begin: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1255:9+57
    assume {:print "$at(2,47505,47562)"} true;

    // assume Identical($t3, Neq<address>(signer::$address_of($t0), 0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1255:9+57
    assume ($t3 == !$IsEqual'address'($1_signer_$address_of($t0), 1));

    // if ($t3) goto L6 else goto L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1255:9+57
    if ($t3) { goto L6; } else { goto L5; }

    // label L6 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1255:9+57
L6:

    // assume And(Neq<address>(signer::$address_of($t0), 0x1), Eq(5, $t4)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1255:9+57
    assume {:print "$at(2,47505,47562)"} true;
    assume (!$IsEqual'address'($1_signer_$address_of($t0), 1) && $IsEqual'num'(5, $t4));

    // trace_abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1255:9+57
    assume {:print "$at(2,47505,47562)"} true;
    assume {:print "$track_abort(77,3):", $t4} $t4 == $t4;

    // goto L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1255:9+57
    goto L4;

    // label L5 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1255:9+57
L5:

    // opaque end: system_addresses::assert_aptos_framework($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1255:9+57
    assume {:print "$at(2,47505,47562)"} true;

    // $t5 := features::operations_default_to_fa_apt_store_enabled() on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1256:13+54
    assume {:print "$at(2,47576,47630)"} true;
    call $t5 := $1_features_operations_default_to_fa_apt_store_enabled();
    if ($abort_flag) {
        assume {:print "$at(2,47576,47630)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(77,3):", $t4} $t4 == $t4;
        goto L4;
    }

    // if ($t5) goto L1 else goto L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1256:9+316
    if ($t5) { goto L1; } else { goto L0; }

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1257:67+8
    assume {:print "$at(2,47700,47708)"} true;
L1:

    // $t6 := coin::convert_and_take_paired_burn_ref<aptos_coin::AptosCoin>($t1) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1257:28+48
    assume {:print "$at(2,47661,47709)"} true;
    call $t6 := $1_coin_convert_and_take_paired_burn_ref'$1_aptos_coin_AptosCoin'($t1);
    if ($abort_flag) {
        assume {:print "$at(2,47661,47709)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(77,3):", $t4} $t4 == $t4;
        goto L4;
    }

    // trace_local[burn_ref]($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1257:17+8
    assume {:print "$track_local(77,3,2):", $t6} $t6 == $t6;

    // $t7 := pack atomic_bridge::AptosFABurnCapabilities($t6) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1258:38+36
    assume {:print "$at(2,47748,47784)"} true;
    $t7 := $1_atomic_bridge_AptosFABurnCapabilities($t6);

    // move_to<atomic_bridge::AptosFABurnCapabilities>($t7, $t0) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1258:13+7
    if ($ResourceExists($1_atomic_bridge_AptosFABurnCapabilities_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_atomic_bridge_AptosFABurnCapabilities_$memory := $ResourceUpdate($1_atomic_bridge_AptosFABurnCapabilities_$memory, $t0->$addr, $t7);
    }
    if ($abort_flag) {
        assume {:print "$at(2,47723,47730)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(77,3):", $t4} $t4 == $t4;
        goto L4;
    }

    // goto L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1256:9+316
    assume {:print "$at(2,47572,47888)"} true;
    goto L2;

    // label L0 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1260:21+15
    assume {:print "$at(2,47824,47839)"} true;
L0:

    // $t8 := pack atomic_bridge::AptosCoinBurnCapability($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1260:38+36
    assume {:print "$at(2,47841,47877)"} true;
    $t8 := $1_atomic_bridge_AptosCoinBurnCapability($t1);

    // move_to<atomic_bridge::AptosCoinBurnCapability>($t8, $t0) on_abort goto L4 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1260:13+7
    if ($ResourceExists($1_atomic_bridge_AptosCoinBurnCapability_$memory, $t0->$addr)) {
        call $ExecFailureAbort();
    } else {
        $1_atomic_bridge_AptosCoinBurnCapability_$memory := $ResourceUpdate($1_atomic_bridge_AptosCoinBurnCapability_$memory, $t0->$addr, $t8);
    }
    if ($abort_flag) {
        assume {:print "$at(2,47816,47823)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(77,3):", $t4} $t4 == $t4;
        goto L4;
    }

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1256:9+316
    assume {:print "$at(2,47572,47888)"} true;
L2:

    // label L3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1262:5+1
    assume {:print "$at(2,47893,47894)"} true;
L3:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1262:5+1
    assume {:print "$at(2,47893,47894)"} true;
    return;

    // label L4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1262:5+1
L4:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1262:5+1
    assume {:print "$at(2,47893,47894)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}

// struct atomic_bridge_counterparty::BridgeTransferCancelledEvent at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1343:5+99
datatype $1_atomic_bridge_counterparty_BridgeTransferCancelledEvent {
    $1_atomic_bridge_counterparty_BridgeTransferCancelledEvent($bridge_transfer_id: Vec (int))
}
function {:inline} $Update'$1_atomic_bridge_counterparty_BridgeTransferCancelledEvent'_bridge_transfer_id(s: $1_atomic_bridge_counterparty_BridgeTransferCancelledEvent, x: Vec (int)): $1_atomic_bridge_counterparty_BridgeTransferCancelledEvent {
    $1_atomic_bridge_counterparty_BridgeTransferCancelledEvent(x)
}
function $IsValid'$1_atomic_bridge_counterparty_BridgeTransferCancelledEvent'(s: $1_atomic_bridge_counterparty_BridgeTransferCancelledEvent): bool {
    $IsValid'vec'u8''(s->$bridge_transfer_id)
}
function {:inline} $IsEqual'$1_atomic_bridge_counterparty_BridgeTransferCancelledEvent'(s1: $1_atomic_bridge_counterparty_BridgeTransferCancelledEvent, s2: $1_atomic_bridge_counterparty_BridgeTransferCancelledEvent): bool {
    $IsEqual'vec'u8''(s1->$bridge_transfer_id, s2->$bridge_transfer_id)}

// struct atomic_bridge_counterparty::BridgeTransferCompletedEvent at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1336:5+130
datatype $1_atomic_bridge_counterparty_BridgeTransferCompletedEvent {
    $1_atomic_bridge_counterparty_BridgeTransferCompletedEvent($bridge_transfer_id: Vec (int), $pre_image: Vec (int))
}
function {:inline} $Update'$1_atomic_bridge_counterparty_BridgeTransferCompletedEvent'_bridge_transfer_id(s: $1_atomic_bridge_counterparty_BridgeTransferCompletedEvent, x: Vec (int)): $1_atomic_bridge_counterparty_BridgeTransferCompletedEvent {
    $1_atomic_bridge_counterparty_BridgeTransferCompletedEvent(x, s->$pre_image)
}
function {:inline} $Update'$1_atomic_bridge_counterparty_BridgeTransferCompletedEvent'_pre_image(s: $1_atomic_bridge_counterparty_BridgeTransferCompletedEvent, x: Vec (int)): $1_atomic_bridge_counterparty_BridgeTransferCompletedEvent {
    $1_atomic_bridge_counterparty_BridgeTransferCompletedEvent(s->$bridge_transfer_id, x)
}
function $IsValid'$1_atomic_bridge_counterparty_BridgeTransferCompletedEvent'(s: $1_atomic_bridge_counterparty_BridgeTransferCompletedEvent): bool {
    $IsValid'vec'u8''(s->$bridge_transfer_id)
      && $IsValid'vec'u8''(s->$pre_image)
}
function {:inline} $IsEqual'$1_atomic_bridge_counterparty_BridgeTransferCompletedEvent'(s1: $1_atomic_bridge_counterparty_BridgeTransferCompletedEvent, s2: $1_atomic_bridge_counterparty_BridgeTransferCompletedEvent): bool {
    $IsEqual'vec'u8''(s1->$bridge_transfer_id, s2->$bridge_transfer_id)
    && $IsEqual'vec'u8''(s1->$pre_image, s2->$pre_image)}

// struct atomic_bridge_counterparty::BridgeTransferLockedEvent at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1325:5+231
datatype $1_atomic_bridge_counterparty_BridgeTransferLockedEvent {
    $1_atomic_bridge_counterparty_BridgeTransferLockedEvent($bridge_transfer_id: Vec (int), $initiator: Vec (int), $recipient: int, $amount: int, $hash_lock: Vec (int), $time_lock: int)
}
function {:inline} $Update'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'_bridge_transfer_id(s: $1_atomic_bridge_counterparty_BridgeTransferLockedEvent, x: Vec (int)): $1_atomic_bridge_counterparty_BridgeTransferLockedEvent {
    $1_atomic_bridge_counterparty_BridgeTransferLockedEvent(x, s->$initiator, s->$recipient, s->$amount, s->$hash_lock, s->$time_lock)
}
function {:inline} $Update'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'_initiator(s: $1_atomic_bridge_counterparty_BridgeTransferLockedEvent, x: Vec (int)): $1_atomic_bridge_counterparty_BridgeTransferLockedEvent {
    $1_atomic_bridge_counterparty_BridgeTransferLockedEvent(s->$bridge_transfer_id, x, s->$recipient, s->$amount, s->$hash_lock, s->$time_lock)
}
function {:inline} $Update'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'_recipient(s: $1_atomic_bridge_counterparty_BridgeTransferLockedEvent, x: int): $1_atomic_bridge_counterparty_BridgeTransferLockedEvent {
    $1_atomic_bridge_counterparty_BridgeTransferLockedEvent(s->$bridge_transfer_id, s->$initiator, x, s->$amount, s->$hash_lock, s->$time_lock)
}
function {:inline} $Update'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'_amount(s: $1_atomic_bridge_counterparty_BridgeTransferLockedEvent, x: int): $1_atomic_bridge_counterparty_BridgeTransferLockedEvent {
    $1_atomic_bridge_counterparty_BridgeTransferLockedEvent(s->$bridge_transfer_id, s->$initiator, s->$recipient, x, s->$hash_lock, s->$time_lock)
}
function {:inline} $Update'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'_hash_lock(s: $1_atomic_bridge_counterparty_BridgeTransferLockedEvent, x: Vec (int)): $1_atomic_bridge_counterparty_BridgeTransferLockedEvent {
    $1_atomic_bridge_counterparty_BridgeTransferLockedEvent(s->$bridge_transfer_id, s->$initiator, s->$recipient, s->$amount, x, s->$time_lock)
}
function {:inline} $Update'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'_time_lock(s: $1_atomic_bridge_counterparty_BridgeTransferLockedEvent, x: int): $1_atomic_bridge_counterparty_BridgeTransferLockedEvent {
    $1_atomic_bridge_counterparty_BridgeTransferLockedEvent(s->$bridge_transfer_id, s->$initiator, s->$recipient, s->$amount, s->$hash_lock, x)
}
function $IsValid'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'(s: $1_atomic_bridge_counterparty_BridgeTransferLockedEvent): bool {
    $IsValid'vec'u8''(s->$bridge_transfer_id)
      && $IsValid'vec'u8''(s->$initiator)
      && $IsValid'address'(s->$recipient)
      && $IsValid'u64'(s->$amount)
      && $IsValid'vec'u8''(s->$hash_lock)
      && $IsValid'u64'(s->$time_lock)
}
function {:inline} $IsEqual'$1_atomic_bridge_counterparty_BridgeTransferLockedEvent'(s1: $1_atomic_bridge_counterparty_BridgeTransferLockedEvent, s2: $1_atomic_bridge_counterparty_BridgeTransferLockedEvent): bool {
    $IsEqual'vec'u8''(s1->$bridge_transfer_id, s2->$bridge_transfer_id)
    && $IsEqual'vec'u8''(s1->$initiator, s2->$initiator)
    && $IsEqual'address'(s1->$recipient, s2->$recipient)
    && $IsEqual'u64'(s1->$amount, s2->$amount)
    && $IsEqual'vec'u8''(s1->$hash_lock, s2->$hash_lock)
    && $IsEqual'u64'(s1->$time_lock, s2->$time_lock)}

// fun atomic_bridge_counterparty::abort_bridge_transfer [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1421:5+409
procedure {:timeLimit 40} $1_atomic_bridge_counterparty_abort_bridge_transfer$verify(_$t0: $signer, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: $1_ethereum_EthereumAddress;
    var $t4: int;
    var $t5: $1_atomic_bridge_counterparty_BridgeTransferCancelledEvent;
    var $t0: $signer;
    var $t1: Vec (int);
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1421:5+1
    assume {:print "$at(2,53855,53856)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1421:5+1
    assume $IsValid'vec'u8''($t1);

    // assume forall $rsc: features::Features: ResourceDomain<features::Features>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1421:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1421:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1421:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1421:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1421:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''($rsc))));

    // assume forall $rsc: atomic_bridge_configuration::BridgeConfig: ResourceDomain<atomic_bridge_configuration::BridgeConfig>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1421:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_configuration_BridgeConfig'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1421:5+409
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1421:5+409
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // trace_local[caller]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1421:5+1
    assume {:print "$track_local(78,0,0):", $t0} $t0 == $t0;

    // trace_local[bridge_transfer_id]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1421:5+1
    assume {:print "$track_local(78,0,1):", $t1} $t1 == $t1;

    // atomic_bridge_configuration::assert_is_caller_operator($t0) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1425:9+62
    assume {:print "$at(2,53975,54037)"} true;
    call $1_atomic_bridge_configuration_assert_is_caller_operator($t0);
    if ($abort_flag) {
        assume {:print "$at(2,53975,54037)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(78,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // ($t3, $t4) := atomic_bridge_store::cancel_transfer<ethereum::EthereumAddress, address>($t1) on_abort goto L2 with $t2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1427:9+82
    assume {:print "$at(2,54048,54130)"} true;
    call $t3,$t4 := $1_atomic_bridge_store_cancel_transfer'$1_ethereum_EthereumAddress_address'($t1);
    if ($abort_flag) {
        assume {:print "$at(2,54048,54130)"} true;
        $t2 := $abort_code;
        assume {:print "$track_abort(78,0):", $t2} $t2 == $t2;
        goto L2;
    }

    // drop($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1427:9+82

    // drop($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1427:9+82

    // $t5 := pack atomic_bridge_counterparty::BridgeTransferCancelledEvent($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1430:13+80
    assume {:print "$at(2,54166,54246)"} true;
    $t5 := $1_atomic_bridge_counterparty_BridgeTransferCancelledEvent($t1);

    // opaque begin: event::emit<atomic_bridge_counterparty::BridgeTransferCancelledEvent>($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1429:9+116
    assume {:print "$at(2,54141,54257)"} true;

    // opaque end: event::emit<atomic_bridge_counterparty::BridgeTransferCancelledEvent>($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1429:9+116

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1434:5+1
    assume {:print "$at(2,54263,54264)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1434:5+1
    assume {:print "$at(2,54263,54264)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1434:5+1
L2:

    // abort($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1434:5+1
    assume {:print "$at(2,54263,54264)"} true;
    $abort_code := $t2;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_counterparty::complete_bridge_transfer [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+544
procedure {:timeLimit 40} $1_atomic_bridge_counterparty_complete_bridge_transfer$verify(_$t0: Vec (int), _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: Vec (int);
    var $t3: int;
    var $t4: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var $t5: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $t6: int;
    var $t7: int;
    var $t8: $1_atomic_bridge_counterparty_BridgeTransferCompletedEvent;
    var $t0: Vec (int);
    var $t1: Vec (int);
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume {:print "$at(2,52993,52994)"} true;
    assume $IsValid'vec'u8''($t0);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume $IsValid'vec'u8''($t1);

    // assume forall $rsc: features::Features: ResourceDomain<features::Features>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: object::ObjectCore: ResourceDomain<object::ObjectCore>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: object::Untransferable: ResourceDomain<object::Untransferable>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_Untransferable_$memory, $a_0);
    ($IsValid'$1_object_Untransferable'($rsc))));

    // assume forall $rsc: fungible_asset::Untransferable: ResourceDomain<fungible_asset::Untransferable>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0);
    ($IsValid'$1_fungible_asset_Untransferable'($rsc))));

    // assume forall $rsc: fungible_asset::ConcurrentFungibleBalance: ResourceDomain<fungible_asset::ConcurrentFungibleBalance>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($rsc))));

    // assume forall $rsc: fungible_asset::ConcurrentSupply: ResourceDomain<fungible_asset::ConcurrentSupply>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentSupply'($rsc))));

    // assume forall $rsc: fungible_asset::DispatchFunctionStore: ResourceDomain<fungible_asset::DispatchFunctionStore>(): And(WellFormed($rsc), And(And(Le(Len<function_info::FunctionInfo>(select option::Option.vec(select fungible_asset::DispatchFunctionStore.withdraw_function($rsc))), 1), Le(Len<function_info::FunctionInfo>(select option::Option.vec(select fungible_asset::DispatchFunctionStore.deposit_function($rsc))), 1)), Le(Len<function_info::FunctionInfo>(select option::Option.vec(select fungible_asset::DispatchFunctionStore.derived_balance_function($rsc))), 1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_DispatchFunctionStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_DispatchFunctionStore_$memory, $a_0);
    (($IsValid'$1_fungible_asset_DispatchFunctionStore'($rsc) && (((LenVec($rsc->$withdraw_function->$vec) <= 1) && (LenVec($rsc->$deposit_function->$vec) <= 1)) && (LenVec($rsc->$derived_balance_function->$vec) <= 1))))));

    // assume forall $rsc: fungible_asset::FungibleStore: ResourceDomain<fungible_asset::FungibleStore>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0);
    ($IsValid'$1_fungible_asset_FungibleStore'($rsc))));

    // assume forall $rsc: fungible_asset::Metadata: ResourceDomain<fungible_asset::Metadata>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Metadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Metadata_$memory, $a_0);
    ($IsValid'$1_fungible_asset_Metadata'($rsc))));

    // assume forall $rsc: fungible_asset::Supply: ResourceDomain<fungible_asset::Supply>(): And(WellFormed($rsc), Le(Len<u128>(select option::Option.vec(select fungible_asset::Supply.maximum($rsc))), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Supply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Supply_$memory, $a_0);
    (($IsValid'$1_fungible_asset_Supply'($rsc) && (LenVec($rsc->$maximum->$vec) <= 1)))));

    // assume forall $rsc: dispatchable_fungible_asset::TransferRefStore: ResourceDomain<dispatchable_fungible_asset::TransferRefStore>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_dispatchable_fungible_asset_TransferRefStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_dispatchable_fungible_asset_TransferRefStore_$memory, $a_0);
    ($IsValid'$1_dispatchable_fungible_asset_TransferRefStore'($rsc))));

    // assume forall $rsc: primary_fungible_store::DeriveRefPod: ResourceDomain<primary_fungible_store::DeriveRefPod>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0)}(var $rsc := $ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0);
    ($IsValid'$1_primary_fungible_store_DeriveRefPod'($rsc))));

    // assume forall $rsc: coin::CoinConversionMap: ResourceDomain<coin::CoinConversionMap>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinConversionMap_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinConversionMap_$memory, $a_0);
    ($IsValid'$1_coin_CoinConversionMap'($rsc))));

    // assume forall $rsc: coin::MigrationFlag: ResourceDomain<coin::MigrationFlag>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_MigrationFlag_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_MigrationFlag_$memory, $a_0);
    ($IsValid'$1_coin_MigrationFlag'($rsc))));

    // assume forall $rsc: coin::PairedCoinType: ResourceDomain<coin::PairedCoinType>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_PairedCoinType_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_PairedCoinType_$memory, $a_0);
    ($IsValid'$1_coin_PairedCoinType'($rsc))));

    // assume forall $rsc: coin::PairedFungibleAssetRefs: ResourceDomain<coin::PairedFungibleAssetRefs>(): And(WellFormed($rsc), And(And(Le(Len<fungible_asset::MintRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.mint_ref_opt($rsc))), 1), Le(Len<fungible_asset::TransferRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.transfer_ref_opt($rsc))), 1)), Le(Len<fungible_asset::BurnRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.burn_ref_opt($rsc))), 1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_PairedFungibleAssetRefs_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_PairedFungibleAssetRefs_$memory, $a_0);
    (($IsValid'$1_coin_PairedFungibleAssetRefs'($rsc) && (((LenVec($rsc->$mint_ref_opt->$vec) <= 1) && (LenVec($rsc->$transfer_ref_opt->$vec) <= 1)) && (LenVec($rsc->$burn_ref_opt->$vec) <= 1))))));

    // assume forall $rsc: coin::CoinInfo<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinInfo<aptos_coin::AptosCoin>>(): And(WellFormed($rsc), And(Le(Len<optional_aggregator::OptionalAggregator>(select option::Option.vec(select coin::CoinInfo.supply($rsc))), 1), forall $elem: optional_aggregator::OptionalAggregator: select option::Option.vec(select coin::CoinInfo.supply($rsc)): And(And(And(And(And(Iff(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), option::$is_none<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), Iff(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), option::$is_none<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))), Implies(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), Le(select optional_aggregator::Integer.value<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), select optional_aggregator::Integer.limit<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)))))), Implies(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), Le(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem))), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))))), Le(Len<aggregator::Aggregator>(select option::Option.vec(select optional_aggregator::OptionalAggregator.aggregator($elem))), 1)), Le(Len<optional_aggregator::Integer>(select option::Option.vec(select optional_aggregator::OptionalAggregator.integer($elem))), 1)))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    (($IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($rsc) && ((LenVec($rsc->$supply->$vec) <= 1) && (var $range_1 := $rsc->$supply->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) <==> $1_option_$is_none'$1_optional_aggregator_Integer'($elem->$integer)) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) <==> $1_option_$is_none'$1_aggregator_Aggregator'($elem->$aggregator))) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) ==> ($1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$value <= $1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$limit))) && ($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) ==> ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator)) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator))))) && (LenVec($elem->$aggregator->$vec) <= 1)) && (LenVec($elem->$integer->$vec) <= 1)))))))))));

    // assume forall $rsc: coin::CoinStore<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinStore<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($rsc))));

    // assume forall $rsc: coin::Ghost$supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$supply<aptos_coin::AptosCoin>>(0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume $ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume $ResourceExists($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''($rsc))));

    // assume forall $rsc: atomic_bridge::AptosCoinMintCapability: ResourceDomain<atomic_bridge::AptosCoinMintCapability>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_AptosCoinMintCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_AptosCoinMintCapability_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_AptosCoinMintCapability'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+544
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+544
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // trace_local[bridge_transfer_id]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume {:print "$track_local(78,1,0):", $t0} $t0 == $t0;

    // trace_local[pre_image]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1396:5+1
    assume {:print "$track_local(78,1,1):", $t1} $t1 == $t1;

    // $t2 := atomic_bridge_store::create_hashlock($t1) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1402:13+26
    assume {:print "$at(2,53259,53285)"} true;
    call $t2 := $1_atomic_bridge_store_create_hashlock($t1);
    if ($abort_flag) {
        assume {:print "$at(2,53259,53285)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(78,1):", $t3} $t3 == $t3;
        goto L2;
    }

    // assume Identical($t4, select atomic_bridge_store::SmartTableWrapper.inner<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>(global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:83:9+119
    assume {:print "$at(3,4006,4125)"} true;
    assume ($t4 == $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, 1)->$inner);

    // assume Identical($t5, smart_table::spec_get<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>($t4, $t0)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:87:9+63
    assume {:print "$at(3,4400,4463)"} true;
    assume ($t5 == $1_smart_table_spec_get'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''($t4, $t0));

    // ($t6, $t7) := atomic_bridge_store::complete_transfer<ethereum::EthereumAddress, address>($t0, $t2) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1400:35+146
    assume {:print "$at(2,53149,53295)"} true;
    call $t6,$t7 := $1_atomic_bridge_store_complete_transfer'$1_ethereum_EthereumAddress_address'($t0, $t2);
    if ($abort_flag) {
        assume {:print "$at(2,53149,53295)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(78,1):", $t3} $t3 == $t3;
        goto L2;
    }

    // atomic_bridge::mint($t6, $t7) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1406:9+38
    assume {:print "$at(2,53338,53376)"} true;
    call $1_atomic_bridge_mint($t6, $t7);
    if ($abort_flag) {
        assume {:print "$at(2,53338,53376)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(78,1):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t8 := pack atomic_bridge_counterparty::BridgeTransferCompletedEvent($t0, $t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1409:13+107
    assume {:print "$at(2,53412,53519)"} true;
    $t8 := $1_atomic_bridge_counterparty_BridgeTransferCompletedEvent($t0, $t1);

    // opaque begin: event::emit<atomic_bridge_counterparty::BridgeTransferCompletedEvent>($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1408:9+143
    assume {:print "$at(2,53387,53530)"} true;

    // opaque end: event::emit<atomic_bridge_counterparty::BridgeTransferCompletedEvent>($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1408:9+143

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1414:5+1
    assume {:print "$at(2,53536,53537)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1414:5+1
    assume {:print "$at(2,53536,53537)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1414:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1414:5+1
    assume {:print "$at(2,53536,53537)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_counterparty::lock_bridge_transfer_assets [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1043
procedure {:timeLimit 40} $1_atomic_bridge_counterparty_lock_bridge_transfer_assets$verify(_$t0: $signer, _$t1: Vec (int), _$t2: Vec (int), _$t3: Vec (int), _$t4: int, _$t5: int) returns ()
{
    // declare local variables
    var $t6: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $t7: $1_ethereum_EthereumAddress;
    var $t8: int;
    var $t9: int;
    var $t10: $1_ethereum_EthereumAddress;
    var $t11: int;
    var $t12: $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $t13: Table int ($1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address');
    var $t14: $1_atomic_bridge_counterparty_BridgeTransferLockedEvent;
    var $t0: $signer;
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $t3: Vec (int);
    var $t4: int;
    var $t5: int;
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'': $1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address';
    var $temp_0'$1_ethereum_EthereumAddress': $1_ethereum_EthereumAddress;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;
    $t4 := _$t4;
    $t5 := _$t5;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume {:print "$at(2,51608,51609)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume $IsValid'vec'u8''($t1);

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume $IsValid'vec'u8''($t3);

    // assume WellFormed($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume $IsValid'address'($t4);

    // assume WellFormed($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume $IsValid'u64'($t5);

    // assume forall $rsc: features::Features: ResourceDomain<features::Features>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address'''($rsc))));

    // assume forall $rsc: atomic_bridge_configuration::BridgeConfig: ResourceDomain<atomic_bridge_configuration::BridgeConfig>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_configuration_BridgeConfig'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1043
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1043
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // trace_local[caller]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume {:print "$track_local(78,2,0):", $t0} $t0 == $t0;

    // trace_local[initiator]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume {:print "$track_local(78,2,1):", $t1} $t1 == $t1;

    // trace_local[bridge_transfer_id]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume {:print "$track_local(78,2,2):", $t2} $t2 == $t2;

    // trace_local[hash_lock]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume {:print "$track_local(78,2,3):", $t3} $t3 == $t3;

    // trace_local[recipient]($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume {:print "$track_local(78,2,4):", $t4} $t4 == $t4;

    // trace_local[amount]($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1357:5+1
    assume {:print "$track_local(78,2,5):", $t5} $t5 == $t5;

    // atomic_bridge_configuration::assert_is_caller_operator($t0) on_abort goto L2 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1365:9+62
    assume {:print "$at(2,51845,51907)"} true;
    call $1_atomic_bridge_configuration_assert_is_caller_operator($t0);
    if ($abort_flag) {
        assume {:print "$at(2,51845,51907)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(78,2):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t10 := ethereum::ethereum_address($t1) on_abort goto L2 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1366:32+37
    assume {:print "$at(2,51940,51977)"} true;
    call $t10 := $1_ethereum_ethereum_address($t1);
    if ($abort_flag) {
        assume {:print "$at(2,51940,51977)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(78,2):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[ethereum_address]($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1366:13+16
    assume {:print "$track_local(78,2,7):", $t10} $t10 == $t10;

    // $t11 := atomic_bridge_configuration::counterparty_timelock_duration() on_abort goto L2 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1367:25+61
    assume {:print "$at(2,52003,52064)"} true;
    call $t11 := $1_atomic_bridge_configuration_counterparty_timelock_duration();
    if ($abort_flag) {
        assume {:print "$at(2,52003,52064)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(78,2):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[time_lock]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1367:13+9
    assume {:print "$track_local(78,2,8):", $t11} $t11 == $t11;

    // $t12 := atomic_bridge_store::create_details<ethereum::EthereumAddress, address>($t10, $t4, $t5, $t3, $t11) on_abort goto L2 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1368:23+164
    assume {:print "$at(2,52088,52252)"} true;
    call $t12 := $1_atomic_bridge_store_create_details'$1_ethereum_EthereumAddress_address'($t10, $t4, $t5, $t3, $t11);
    if ($abort_flag) {
        assume {:print "$at(2,52088,52252)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(78,2):", $t9} $t9 == $t9;
        goto L2;
    }

    // trace_local[details]($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1368:13+7
    assume {:print "$track_local(78,2,6):", $t12} $t12 == $t12;

    // assume Identical($t13, select atomic_bridge_store::SmartTableWrapper.inner<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>(global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<ethereum::EthereumAddress, address>>>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:50:9+119
    assume {:print "$at(3,2168,2287)"} true;
    assume ($t13 == $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'$1_ethereum_EthereumAddress_address''_$memory, 1)->$inner);

    // atomic_bridge_store::add<ethereum::EthereumAddress, address>($t2, $t12) on_abort goto L2 with $t9 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1377:9+53
    assume {:print "$at(2,52335,52388)"} true;
    call $1_atomic_bridge_store_add'$1_ethereum_EthereumAddress_address'($t2, $t12);
    if ($abort_flag) {
        assume {:print "$at(2,52335,52388)"} true;
        $t9 := $abort_code;
        assume {:print "$track_abort(78,2):", $t9} $t9 == $t9;
        goto L2;
    }

    // $t14 := pack atomic_bridge_counterparty::BridgeTransferLockedEvent($t2, $t1, $t4, $t5, $t3, $t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1380:13+209
    assume {:print "$at(2,52424,52633)"} true;
    $t14 := $1_atomic_bridge_counterparty_BridgeTransferLockedEvent($t2, $t1, $t4, $t5, $t3, $t11);

    // opaque begin: event::emit<atomic_bridge_counterparty::BridgeTransferLockedEvent>($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1379:9+245
    assume {:print "$at(2,52399,52644)"} true;

    // opaque end: event::emit<atomic_bridge_counterparty::BridgeTransferLockedEvent>($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1379:9+245

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1389:5+1
    assume {:print "$at(2,52650,52651)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1389:5+1
    assume {:print "$at(2,52650,52651)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1389:5+1
L2:

    // abort($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:1389:5+1
    assume {:print "$at(2,52650,52651)"} true;
    $abort_code := $t9;
    $abort_flag := true;
    return;

}

// struct atomic_bridge_initiator::BridgeTransferCompletedEvent at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:161:5+130
datatype $1_atomic_bridge_initiator_BridgeTransferCompletedEvent {
    $1_atomic_bridge_initiator_BridgeTransferCompletedEvent($bridge_transfer_id: Vec (int), $pre_image: Vec (int))
}
function {:inline} $Update'$1_atomic_bridge_initiator_BridgeTransferCompletedEvent'_bridge_transfer_id(s: $1_atomic_bridge_initiator_BridgeTransferCompletedEvent, x: Vec (int)): $1_atomic_bridge_initiator_BridgeTransferCompletedEvent {
    $1_atomic_bridge_initiator_BridgeTransferCompletedEvent(x, s->$pre_image)
}
function {:inline} $Update'$1_atomic_bridge_initiator_BridgeTransferCompletedEvent'_pre_image(s: $1_atomic_bridge_initiator_BridgeTransferCompletedEvent, x: Vec (int)): $1_atomic_bridge_initiator_BridgeTransferCompletedEvent {
    $1_atomic_bridge_initiator_BridgeTransferCompletedEvent(s->$bridge_transfer_id, x)
}
function $IsValid'$1_atomic_bridge_initiator_BridgeTransferCompletedEvent'(s: $1_atomic_bridge_initiator_BridgeTransferCompletedEvent): bool {
    $IsValid'vec'u8''(s->$bridge_transfer_id)
      && $IsValid'vec'u8''(s->$pre_image)
}
function {:inline} $IsEqual'$1_atomic_bridge_initiator_BridgeTransferCompletedEvent'(s1: $1_atomic_bridge_initiator_BridgeTransferCompletedEvent, s2: $1_atomic_bridge_initiator_BridgeTransferCompletedEvent): bool {
    $IsEqual'vec'u8''(s1->$bridge_transfer_id, s2->$bridge_transfer_id)
    && $IsEqual'vec'u8''(s1->$pre_image, s2->$pre_image)}

// struct atomic_bridge_initiator::BridgeTransferInitiatedEvent at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:151:5+234
datatype $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent {
    $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent($bridge_transfer_id: Vec (int), $initiator: int, $recipient: Vec (int), $amount: int, $hash_lock: Vec (int), $time_lock: int)
}
function {:inline} $Update'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'_bridge_transfer_id(s: $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent, x: Vec (int)): $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent {
    $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent(x, s->$initiator, s->$recipient, s->$amount, s->$hash_lock, s->$time_lock)
}
function {:inline} $Update'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'_initiator(s: $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent, x: int): $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent {
    $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent(s->$bridge_transfer_id, x, s->$recipient, s->$amount, s->$hash_lock, s->$time_lock)
}
function {:inline} $Update'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'_recipient(s: $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent, x: Vec (int)): $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent {
    $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent(s->$bridge_transfer_id, s->$initiator, x, s->$amount, s->$hash_lock, s->$time_lock)
}
function {:inline} $Update'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'_amount(s: $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent, x: int): $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent {
    $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent(s->$bridge_transfer_id, s->$initiator, s->$recipient, x, s->$hash_lock, s->$time_lock)
}
function {:inline} $Update'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'_hash_lock(s: $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent, x: Vec (int)): $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent {
    $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent(s->$bridge_transfer_id, s->$initiator, s->$recipient, s->$amount, x, s->$time_lock)
}
function {:inline} $Update'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'_time_lock(s: $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent, x: int): $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent {
    $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent(s->$bridge_transfer_id, s->$initiator, s->$recipient, s->$amount, s->$hash_lock, x)
}
function $IsValid'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'(s: $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent): bool {
    $IsValid'vec'u8''(s->$bridge_transfer_id)
      && $IsValid'address'(s->$initiator)
      && $IsValid'vec'u8''(s->$recipient)
      && $IsValid'u64'(s->$amount)
      && $IsValid'vec'u8''(s->$hash_lock)
      && $IsValid'u64'(s->$time_lock)
}
function {:inline} $IsEqual'$1_atomic_bridge_initiator_BridgeTransferInitiatedEvent'(s1: $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent, s2: $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent): bool {
    $IsEqual'vec'u8''(s1->$bridge_transfer_id, s2->$bridge_transfer_id)
    && $IsEqual'address'(s1->$initiator, s2->$initiator)
    && $IsEqual'vec'u8''(s1->$recipient, s2->$recipient)
    && $IsEqual'u64'(s1->$amount, s2->$amount)
    && $IsEqual'vec'u8''(s1->$hash_lock, s2->$hash_lock)
    && $IsEqual'u64'(s1->$time_lock, s2->$time_lock)}

// struct atomic_bridge_initiator::BridgeTransferRefundedEvent at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:167:5+98
datatype $1_atomic_bridge_initiator_BridgeTransferRefundedEvent {
    $1_atomic_bridge_initiator_BridgeTransferRefundedEvent($bridge_transfer_id: Vec (int))
}
function {:inline} $Update'$1_atomic_bridge_initiator_BridgeTransferRefundedEvent'_bridge_transfer_id(s: $1_atomic_bridge_initiator_BridgeTransferRefundedEvent, x: Vec (int)): $1_atomic_bridge_initiator_BridgeTransferRefundedEvent {
    $1_atomic_bridge_initiator_BridgeTransferRefundedEvent(x)
}
function $IsValid'$1_atomic_bridge_initiator_BridgeTransferRefundedEvent'(s: $1_atomic_bridge_initiator_BridgeTransferRefundedEvent): bool {
    $IsValid'vec'u8''(s->$bridge_transfer_id)
}
function {:inline} $IsEqual'$1_atomic_bridge_initiator_BridgeTransferRefundedEvent'(s1: $1_atomic_bridge_initiator_BridgeTransferRefundedEvent, s2: $1_atomic_bridge_initiator_BridgeTransferRefundedEvent): bool {
    $IsEqual'vec'u8''(s1->$bridge_transfer_id, s2->$bridge_transfer_id)}

// fun atomic_bridge_initiator::complete_bridge_transfer [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+484
procedure {:timeLimit 40} $1_atomic_bridge_initiator_complete_bridge_transfer$verify(_$t0: $signer, _$t1: Vec (int), _$t2: Vec (int)) returns ()
{
    // declare local variables
    var $t3: int;
    var $t4: Vec (int);
    var $t5: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var $t6: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $t7: $1_ethereum_EthereumAddress;
    var $t8: int;
    var $t9: $1_atomic_bridge_initiator_BridgeTransferCompletedEvent;
    var $t0: $signer;
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+1
    assume {:print "$at(2,7488,7489)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+1
    assume $IsValid'vec'u8''($t1);

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+1
    assume $IsValid'vec'u8''($t2);

    // assume forall $rsc: features::Features: ResourceDomain<features::Features>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''($rsc))));

    // assume forall $rsc: atomic_bridge_configuration::BridgeConfig: ResourceDomain<atomic_bridge_configuration::BridgeConfig>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_configuration_BridgeConfig'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+484
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+484
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // trace_local[caller]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+1
    assume {:print "$track_local(79,0,0):", $t0} $t0 == $t0;

    // trace_local[bridge_transfer_id]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+1
    assume {:print "$track_local(79,0,1):", $t1} $t1 == $t1;

    // trace_local[pre_image]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:209:5+1
    assume {:print "$track_local(79,0,2):", $t2} $t2 == $t2;

    // atomic_bridge_configuration::assert_is_caller_operator($t0) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:214:9+33
    assume {:print "$at(2,7643,7676)"} true;
    call $1_atomic_bridge_configuration_assert_is_caller_operator($t0);
    if ($abort_flag) {
        assume {:print "$at(2,7643,7676)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(79,0):", $t3} $t3 == $t3;
        goto L2;
    }

    // $t4 := atomic_bridge_store::create_hashlock($t2) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:215:107+26
    assume {:print "$at(2,7784,7810)"} true;
    call $t4 := $1_atomic_bridge_store_create_hashlock($t2);
    if ($abort_flag) {
        assume {:print "$at(2,7784,7810)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(79,0):", $t3} $t3 == $t3;
        goto L2;
    }

    // assume Identical($t5, select atomic_bridge_store::SmartTableWrapper.inner<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>(global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:83:9+119
    assume {:print "$at(3,4006,4125)"} true;
    assume ($t5 == $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, 1)->$inner);

    // assume Identical($t6, smart_table::spec_get<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>($t5, $t1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:87:9+63
    assume {:print "$at(3,4400,4463)"} true;
    assume ($t6 == $1_smart_table_spec_get'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''($t5, $t1));

    // ($t7, $t8) := atomic_bridge_store::complete_transfer<address, ethereum::EthereumAddress>($t1, $t4) on_abort goto L2 with $t3 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:215:22+112
    assume {:print "$at(2,7699,7811)"} true;
    call $t7,$t8 := $1_atomic_bridge_store_complete_transfer'address_$1_ethereum_EthereumAddress'($t1, $t4);
    if ($abort_flag) {
        assume {:print "$at(2,7699,7811)"} true;
        $t3 := $abort_code;
        assume {:print "$track_abort(79,0):", $t3} $t3 == $t3;
        goto L2;
    }

    // drop($t8) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:215:17+1

    // drop($t7) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:215:14+1

    // $t9 := pack atomic_bridge_initiator::BridgeTransferCompletedEvent($t1, $t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:218:13+107
    assume {:print "$at(2,7847,7954)"} true;
    $t9 := $1_atomic_bridge_initiator_BridgeTransferCompletedEvent($t1, $t2);

    // opaque begin: event::emit<atomic_bridge_initiator::BridgeTransferCompletedEvent>($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:217:9+143
    assume {:print "$at(2,7822,7965)"} true;

    // opaque end: event::emit<atomic_bridge_initiator::BridgeTransferCompletedEvent>($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:217:9+143

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:223:5+1
    assume {:print "$at(2,7971,7972)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:223:5+1
    assume {:print "$at(2,7971,7972)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:223:5+1
L2:

    // abort($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:223:5+1
    assume {:print "$at(2,7971,7972)"} true;
    $abort_code := $t3;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_initiator::initiate_bridge_transfer [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1060
procedure {:timeLimit 40} $1_atomic_bridge_initiator_initiate_bridge_transfer$verify(_$t0: $signer, _$t1: Vec (int), _$t2: Vec (int), _$t3: int) returns ()
{
    // declare local variables
    var $t4: Vec (int);
    var $t5: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $t6: $1_ethereum_EthereumAddress;
    var $t7: int;
    var $t8: int;
    var $t9: $1_ethereum_EthereumAddress;
    var $t10: int;
    var $t11: int;
    var $t12: int;
    var $t13: $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $t14: Vec (int);
    var $t15: Table int ($1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress');
    var $t16: $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent;
    var $t0: $signer;
    var $t1: Vec (int);
    var $t2: Vec (int);
    var $t3: int;
    var $temp_0'$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'': $1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress';
    var $temp_0'$1_ethereum_EthereumAddress': $1_ethereum_EthereumAddress;
    var $temp_0'address': int;
    var $temp_0'signer': $signer;
    var $temp_0'u64': int;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;
    $t2 := _$t2;
    $t3 := _$t3;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume {:print "$at(2,6372,6373)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume $IsValid'vec'u8''($t1);

    // assume WellFormed($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume $IsValid'vec'u8''($t2);

    // assume WellFormed($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume $IsValid'u64'($t3);

    // assume forall $rsc: features::Features: ResourceDomain<features::Features>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: object::ObjectCore: ResourceDomain<object::ObjectCore>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: fungible_asset::ConcurrentFungibleBalance: ResourceDomain<fungible_asset::ConcurrentFungibleBalance>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($rsc))));

    // assume forall $rsc: fungible_asset::ConcurrentSupply: ResourceDomain<fungible_asset::ConcurrentSupply>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentSupply'($rsc))));

    // assume forall $rsc: fungible_asset::FungibleStore: ResourceDomain<fungible_asset::FungibleStore>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0);
    ($IsValid'$1_fungible_asset_FungibleStore'($rsc))));

    // assume forall $rsc: fungible_asset::Supply: ResourceDomain<fungible_asset::Supply>(): And(WellFormed($rsc), Le(Len<u128>(select option::Option.vec(select fungible_asset::Supply.maximum($rsc))), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Supply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Supply_$memory, $a_0);
    (($IsValid'$1_fungible_asset_Supply'($rsc) && (LenVec($rsc->$maximum->$vec) <= 1)))));

    // assume forall $rsc: coin::CoinConversionMap: ResourceDomain<coin::CoinConversionMap>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinConversionMap_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinConversionMap_$memory, $a_0);
    ($IsValid'$1_coin_CoinConversionMap'($rsc))));

    // assume forall $rsc: coin::PairedFungibleAssetRefs: ResourceDomain<coin::PairedFungibleAssetRefs>(): And(WellFormed($rsc), And(And(Le(Len<fungible_asset::MintRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.mint_ref_opt($rsc))), 1), Le(Len<fungible_asset::TransferRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.transfer_ref_opt($rsc))), 1)), Le(Len<fungible_asset::BurnRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.burn_ref_opt($rsc))), 1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_PairedFungibleAssetRefs_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_PairedFungibleAssetRefs_$memory, $a_0);
    (($IsValid'$1_coin_PairedFungibleAssetRefs'($rsc) && (((LenVec($rsc->$mint_ref_opt->$vec) <= 1) && (LenVec($rsc->$transfer_ref_opt->$vec) <= 1)) && (LenVec($rsc->$burn_ref_opt->$vec) <= 1))))));

    // assume forall $rsc: coin::CoinInfo<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinInfo<aptos_coin::AptosCoin>>(): And(WellFormed($rsc), And(Le(Len<optional_aggregator::OptionalAggregator>(select option::Option.vec(select coin::CoinInfo.supply($rsc))), 1), forall $elem: optional_aggregator::OptionalAggregator: select option::Option.vec(select coin::CoinInfo.supply($rsc)): And(And(And(And(And(Iff(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), option::$is_none<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), Iff(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), option::$is_none<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))), Implies(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), Le(select optional_aggregator::Integer.value<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), select optional_aggregator::Integer.limit<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)))))), Implies(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), Le(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem))), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))))), Le(Len<aggregator::Aggregator>(select option::Option.vec(select optional_aggregator::OptionalAggregator.aggregator($elem))), 1)), Le(Len<optional_aggregator::Integer>(select option::Option.vec(select optional_aggregator::OptionalAggregator.integer($elem))), 1)))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    (($IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($rsc) && ((LenVec($rsc->$supply->$vec) <= 1) && (var $range_1 := $rsc->$supply->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) <==> $1_option_$is_none'$1_optional_aggregator_Integer'($elem->$integer)) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) <==> $1_option_$is_none'$1_aggregator_Aggregator'($elem->$aggregator))) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) ==> ($1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$value <= $1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$limit))) && ($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) ==> ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator)) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator))))) && (LenVec($elem->$aggregator->$vec) <= 1)) && (LenVec($elem->$integer->$vec) <= 1)))))))))));

    // assume forall $rsc: coin::CoinStore<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinStore<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($rsc))));

    // assume forall $rsc: coin::Ghost$supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$supply<aptos_coin::AptosCoin>>(0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume $ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume $ResourceExists($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: atomic_bridge_store::Nonce: ResourceDomain<atomic_bridge_store::Nonce>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_Nonce_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_Nonce_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_Nonce'($rsc))));

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''($rsc))));

    // assume forall $rsc: atomic_bridge_configuration::BridgeConfig: ResourceDomain<atomic_bridge_configuration::BridgeConfig>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_configuration_BridgeConfig_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_configuration_BridgeConfig'($rsc))));

    // assume forall $rsc: atomic_bridge::AptosCoinBurnCapability: ResourceDomain<atomic_bridge::AptosCoinBurnCapability>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_AptosCoinBurnCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_AptosCoinBurnCapability_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_AptosCoinBurnCapability'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1060
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1060
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // trace_local[initiator]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume {:print "$track_local(79,1,0):", $t0} $t0 == $t0;

    // trace_local[recipient]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume {:print "$track_local(79,1,1):", $t1} $t1 == $t1;

    // trace_local[hash_lock]($t2) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume {:print "$track_local(79,1,2):", $t2} $t2 == $t2;

    // trace_local[amount]($t3) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:174:5+1
    assume {:print "$track_local(79,1,3):", $t3} $t3 == $t3;

    // $t9 := ethereum::ethereum_address($t1) on_abort goto L2 with $t10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:180:32+37
    assume {:print "$at(2,6564,6601)"} true;
    call $t9 := $1_ethereum_ethereum_address($t1);
    if ($abort_flag) {
        assume {:print "$at(2,6564,6601)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,1):", $t10} $t10 == $t10;
        goto L2;
    }

    // trace_local[ethereum_address]($t9) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:180:13+16
    assume {:print "$track_local(79,1,6):", $t9} $t9 == $t9;

    // $t11 := signer::address_of($t0) on_abort goto L2 with $t10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:181:33+29
    assume {:print "$at(2,6635,6664)"} true;
    call $t11 := $1_signer_address_of($t0);
    if ($abort_flag) {
        assume {:print "$at(2,6635,6664)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,1):", $t10} $t10 == $t10;
        goto L2;
    }

    // trace_local[initiator_address]($t11) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:181:13+17
    assume {:print "$track_local(79,1,7):", $t11} $t11 == $t11;

    // $t12 := atomic_bridge_configuration::initiator_timelock_duration() on_abort goto L2 with $t10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:182:25+58
    assume {:print "$at(2,6690,6748)"} true;
    call $t12 := $1_atomic_bridge_configuration_initiator_timelock_duration();
    if ($abort_flag) {
        assume {:print "$at(2,6690,6748)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,1):", $t10} $t10 == $t10;
        goto L2;
    }

    // trace_local[time_lock]($t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:182:13+9
    assume {:print "$track_local(79,1,8):", $t12} $t12 == $t12;

    // $t13 := atomic_bridge_store::create_details<address, ethereum::EthereumAddress>($t11, $t9, $t3, $t2, $t12) on_abort goto L2 with $t10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:185:13+180
    assume {:print "$at(2,6785,6965)"} true;
    call $t13 := $1_atomic_bridge_store_create_details'address_$1_ethereum_EthereumAddress'($t11, $t9, $t3, $t2, $t12);
    if ($abort_flag) {
        assume {:print "$at(2,6785,6965)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,1):", $t10} $t10 == $t10;
        goto L2;
    }

    // trace_local[details]($t13) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:184:13+7
    assume {:print "$at(2,6763,6770)"} true;
    assume {:print "$track_local(79,1,5):", $t13} $t13 == $t13;

    // $t14 := atomic_bridge_store::bridge_transfer_id<address, ethereum::EthereumAddress>($t13) on_abort goto L2 with $t10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:192:34+28
    assume {:print "$at(2,7001,7029)"} true;
    call $t14 := $1_atomic_bridge_store_bridge_transfer_id'address_$1_ethereum_EthereumAddress'($t13);
    if ($abort_flag) {
        assume {:print "$at(2,7001,7029)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,1):", $t10} $t10 == $t10;
        goto L2;
    }

    // trace_local[bridge_transfer_id]($t14) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:192:13+18
    assume {:print "$track_local(79,1,4):", $t14} $t14 == $t14;

    // assume Identical($t15, select atomic_bridge_store::SmartTableWrapper.inner<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>(global<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>(0x1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.spec.move:50:9+119
    assume {:print "$at(3,2168,2287)"} true;
    assume ($t15 == $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, 1)->$inner);

    // atomic_bridge_store::add<address, ethereum::EthereumAddress>($t14, $t13) on_abort goto L2 with $t10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:193:9+53
    assume {:print "$at(2,7039,7092)"} true;
    call $1_atomic_bridge_store_add'address_$1_ethereum_EthereumAddress'($t14, $t13);
    if ($abort_flag) {
        assume {:print "$at(2,7039,7092)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,1):", $t10} $t10 == $t10;
        goto L2;
    }

    // atomic_bridge::burn($t11, $t3) on_abort goto L2 with $t10 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:194:9+46
    assume {:print "$at(2,7102,7148)"} true;
    call $1_atomic_bridge_burn($t11, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,7102,7148)"} true;
        $t10 := $abort_code;
        assume {:print "$track_abort(79,1):", $t10} $t10 == $t10;
        goto L2;
    }

    // $t16 := pack atomic_bridge_initiator::BridgeTransferInitiatedEvent($t14, $t11, $t1, $t3, $t2, $t12) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:197:13+230
    assume {:print "$at(2,7184,7414)"} true;
    $t16 := $1_atomic_bridge_initiator_BridgeTransferInitiatedEvent($t14, $t11, $t1, $t3, $t2, $t12);

    // opaque begin: event::emit<atomic_bridge_initiator::BridgeTransferInitiatedEvent>($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:196:9+266
    assume {:print "$at(2,7159,7425)"} true;

    // opaque end: event::emit<atomic_bridge_initiator::BridgeTransferInitiatedEvent>($t16) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:196:9+266

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:206:5+1
    assume {:print "$at(2,7431,7432)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:206:5+1
    assume {:print "$at(2,7431,7432)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:206:5+1
L2:

    // abort($t10) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:206:5+1
    assume {:print "$at(2,7431,7432)"} true;
    $abort_code := $t10;
    $abort_flag := true;
    return;

}

// fun atomic_bridge_initiator::refund_bridge_transfer [verification] at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+410
procedure {:timeLimit 40} $1_atomic_bridge_initiator_refund_bridge_transfer$verify(_$t0: $signer, _$t1: Vec (int)) returns ()
{
    // declare local variables
    var $t2: int;
    var $t3: int;
    var $t4: int;
    var $t5: $1_atomic_bridge_initiator_BridgeTransferRefundedEvent;
    var $t0: $signer;
    var $t1: Vec (int);
    var $temp_0'signer': $signer;
    var $temp_0'vec'u8'': Vec (int);
    $t0 := _$t0;
    $t1 := _$t1;

    // verification entrypoint assumptions
    call $InitVerification();

    // bytecode translation starts here
    // assume WellFormed($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume {:print "$at(2,8063,8064)"} true;
    assume $IsValid'signer'($t0) && $1_signer_is_txn_signer($t0) && $1_signer_is_txn_signer_addr($t0->$addr);

    // assume WellFormed($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume $IsValid'vec'u8''($t1);

    // assume forall $rsc: features::Features: ResourceDomain<features::Features>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_features_Features_$memory, $a_0)}(var $rsc := $ResourceValue($1_features_Features_$memory, $a_0);
    ($IsValid'$1_features_Features'($rsc))));

    // assume forall $rsc: object::ObjectCore: ResourceDomain<object::ObjectCore>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_ObjectCore_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_ObjectCore_$memory, $a_0);
    ($IsValid'$1_object_ObjectCore'($rsc))));

    // assume forall $rsc: object::Untransferable: ResourceDomain<object::Untransferable>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_object_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_object_Untransferable_$memory, $a_0);
    ($IsValid'$1_object_Untransferable'($rsc))));

    // assume forall $rsc: fungible_asset::Untransferable: ResourceDomain<fungible_asset::Untransferable>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Untransferable_$memory, $a_0);
    ($IsValid'$1_fungible_asset_Untransferable'($rsc))));

    // assume forall $rsc: fungible_asset::ConcurrentFungibleBalance: ResourceDomain<fungible_asset::ConcurrentFungibleBalance>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentFungibleBalance_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentFungibleBalance'($rsc))));

    // assume forall $rsc: fungible_asset::ConcurrentSupply: ResourceDomain<fungible_asset::ConcurrentSupply>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_ConcurrentSupply_$memory, $a_0);
    ($IsValid'$1_fungible_asset_ConcurrentSupply'($rsc))));

    // assume forall $rsc: fungible_asset::DispatchFunctionStore: ResourceDomain<fungible_asset::DispatchFunctionStore>(): And(WellFormed($rsc), And(And(Le(Len<function_info::FunctionInfo>(select option::Option.vec(select fungible_asset::DispatchFunctionStore.withdraw_function($rsc))), 1), Le(Len<function_info::FunctionInfo>(select option::Option.vec(select fungible_asset::DispatchFunctionStore.deposit_function($rsc))), 1)), Le(Len<function_info::FunctionInfo>(select option::Option.vec(select fungible_asset::DispatchFunctionStore.derived_balance_function($rsc))), 1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_DispatchFunctionStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_DispatchFunctionStore_$memory, $a_0);
    (($IsValid'$1_fungible_asset_DispatchFunctionStore'($rsc) && (((LenVec($rsc->$withdraw_function->$vec) <= 1) && (LenVec($rsc->$deposit_function->$vec) <= 1)) && (LenVec($rsc->$derived_balance_function->$vec) <= 1))))));

    // assume forall $rsc: fungible_asset::FungibleStore: ResourceDomain<fungible_asset::FungibleStore>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_FungibleStore_$memory, $a_0);
    ($IsValid'$1_fungible_asset_FungibleStore'($rsc))));

    // assume forall $rsc: fungible_asset::Metadata: ResourceDomain<fungible_asset::Metadata>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Metadata_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Metadata_$memory, $a_0);
    ($IsValid'$1_fungible_asset_Metadata'($rsc))));

    // assume forall $rsc: fungible_asset::Supply: ResourceDomain<fungible_asset::Supply>(): And(WellFormed($rsc), Le(Len<u128>(select option::Option.vec(select fungible_asset::Supply.maximum($rsc))), 1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_fungible_asset_Supply_$memory, $a_0)}(var $rsc := $ResourceValue($1_fungible_asset_Supply_$memory, $a_0);
    (($IsValid'$1_fungible_asset_Supply'($rsc) && (LenVec($rsc->$maximum->$vec) <= 1)))));

    // assume forall $rsc: dispatchable_fungible_asset::TransferRefStore: ResourceDomain<dispatchable_fungible_asset::TransferRefStore>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_dispatchable_fungible_asset_TransferRefStore_$memory, $a_0)}(var $rsc := $ResourceValue($1_dispatchable_fungible_asset_TransferRefStore_$memory, $a_0);
    ($IsValid'$1_dispatchable_fungible_asset_TransferRefStore'($rsc))));

    // assume forall $rsc: primary_fungible_store::DeriveRefPod: ResourceDomain<primary_fungible_store::DeriveRefPod>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0)}(var $rsc := $ResourceValue($1_primary_fungible_store_DeriveRefPod_$memory, $a_0);
    ($IsValid'$1_primary_fungible_store_DeriveRefPod'($rsc))));

    // assume forall $rsc: coin::CoinConversionMap: ResourceDomain<coin::CoinConversionMap>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinConversionMap_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinConversionMap_$memory, $a_0);
    ($IsValid'$1_coin_CoinConversionMap'($rsc))));

    // assume forall $rsc: coin::MigrationFlag: ResourceDomain<coin::MigrationFlag>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_MigrationFlag_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_MigrationFlag_$memory, $a_0);
    ($IsValid'$1_coin_MigrationFlag'($rsc))));

    // assume forall $rsc: coin::PairedCoinType: ResourceDomain<coin::PairedCoinType>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_PairedCoinType_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_PairedCoinType_$memory, $a_0);
    ($IsValid'$1_coin_PairedCoinType'($rsc))));

    // assume forall $rsc: coin::PairedFungibleAssetRefs: ResourceDomain<coin::PairedFungibleAssetRefs>(): And(WellFormed($rsc), And(And(Le(Len<fungible_asset::MintRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.mint_ref_opt($rsc))), 1), Le(Len<fungible_asset::TransferRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.transfer_ref_opt($rsc))), 1)), Le(Len<fungible_asset::BurnRef>(select option::Option.vec(select coin::PairedFungibleAssetRefs.burn_ref_opt($rsc))), 1))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_PairedFungibleAssetRefs_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_PairedFungibleAssetRefs_$memory, $a_0);
    (($IsValid'$1_coin_PairedFungibleAssetRefs'($rsc) && (((LenVec($rsc->$mint_ref_opt->$vec) <= 1) && (LenVec($rsc->$transfer_ref_opt->$vec) <= 1)) && (LenVec($rsc->$burn_ref_opt->$vec) <= 1))))));

    // assume forall $rsc: coin::CoinInfo<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinInfo<aptos_coin::AptosCoin>>(): And(WellFormed($rsc), And(Le(Len<optional_aggregator::OptionalAggregator>(select option::Option.vec(select coin::CoinInfo.supply($rsc))), 1), forall $elem: optional_aggregator::OptionalAggregator: select option::Option.vec(select coin::CoinInfo.supply($rsc)): And(And(And(And(And(Iff(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), option::$is_none<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), Iff(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), option::$is_none<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))), Implies(option::$is_some<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)), Le(select optional_aggregator::Integer.value<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem))), select optional_aggregator::Integer.limit<optional_aggregator::Integer>(option::$borrow<optional_aggregator::Integer>(select optional_aggregator::OptionalAggregator.integer($elem)))))), Implies(option::$is_some<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)), Le(aggregator::spec_aggregator_get_val(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem))), aggregator::spec_get_limit(option::$borrow<aggregator::Aggregator>(select optional_aggregator::OptionalAggregator.aggregator($elem)))))), Le(Len<aggregator::Aggregator>(select option::Option.vec(select optional_aggregator::OptionalAggregator.aggregator($elem))), 1)), Le(Len<optional_aggregator::Integer>(select option::Option.vec(select optional_aggregator::OptionalAggregator.integer($elem))), 1)))) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinInfo'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    (($IsValid'$1_coin_CoinInfo'$1_aptos_coin_AptosCoin''($rsc) && ((LenVec($rsc->$supply->$vec) <= 1) && (var $range_1 := $rsc->$supply->$vec; (forall $i_2: int :: InRangeVec($range_1, $i_2) ==> (var $elem := ReadVec($range_1, $i_2);
    ((((((($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) <==> $1_option_$is_none'$1_optional_aggregator_Integer'($elem->$integer)) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) <==> $1_option_$is_none'$1_aggregator_Aggregator'($elem->$aggregator))) && ($1_option_$is_some'$1_optional_aggregator_Integer'($elem->$integer) ==> ($1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$value <= $1_option_$borrow'$1_optional_aggregator_Integer'($elem->$integer)->$limit))) && ($1_option_$is_some'$1_aggregator_Aggregator'($elem->$aggregator) ==> ($1_aggregator_spec_aggregator_get_val($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator)) <= $1_aggregator_spec_get_limit($1_option_$borrow'$1_aggregator_Aggregator'($elem->$aggregator))))) && (LenVec($elem->$aggregator->$vec) <= 1)) && (LenVec($elem->$integer->$vec) <= 1)))))))))));

    // assume forall $rsc: coin::CoinStore<aptos_coin::AptosCoin>: ResourceDomain<coin::CoinStore<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_CoinStore'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_CoinStore'$1_aptos_coin_AptosCoin''($rsc))));

    // assume forall $rsc: coin::Ghost$supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$supply<aptos_coin::AptosCoin>>(0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume $ResourceExists($1_coin_Ghost$supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>: ResourceDomain<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0)}(var $rsc := $ResourceValue($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, $a_0);
    ($IsValid'$1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin''($rsc))));

    // assume exists<coin::Ghost$aggregate_supply<aptos_coin::AptosCoin>>(0x0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume $ResourceExists($1_coin_Ghost$aggregate_supply'$1_aptos_coin_AptosCoin'_$memory, 0);

    // assume forall $rsc: chain_status::GenesisEndMarker: ResourceDomain<chain_status::GenesisEndMarker>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0)}(var $rsc := $ResourceValue($1_chain_status_GenesisEndMarker_$memory, $a_0);
    ($IsValid'$1_chain_status_GenesisEndMarker'($rsc))));

    // assume forall $rsc: timestamp::CurrentTimeMicroseconds: ResourceDomain<timestamp::CurrentTimeMicroseconds>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0)}(var $rsc := $ResourceValue($1_timestamp_CurrentTimeMicroseconds_$memory, $a_0);
    ($IsValid'$1_timestamp_CurrentTimeMicroseconds'($rsc))));

    // assume forall $rsc: reconfiguration::Configuration: ResourceDomain<reconfiguration::Configuration>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_reconfiguration_Configuration_$memory, $a_0)}(var $rsc := $ResourceValue($1_reconfiguration_Configuration_$memory, $a_0);
    ($IsValid'$1_reconfiguration_Configuration'($rsc))));

    // assume forall $rsc: atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>: ResourceDomain<atomic_bridge_store::SmartTableWrapper<vector<u8>, atomic_bridge_store::BridgeTransferDetails<address, ethereum::EthereumAddress>>>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress''_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_store_SmartTableWrapper'vec'u8'_$1_atomic_bridge_store_BridgeTransferDetails'address_$1_ethereum_EthereumAddress'''($rsc))));

    // assume forall $rsc: atomic_bridge::AptosCoinMintCapability: ResourceDomain<atomic_bridge::AptosCoinMintCapability>(): WellFormed($rsc) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume (forall $a_0: int :: {$ResourceValue($1_atomic_bridge_AptosCoinMintCapability_$memory, $a_0)}(var $rsc := $ResourceValue($1_atomic_bridge_AptosCoinMintCapability_$memory, $a_0);
    ($IsValid'$1_atomic_bridge_AptosCoinMintCapability'($rsc))));

    // assume Implies(chain_status::$is_operating(), exists<timestamp::CurrentTimeMicroseconds>(0x1)) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+410
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/timestamp.spec.move:36:9+107
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> $ResourceExists($1_timestamp_CurrentTimeMicroseconds_$memory, 1));

    // assume Implies(chain_status::$is_operating(), Ge(timestamp::spec_now_microseconds(), reconfiguration::$last_reconfiguration_time())) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+410
    // global invariant at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/reconfiguration.spec.move:51:9+137
    assume ($1_chain_status_$is_operating($1_chain_status_GenesisEndMarker_$memory) ==> ($1_timestamp_spec_now_microseconds($1_timestamp_CurrentTimeMicroseconds_$memory) >= $1_reconfiguration_$last_reconfiguration_time($1_reconfiguration_Configuration_$memory)));

    // trace_local[_caller]($t0) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume {:print "$track_local(79,2,0):", $t0} $t0 == $t0;

    // trace_local[bridge_transfer_id]($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:226:5+1
    assume {:print "$track_local(79,2,1):", $t1} $t1 == $t1;

    // ($t2, $t3) := atomic_bridge_store::cancel_transfer<address, ethereum::EthereumAddress>($t1) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:230:34+82
    assume {:print "$at(2,8211,8293)"} true;
    call $t2,$t3 := $1_atomic_bridge_store_cancel_transfer'address_$1_ethereum_EthereumAddress'($t1);
    if ($abort_flag) {
        assume {:print "$at(2,8211,8293)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(79,2):", $t4} $t4 == $t4;
        goto L2;
    }

    // atomic_bridge::mint($t2, $t3) on_abort goto L2 with $t4 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:231:9+37
    assume {:print "$at(2,8303,8340)"} true;
    call $1_atomic_bridge_mint($t2, $t3);
    if ($abort_flag) {
        assume {:print "$at(2,8303,8340)"} true;
        $t4 := $abort_code;
        assume {:print "$track_abort(79,2):", $t4} $t4 == $t4;
        goto L2;
    }

    // $t5 := pack atomic_bridge_initiator::BridgeTransferRefundedEvent($t1) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:234:13+79
    assume {:print "$at(2,8376,8455)"} true;
    $t5 := $1_atomic_bridge_initiator_BridgeTransferRefundedEvent($t1);

    // opaque begin: event::emit<atomic_bridge_initiator::BridgeTransferRefundedEvent>($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:233:9+115
    assume {:print "$at(2,8351,8466)"} true;

    // opaque end: event::emit<atomic_bridge_initiator::BridgeTransferRefundedEvent>($t5) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:233:9+115

    // label L1 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:238:5+1
    assume {:print "$at(2,8472,8473)"} true;
L1:

    // return () at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:238:5+1
    assume {:print "$at(2,8472,8473)"} true;
    return;

    // label L2 at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:238:5+1
L2:

    // abort($t4) at /Users/andygmove/Downloads/repos/aptos-core/aptos-move/framework/aptos-framework/sources/atomic_bridge.move:238:5+1
    assume {:print "$at(2,8472,8473)"} true;
    $abort_code := $t4;
    $abort_flag := true;
    return;

}
